{"version":3,"file":"bridge.bfbf685b.js.map","sources":["<anon>","node_modules/crypto-js/aes.js","node_modules/crypto-js/core.js","node_modules/@parcel/node-resolver-core/lib/_empty.js","node_modules/crypto-js/enc-base64.js","node_modules/crypto-js/md5.js","node_modules/crypto-js/evpkdf.js","node_modules/crypto-js/sha1.js","node_modules/crypto-js/hmac.js","node_modules/crypto-js/cipher-core.js","scripts/bridge.js","node_modules/penpal/dist/penpal.mjs","node_modules/penpal/src/PenpalError.ts","node_modules/penpal/src/errorSerialization.ts","node_modules/penpal/src/Reply.ts","node_modules/penpal/src/namespace.ts","node_modules/penpal/src/guards.ts","node_modules/penpal/src/methodSerialization.ts","node_modules/penpal/src/connectCallHandler.ts","node_modules/penpal/src/generateId.ts","node_modules/penpal/src/CallOptions.ts","node_modules/penpal/src/connectRemoteProxy.ts","node_modules/penpal/src/getPromiseWithResolvers.ts","node_modules/penpal/src/PenpalBugError.ts","node_modules/penpal/src/backwardCompatibility.ts","node_modules/penpal/src/shakeHands.ts","node_modules/penpal/src/once.ts","node_modules/penpal/src/connect.ts","node_modules/penpal/src/messengers/WindowMessenger.ts","node_modules/penpal/src/messengers/WorkerMessenger.ts","node_modules/penpal/src/messengers/PortMessenger.ts","node_modules/penpal/src/ErrorCodeObj.ts","node_modules/penpal/src/debug.ts","scripts/utils.js","node_modules/ramda/es/path.js","node_modules/ramda/es/internal/_curry2.js","node_modules/ramda/es/internal/_curry1.js","node_modules/ramda/es/internal/_isPlaceholder.js","node_modules/ramda/es/paths.js","node_modules/ramda/es/internal/_isInteger.js","node_modules/ramda/es/nth.js","node_modules/ramda/es/internal/_isString.js","node_modules/ramda/es/without.js","node_modules/ramda/es/internal/_Set.js","node_modules/ramda/es/internal/_includes.js","node_modules/ramda/es/internal/_indexOf.js","node_modules/ramda/es/equals.js","node_modules/ramda/es/internal/_equals.js","node_modules/ramda/es/internal/_arrayFromIterator.js","node_modules/ramda/es/internal/_includesWith.js","node_modules/ramda/es/internal/_functionName.js","node_modules/ramda/es/internal/_has.js","node_modules/ramda/es/internal/_objectIs.js","node_modules/ramda/es/keys.js","node_modules/ramda/es/internal/_isArguments.js","node_modules/ramda/es/type.js","node_modules/ramda/es/reject.js","node_modules/ramda/es/internal/_complement.js","node_modules/ramda/es/filter.js","node_modules/ramda/es/internal/_arrayReduce.js","node_modules/ramda/es/internal/_dispatchable.js","node_modules/ramda/es/internal/_isArray.js","node_modules/ramda/es/internal/_isTransformer.js","node_modules/ramda/es/internal/_filter.js","node_modules/ramda/es/internal/_isObject.js","node_modules/ramda/es/internal/_xfilter.js","node_modules/ramda/es/internal/_xfBase.js","node_modules/ramda/es/zipObj.js"],"sourceRoot":"../../","sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirece9f\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirece9f\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"jMwRH\", function(module, exports) {\n\n\n\n\n\n(function(root, factory, undef) {\n    // CommonJS\n    module.exports = exports = factory((parcelRequire(\"g5VXk\")), (parcelRequire(\"gQwaw\")), (parcelRequire(\"4L4J5\")), (parcelRequire(\"6MaQY\")), (parcelRequire(\"l3r0T\")));\n})(this, function(CryptoJS) {\n    (function() {\n        // Shortcuts\n        var C = CryptoJS;\n        var C_lib = C.lib;\n        var BlockCipher = C_lib.BlockCipher;\n        var C_algo = C.algo;\n        // Lookup tables\n        var SBOX = [];\n        var INV_SBOX = [];\n        var SUB_MIX_0 = [];\n        var SUB_MIX_1 = [];\n        var SUB_MIX_2 = [];\n        var SUB_MIX_3 = [];\n        var INV_SUB_MIX_0 = [];\n        var INV_SUB_MIX_1 = [];\n        var INV_SUB_MIX_2 = [];\n        var INV_SUB_MIX_3 = [];\n        // Compute lookup tables\n        (function() {\n            // Compute double table\n            var d = [];\n            for(var i = 0; i < 256; i++)if (i < 128) d[i] = i << 1;\n            else d[i] = i << 1 ^ 0x11b;\n            // Walk GF(2^8)\n            var x = 0;\n            var xi = 0;\n            for(var i = 0; i < 256; i++){\n                // Compute sbox\n                var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n                sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n                SBOX[x] = sx;\n                INV_SBOX[sx] = x;\n                // Compute multiplication\n                var x2 = d[x];\n                var x4 = d[x2];\n                var x8 = d[x4];\n                // Compute sub bytes, mix columns tables\n                var t = d[sx] * 0x101 ^ sx * 0x1010100;\n                SUB_MIX_0[x] = t << 24 | t >>> 8;\n                SUB_MIX_1[x] = t << 16 | t >>> 16;\n                SUB_MIX_2[x] = t << 8 | t >>> 24;\n                SUB_MIX_3[x] = t;\n                // Compute inv sub bytes, inv mix columns tables\n                var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n                INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;\n                INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;\n                INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;\n                INV_SUB_MIX_3[sx] = t;\n                // Compute next counter\n                if (!x) x = xi = 1;\n                else {\n                    x = x2 ^ d[d[d[x8 ^ x2]]];\n                    xi ^= d[d[xi]];\n                }\n            }\n        })();\n        // Precomputed Rcon lookup\n        var RCON = [\n            0x00,\n            0x01,\n            0x02,\n            0x04,\n            0x08,\n            0x10,\n            0x20,\n            0x40,\n            0x80,\n            0x1b,\n            0x36\n        ];\n        /**\n\t     * AES block cipher algorithm.\n\t     */ var AES = C_algo.AES = BlockCipher.extend({\n            _doReset: function() {\n                var t;\n                // Skip reset of nRounds has been set before and key did not change\n                if (this._nRounds && this._keyPriorReset === this._key) return;\n                // Shortcuts\n                var key = this._keyPriorReset = this._key;\n                var keyWords = key.words;\n                var keySize = key.sigBytes / 4;\n                // Compute number of rounds\n                var nRounds = this._nRounds = keySize + 6;\n                // Compute number of key schedule rows\n                var ksRows = (nRounds + 1) * 4;\n                // Compute key schedule\n                var keySchedule = this._keySchedule = [];\n                for(var ksRow = 0; ksRow < ksRows; ksRow++)if (ksRow < keySize) keySchedule[ksRow] = keyWords[ksRow];\n                else {\n                    t = keySchedule[ksRow - 1];\n                    if (!(ksRow % keySize)) {\n                        // Rot word\n                        t = t << 8 | t >>> 24;\n                        // Sub word\n                        t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];\n                        // Mix Rcon\n                        t ^= RCON[ksRow / keySize | 0] << 24;\n                    } else if (keySize > 6 && ksRow % keySize == 4) // Sub word\n                    t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];\n                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n                }\n                // Compute inv key schedule\n                var invKeySchedule = this._invKeySchedule = [];\n                for(var invKsRow = 0; invKsRow < ksRows; invKsRow++){\n                    var ksRow = ksRows - invKsRow;\n                    if (invKsRow % 4) var t = keySchedule[ksRow];\n                    else var t = keySchedule[ksRow - 4];\n                    if (invKsRow < 4 || ksRow <= 4) invKeySchedule[invKsRow] = t;\n                    else invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n                }\n            },\n            encryptBlock: function(M, offset) {\n                this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n            },\n            decryptBlock: function(M, offset) {\n                // Swap 2nd and 4th rows\n                var t = M[offset + 1];\n                M[offset + 1] = M[offset + 3];\n                M[offset + 3] = t;\n                this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n                // Inv swap 2nd and 4th rows\n                var t = M[offset + 1];\n                M[offset + 1] = M[offset + 3];\n                M[offset + 3] = t;\n            },\n            _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n                // Shortcut\n                var nRounds = this._nRounds;\n                // Get input, add round key\n                var s0 = M[offset] ^ keySchedule[0];\n                var s1 = M[offset + 1] ^ keySchedule[1];\n                var s2 = M[offset + 2] ^ keySchedule[2];\n                var s3 = M[offset + 3] ^ keySchedule[3];\n                // Key schedule row counter\n                var ksRow = 4;\n                // Rounds\n                for(var round = 1; round < nRounds; round++){\n                    // Shift rows, sub bytes, mix columns, add round key\n                    var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n                    var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n                    var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n                    var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n                    // Update state\n                    s0 = t0;\n                    s1 = t1;\n                    s2 = t2;\n                    s3 = t3;\n                }\n                // Shift rows, sub bytes, add round key\n                var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n                var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n                var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n                var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n                // Set output\n                M[offset] = t0;\n                M[offset + 1] = t1;\n                M[offset + 2] = t2;\n                M[offset + 3] = t3;\n            },\n            keySize: 8\n        });\n        /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */ C.AES = BlockCipher._createHelper(AES);\n    })();\n    return CryptoJS.AES;\n});\n\n});\nparcelRegister(\"g5VXk\", function(module, exports) {\n\n(function(root, factory) {\n    // CommonJS\n    module.exports = exports = factory();\n})(this, function() {\n    /*globals window, global, require*/ /**\n\t * CryptoJS core components.\n\t */ var CryptoJS = CryptoJS || function(Math1, undefined) {\n        var crypto;\n        // Native crypto from window (Browser)\n        if (typeof window !== \"undefined\" && window.crypto) crypto = window.crypto;\n        // Native crypto in web worker (Browser)\n        if (typeof self !== \"undefined\" && self.crypto) crypto = self.crypto;\n        // Native crypto from worker\n        if (typeof globalThis !== \"undefined\" && globalThis.crypto) crypto = globalThis.crypto;\n        // Native (experimental IE 11) crypto from window (Browser)\n        if (!crypto && typeof window !== \"undefined\" && window.msCrypto) crypto = window.msCrypto;\n        // Native crypto from global (NodeJS)\n        if (!crypto && typeof $parcel$global !== \"undefined\" && $parcel$global.crypto) crypto = $parcel$global.crypto;\n        // Native crypto import via require (NodeJS)\n        if (!crypto && true) try {\n            crypto = (parcelRequire(\"aD42l\"));\n        } catch (err) {}\n        /*\n\t     * Cryptographically secure pseudorandom number generator\n\t     *\n\t     * As Math.random() is cryptographically not safe to use\n\t     */ var cryptoSecureRandomInt = function() {\n            if (crypto) {\n                // Use getRandomValues method (Browser)\n                if (typeof crypto.getRandomValues === \"function\") try {\n                    return crypto.getRandomValues(new Uint32Array(1))[0];\n                } catch (err) {}\n                // Use randomBytes method (NodeJS)\n                if (typeof crypto.randomBytes === \"function\") try {\n                    return crypto.randomBytes(4).readInt32LE();\n                } catch (err) {}\n            }\n            throw new Error(\"Native crypto module could not be used to get secure random number.\");\n        };\n        /*\n\t     * Local polyfill of Object.create\n\n\t     */ var create = Object.create || function() {\n            function F() {}\n            return function(obj) {\n                var subtype;\n                F.prototype = obj;\n                subtype = new F();\n                F.prototype = null;\n                return subtype;\n            };\n        }();\n        /**\n\t     * CryptoJS namespace.\n\t     */ var C = {};\n        /**\n\t     * Library namespace.\n\t     */ var C_lib = C.lib = {};\n        /**\n\t     * Base object for prototypal inheritance.\n\t     */ var Base = C_lib.Base = function() {\n            return {\n                /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */ extend: function(overrides) {\n                    // Spawn\n                    var subtype = create(this);\n                    // Augment\n                    if (overrides) subtype.mixIn(overrides);\n                    // Create default initializer\n                    if (!subtype.hasOwnProperty(\"init\") || this.init === subtype.init) subtype.init = function() {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                    // Initializer's prototype is the subtype object\n                    subtype.init.prototype = subtype;\n                    // Reference supertype\n                    subtype.$super = this;\n                    return subtype;\n                },\n                /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */ create: function() {\n                    var instance = this.extend();\n                    instance.init.apply(instance, arguments);\n                    return instance;\n                },\n                /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */ init: function() {},\n                /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */ mixIn: function(properties) {\n                    for(var propertyName in properties)if (properties.hasOwnProperty(propertyName)) this[propertyName] = properties[propertyName];\n                    // IE won't copy toString using the loop above\n                    if (properties.hasOwnProperty(\"toString\")) this.toString = properties.toString;\n                },\n                /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */ clone: function() {\n                    return this.init.prototype.extend(this);\n                }\n            };\n        }();\n        /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */ var WordArray = C_lib.WordArray = Base.extend({\n            /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */ init: function(words, sigBytes) {\n                words = this.words = words || [];\n                if (sigBytes != undefined) this.sigBytes = sigBytes;\n                else this.sigBytes = words.length * 4;\n            },\n            /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */ toString: function(encoder) {\n                return (encoder || Hex).stringify(this);\n            },\n            /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */ concat: function(wordArray) {\n                // Shortcuts\n                var thisWords = this.words;\n                var thatWords = wordArray.words;\n                var thisSigBytes = this.sigBytes;\n                var thatSigBytes = wordArray.sigBytes;\n                // Clamp excess bits\n                this.clamp();\n                // Concat\n                if (thisSigBytes % 4) // Copy one byte at a time\n                for(var i = 0; i < thatSigBytes; i++){\n                    var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n                    thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n                }\n                else // Copy one word at a time\n                for(var j = 0; j < thatSigBytes; j += 4)thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];\n                this.sigBytes += thatSigBytes;\n                // Chainable\n                return this;\n            },\n            /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */ clamp: function() {\n                // Shortcuts\n                var words = this.words;\n                var sigBytes = this.sigBytes;\n                // Clamp\n                words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n                words.length = Math1.ceil(sigBytes / 4);\n            },\n            /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */ clone: function() {\n                var clone = Base.clone.call(this);\n                clone.words = this.words.slice(0);\n                return clone;\n            },\n            /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */ random: function(nBytes) {\n                var words = [];\n                for(var i = 0; i < nBytes; i += 4)words.push(cryptoSecureRandomInt());\n                return new WordArray.init(words, nBytes);\n            }\n        });\n        /**\n\t     * Encoder namespace.\n\t     */ var C_enc = C.enc = {};\n        /**\n\t     * Hex encoding strategy.\n\t     */ var Hex = C_enc.Hex = {\n            /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */ stringify: function(wordArray) {\n                // Shortcuts\n                var words = wordArray.words;\n                var sigBytes = wordArray.sigBytes;\n                // Convert\n                var hexChars = [];\n                for(var i = 0; i < sigBytes; i++){\n                    var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n                    hexChars.push((bite >>> 4).toString(16));\n                    hexChars.push((bite & 0x0f).toString(16));\n                }\n                return hexChars.join(\"\");\n            },\n            /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */ parse: function(hexStr) {\n                // Shortcut\n                var hexStrLength = hexStr.length;\n                // Convert\n                var words = [];\n                for(var i = 0; i < hexStrLength; i += 2)words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n                return new WordArray.init(words, hexStrLength / 2);\n            }\n        };\n        /**\n\t     * Latin1 encoding strategy.\n\t     */ var Latin1 = C_enc.Latin1 = {\n            /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */ stringify: function(wordArray) {\n                // Shortcuts\n                var words = wordArray.words;\n                var sigBytes = wordArray.sigBytes;\n                // Convert\n                var latin1Chars = [];\n                for(var i = 0; i < sigBytes; i++){\n                    var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n                    latin1Chars.push(String.fromCharCode(bite));\n                }\n                return latin1Chars.join(\"\");\n            },\n            /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */ parse: function(latin1Str) {\n                // Shortcut\n                var latin1StrLength = latin1Str.length;\n                // Convert\n                var words = [];\n                for(var i = 0; i < latin1StrLength; i++)words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n                return new WordArray.init(words, latin1StrLength);\n            }\n        };\n        /**\n\t     * UTF-8 encoding strategy.\n\t     */ var Utf8 = C_enc.Utf8 = {\n            /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */ stringify: function(wordArray) {\n                try {\n                    return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n                } catch (e) {\n                    throw new Error(\"Malformed UTF-8 data\");\n                }\n            },\n            /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */ parse: function(utf8Str) {\n                return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n            }\n        };\n        /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */ var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n            /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */ reset: function() {\n                // Initial values\n                this._data = new WordArray.init();\n                this._nDataBytes = 0;\n            },\n            /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */ _append: function(data) {\n                // Convert string to WordArray, else assume WordArray already\n                if (typeof data == \"string\") data = Utf8.parse(data);\n                // Append\n                this._data.concat(data);\n                this._nDataBytes += data.sigBytes;\n            },\n            /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */ _process: function(doFlush) {\n                var processedWords;\n                // Shortcuts\n                var data = this._data;\n                var dataWords = data.words;\n                var dataSigBytes = data.sigBytes;\n                var blockSize = this.blockSize;\n                var blockSizeBytes = blockSize * 4;\n                // Count blocks ready\n                var nBlocksReady = dataSigBytes / blockSizeBytes;\n                if (doFlush) // Round up to include partial blocks\n                nBlocksReady = Math1.ceil(nBlocksReady);\n                else // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math1.max((nBlocksReady | 0) - this._minBufferSize, 0);\n                // Count words ready\n                var nWordsReady = nBlocksReady * blockSize;\n                // Count bytes ready\n                var nBytesReady = Math1.min(nWordsReady * 4, dataSigBytes);\n                // Process blocks\n                if (nWordsReady) {\n                    for(var offset = 0; offset < nWordsReady; offset += blockSize)// Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                    // Remove processed words\n                    processedWords = dataWords.splice(0, nWordsReady);\n                    data.sigBytes -= nBytesReady;\n                }\n                // Return processed words\n                return new WordArray.init(processedWords, nBytesReady);\n            },\n            /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */ clone: function() {\n                var clone = Base.clone.call(this);\n                clone._data = this._data.clone();\n                return clone;\n            },\n            _minBufferSize: 0\n        });\n        /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */ var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n            /**\n\t         * Configuration options.\n\t         */ cfg: Base.extend(),\n            /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */ init: function(cfg) {\n                // Apply config defaults\n                this.cfg = this.cfg.extend(cfg);\n                // Set initial values\n                this.reset();\n            },\n            /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */ reset: function() {\n                // Reset data buffer\n                BufferedBlockAlgorithm.reset.call(this);\n                // Perform concrete-hasher logic\n                this._doReset();\n            },\n            /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */ update: function(messageUpdate) {\n                // Append\n                this._append(messageUpdate);\n                // Update the hash\n                this._process();\n                // Chainable\n                return this;\n            },\n            /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */ finalize: function(messageUpdate) {\n                // Final message update\n                if (messageUpdate) this._append(messageUpdate);\n                // Perform concrete-hasher logic\n                var hash = this._doFinalize();\n                return hash;\n            },\n            blockSize: 16,\n            /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */ _createHelper: function(hasher) {\n                return function(message, cfg) {\n                    return new hasher.init(cfg).finalize(message);\n                };\n            },\n            /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */ _createHmacHelper: function(hasher) {\n                return function(message, key) {\n                    return new C_algo.HMAC.init(hasher, key).finalize(message);\n                };\n            }\n        });\n        /**\n\t     * Algorithm namespace.\n\t     */ var C_algo = C.algo = {};\n        return C;\n    }(Math);\n    return CryptoJS;\n});\n\n});\nparcelRegister(\"aD42l\", function(module, exports) {\n\"use strict\";\n\n});\n\n\nparcelRegister(\"gQwaw\", function(module, exports) {\n\n(function(root, factory) {\n    // CommonJS\n    module.exports = exports = factory((parcelRequire(\"g5VXk\")));\n})(this, function(CryptoJS) {\n    (function() {\n        // Shortcuts\n        var C = CryptoJS;\n        var C_lib = C.lib;\n        var WordArray = C_lib.WordArray;\n        var C_enc = C.enc;\n        /**\n\t     * Base64 encoding strategy.\n\t     */ var Base64 = C_enc.Base64 = {\n            /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */ stringify: function(wordArray) {\n                // Shortcuts\n                var words = wordArray.words;\n                var sigBytes = wordArray.sigBytes;\n                var map = this._map;\n                // Clamp excess bits\n                wordArray.clamp();\n                // Convert\n                var base64Chars = [];\n                for(var i = 0; i < sigBytes; i += 3){\n                    var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n                    var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n                    var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n                    var triplet = byte1 << 16 | byte2 << 8 | byte3;\n                    for(var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++)base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n                }\n                // Add padding\n                var paddingChar = map.charAt(64);\n                if (paddingChar) while(base64Chars.length % 4)base64Chars.push(paddingChar);\n                return base64Chars.join(\"\");\n            },\n            /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */ parse: function(base64Str) {\n                // Shortcuts\n                var base64StrLength = base64Str.length;\n                var map = this._map;\n                var reverseMap = this._reverseMap;\n                if (!reverseMap) {\n                    reverseMap = this._reverseMap = [];\n                    for(var j = 0; j < map.length; j++)reverseMap[map.charCodeAt(j)] = j;\n                }\n                // Ignore padding\n                var paddingChar = map.charAt(64);\n                if (paddingChar) {\n                    var paddingIndex = base64Str.indexOf(paddingChar);\n                    if (paddingIndex !== -1) base64StrLength = paddingIndex;\n                }\n                // Convert\n                return parseLoop(base64Str, base64StrLength, reverseMap);\n            },\n            _map: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\n        };\n        function parseLoop(base64Str, base64StrLength, reverseMap) {\n            var words = [];\n            var nBytes = 0;\n            for(var i = 0; i < base64StrLength; i++)if (i % 4) {\n                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n                var bitsCombined = bits1 | bits2;\n                words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n                nBytes++;\n            }\n            return WordArray.create(words, nBytes);\n        }\n    })();\n    return CryptoJS.enc.Base64;\n});\n\n});\n\nparcelRegister(\"4L4J5\", function(module, exports) {\n\n(function(root, factory) {\n    // CommonJS\n    module.exports = exports = factory((parcelRequire(\"g5VXk\")));\n})(this, function(CryptoJS) {\n    (function(Math1) {\n        // Shortcuts\n        var C = CryptoJS;\n        var C_lib = C.lib;\n        var WordArray = C_lib.WordArray;\n        var Hasher = C_lib.Hasher;\n        var C_algo = C.algo;\n        // Constants table\n        var T = [];\n        // Compute constants\n        (function() {\n            for(var i = 0; i < 64; i++)T[i] = Math1.abs(Math1.sin(i + 1)) * 0x100000000 | 0;\n        })();\n        /**\n\t     * MD5 hash algorithm.\n\t     */ var MD5 = C_algo.MD5 = Hasher.extend({\n            _doReset: function() {\n                this._hash = new WordArray.init([\n                    0x67452301,\n                    0xefcdab89,\n                    0x98badcfe,\n                    0x10325476\n                ]);\n            },\n            _doProcessBlock: function(M, offset) {\n                // Swap endian\n                for(var i = 0; i < 16; i++){\n                    // Shortcuts\n                    var offset_i = offset + i;\n                    var M_offset_i = M[offset_i];\n                    M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n                }\n                // Shortcuts\n                var H = this._hash.words;\n                var M_offset_0 = M[offset + 0];\n                var M_offset_1 = M[offset + 1];\n                var M_offset_2 = M[offset + 2];\n                var M_offset_3 = M[offset + 3];\n                var M_offset_4 = M[offset + 4];\n                var M_offset_5 = M[offset + 5];\n                var M_offset_6 = M[offset + 6];\n                var M_offset_7 = M[offset + 7];\n                var M_offset_8 = M[offset + 8];\n                var M_offset_9 = M[offset + 9];\n                var M_offset_10 = M[offset + 10];\n                var M_offset_11 = M[offset + 11];\n                var M_offset_12 = M[offset + 12];\n                var M_offset_13 = M[offset + 13];\n                var M_offset_14 = M[offset + 14];\n                var M_offset_15 = M[offset + 15];\n                // Working variables\n                var a = H[0];\n                var b = H[1];\n                var c = H[2];\n                var d = H[3];\n                // Computation\n                a = FF(a, b, c, d, M_offset_0, 7, T[0]);\n                d = FF(d, a, b, c, M_offset_1, 12, T[1]);\n                c = FF(c, d, a, b, M_offset_2, 17, T[2]);\n                b = FF(b, c, d, a, M_offset_3, 22, T[3]);\n                a = FF(a, b, c, d, M_offset_4, 7, T[4]);\n                d = FF(d, a, b, c, M_offset_5, 12, T[5]);\n                c = FF(c, d, a, b, M_offset_6, 17, T[6]);\n                b = FF(b, c, d, a, M_offset_7, 22, T[7]);\n                a = FF(a, b, c, d, M_offset_8, 7, T[8]);\n                d = FF(d, a, b, c, M_offset_9, 12, T[9]);\n                c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n                b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n                a = FF(a, b, c, d, M_offset_12, 7, T[12]);\n                d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n                c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n                b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n                a = GG(a, b, c, d, M_offset_1, 5, T[16]);\n                d = GG(d, a, b, c, M_offset_6, 9, T[17]);\n                c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n                b = GG(b, c, d, a, M_offset_0, 20, T[19]);\n                a = GG(a, b, c, d, M_offset_5, 5, T[20]);\n                d = GG(d, a, b, c, M_offset_10, 9, T[21]);\n                c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n                b = GG(b, c, d, a, M_offset_4, 20, T[23]);\n                a = GG(a, b, c, d, M_offset_9, 5, T[24]);\n                d = GG(d, a, b, c, M_offset_14, 9, T[25]);\n                c = GG(c, d, a, b, M_offset_3, 14, T[26]);\n                b = GG(b, c, d, a, M_offset_8, 20, T[27]);\n                a = GG(a, b, c, d, M_offset_13, 5, T[28]);\n                d = GG(d, a, b, c, M_offset_2, 9, T[29]);\n                c = GG(c, d, a, b, M_offset_7, 14, T[30]);\n                b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n                a = HH(a, b, c, d, M_offset_5, 4, T[32]);\n                d = HH(d, a, b, c, M_offset_8, 11, T[33]);\n                c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n                b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n                a = HH(a, b, c, d, M_offset_1, 4, T[36]);\n                d = HH(d, a, b, c, M_offset_4, 11, T[37]);\n                c = HH(c, d, a, b, M_offset_7, 16, T[38]);\n                b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n                a = HH(a, b, c, d, M_offset_13, 4, T[40]);\n                d = HH(d, a, b, c, M_offset_0, 11, T[41]);\n                c = HH(c, d, a, b, M_offset_3, 16, T[42]);\n                b = HH(b, c, d, a, M_offset_6, 23, T[43]);\n                a = HH(a, b, c, d, M_offset_9, 4, T[44]);\n                d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n                c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n                b = HH(b, c, d, a, M_offset_2, 23, T[47]);\n                a = II(a, b, c, d, M_offset_0, 6, T[48]);\n                d = II(d, a, b, c, M_offset_7, 10, T[49]);\n                c = II(c, d, a, b, M_offset_14, 15, T[50]);\n                b = II(b, c, d, a, M_offset_5, 21, T[51]);\n                a = II(a, b, c, d, M_offset_12, 6, T[52]);\n                d = II(d, a, b, c, M_offset_3, 10, T[53]);\n                c = II(c, d, a, b, M_offset_10, 15, T[54]);\n                b = II(b, c, d, a, M_offset_1, 21, T[55]);\n                a = II(a, b, c, d, M_offset_8, 6, T[56]);\n                d = II(d, a, b, c, M_offset_15, 10, T[57]);\n                c = II(c, d, a, b, M_offset_6, 15, T[58]);\n                b = II(b, c, d, a, M_offset_13, 21, T[59]);\n                a = II(a, b, c, d, M_offset_4, 6, T[60]);\n                d = II(d, a, b, c, M_offset_11, 10, T[61]);\n                c = II(c, d, a, b, M_offset_2, 15, T[62]);\n                b = II(b, c, d, a, M_offset_9, 21, T[63]);\n                // Intermediate hash value\n                H[0] = H[0] + a | 0;\n                H[1] = H[1] + b | 0;\n                H[2] = H[2] + c | 0;\n                H[3] = H[3] + d | 0;\n            },\n            _doFinalize: function() {\n                // Shortcuts\n                var data = this._data;\n                var dataWords = data.words;\n                var nBitsTotal = this._nDataBytes * 8;\n                var nBitsLeft = data.sigBytes * 8;\n                // Add padding\n                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n                var nBitsTotalH = Math1.floor(nBitsTotal / 0x100000000);\n                var nBitsTotalL = nBitsTotal;\n                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;\n                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;\n                data.sigBytes = (dataWords.length + 1) * 4;\n                // Hash final blocks\n                this._process();\n                // Shortcuts\n                var hash = this._hash;\n                var H = hash.words;\n                // Swap endian\n                for(var i = 0; i < 4; i++){\n                    // Shortcut\n                    var H_i = H[i];\n                    H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n                }\n                // Return final computed hash\n                return hash;\n            },\n            clone: function() {\n                var clone = Hasher.clone.call(this);\n                clone._hash = this._hash.clone();\n                return clone;\n            }\n        });\n        function FF(a, b, c, d, x, s, t) {\n            var n = a + (b & c | ~b & d) + x + t;\n            return (n << s | n >>> 32 - s) + b;\n        }\n        function GG(a, b, c, d, x, s, t) {\n            var n = a + (b & d | c & ~d) + x + t;\n            return (n << s | n >>> 32 - s) + b;\n        }\n        function HH(a, b, c, d, x, s, t) {\n            var n = a + (b ^ c ^ d) + x + t;\n            return (n << s | n >>> 32 - s) + b;\n        }\n        function II(a, b, c, d, x, s, t) {\n            var n = a + (c ^ (b | ~d)) + x + t;\n            return (n << s | n >>> 32 - s) + b;\n        }\n        /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */ C.MD5 = Hasher._createHelper(MD5);\n        /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */ C.HmacMD5 = Hasher._createHmacHelper(MD5);\n    })(Math);\n    return CryptoJS.MD5;\n});\n\n});\n\nparcelRegister(\"6MaQY\", function(module, exports) {\n\n\n\n(function(root, factory, undef) {\n    // CommonJS\n    module.exports = exports = factory((parcelRequire(\"g5VXk\")), (parcelRequire(\"9Ikky\")), (parcelRequire(\"8Ottl\")));\n})(this, function(CryptoJS) {\n    (function() {\n        // Shortcuts\n        var C = CryptoJS;\n        var C_lib = C.lib;\n        var Base = C_lib.Base;\n        var WordArray = C_lib.WordArray;\n        var C_algo = C.algo;\n        var MD5 = C_algo.MD5;\n        /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */ var EvpKDF = C_algo.EvpKDF = Base.extend({\n            /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */ cfg: Base.extend({\n                keySize: 4,\n                hasher: MD5,\n                iterations: 1\n            }),\n            /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */ init: function(cfg) {\n                this.cfg = this.cfg.extend(cfg);\n            },\n            /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */ compute: function(password, salt) {\n                var block;\n                // Shortcut\n                var cfg = this.cfg;\n                // Init hasher\n                var hasher = cfg.hasher.create();\n                // Initial values\n                var derivedKey = WordArray.create();\n                // Shortcuts\n                var derivedKeyWords = derivedKey.words;\n                var keySize = cfg.keySize;\n                var iterations = cfg.iterations;\n                // Generate key\n                while(derivedKeyWords.length < keySize){\n                    if (block) hasher.update(block);\n                    block = hasher.update(password).finalize(salt);\n                    hasher.reset();\n                    // Iterations\n                    for(var i = 1; i < iterations; i++){\n                        block = hasher.finalize(block);\n                        hasher.reset();\n                    }\n                    derivedKey.concat(block);\n                }\n                derivedKey.sigBytes = keySize * 4;\n                return derivedKey;\n            }\n        });\n        /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */ C.EvpKDF = function(password, salt, cfg) {\n            return EvpKDF.create(cfg).compute(password, salt);\n        };\n    })();\n    return CryptoJS.EvpKDF;\n});\n\n});\nparcelRegister(\"9Ikky\", function(module, exports) {\n\n(function(root, factory) {\n    // CommonJS\n    module.exports = exports = factory((parcelRequire(\"g5VXk\")));\n})(this, function(CryptoJS) {\n    (function() {\n        // Shortcuts\n        var C = CryptoJS;\n        var C_lib = C.lib;\n        var WordArray = C_lib.WordArray;\n        var Hasher = C_lib.Hasher;\n        var C_algo = C.algo;\n        // Reusable object\n        var W = [];\n        /**\n\t     * SHA-1 hash algorithm.\n\t     */ var SHA1 = C_algo.SHA1 = Hasher.extend({\n            _doReset: function() {\n                this._hash = new WordArray.init([\n                    0x67452301,\n                    0xefcdab89,\n                    0x98badcfe,\n                    0x10325476,\n                    0xc3d2e1f0\n                ]);\n            },\n            _doProcessBlock: function(M, offset) {\n                // Shortcut\n                var H = this._hash.words;\n                // Working variables\n                var a = H[0];\n                var b = H[1];\n                var c = H[2];\n                var d = H[3];\n                var e = H[4];\n                // Computation\n                for(var i = 0; i < 80; i++){\n                    if (i < 16) W[i] = M[offset + i] | 0;\n                    else {\n                        var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n                        W[i] = n << 1 | n >>> 31;\n                    }\n                    var t = (a << 5 | a >>> 27) + e + W[i];\n                    if (i < 20) t += (b & c | ~b & d) + 0x5a827999;\n                    else if (i < 40) t += (b ^ c ^ d) + 0x6ed9eba1;\n                    else if (i < 60) t += (b & c | b & d | c & d) - 0x70e44324;\n                    else t += (b ^ c ^ d) - 0x359d3e2a;\n                    e = d;\n                    d = c;\n                    c = b << 30 | b >>> 2;\n                    b = a;\n                    a = t;\n                }\n                // Intermediate hash value\n                H[0] = H[0] + a | 0;\n                H[1] = H[1] + b | 0;\n                H[2] = H[2] + c | 0;\n                H[3] = H[3] + d | 0;\n                H[4] = H[4] + e | 0;\n            },\n            _doFinalize: function() {\n                // Shortcuts\n                var data = this._data;\n                var dataWords = data.words;\n                var nBitsTotal = this._nDataBytes * 8;\n                var nBitsLeft = data.sigBytes * 8;\n                // Add padding\n                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n                data.sigBytes = dataWords.length * 4;\n                // Hash final blocks\n                this._process();\n                // Return final computed hash\n                return this._hash;\n            },\n            clone: function() {\n                var clone = Hasher.clone.call(this);\n                clone._hash = this._hash.clone();\n                return clone;\n            }\n        });\n        /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */ C.SHA1 = Hasher._createHelper(SHA1);\n        /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */ C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n    })();\n    return CryptoJS.SHA1;\n});\n\n});\n\nparcelRegister(\"8Ottl\", function(module, exports) {\n\n(function(root, factory) {\n    // CommonJS\n    module.exports = exports = factory((parcelRequire(\"g5VXk\")));\n})(this, function(CryptoJS) {\n    (function() {\n        // Shortcuts\n        var C = CryptoJS;\n        var C_lib = C.lib;\n        var Base = C_lib.Base;\n        var C_enc = C.enc;\n        var Utf8 = C_enc.Utf8;\n        var C_algo = C.algo;\n        /**\n\t     * HMAC algorithm.\n\t     */ var HMAC = C_algo.HMAC = Base.extend({\n            /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */ init: function(hasher, key) {\n                // Init hasher\n                hasher = this._hasher = new hasher.init();\n                // Convert string to WordArray, else assume WordArray already\n                if (typeof key == \"string\") key = Utf8.parse(key);\n                // Shortcuts\n                var hasherBlockSize = hasher.blockSize;\n                var hasherBlockSizeBytes = hasherBlockSize * 4;\n                // Allow arbitrary length keys\n                if (key.sigBytes > hasherBlockSizeBytes) key = hasher.finalize(key);\n                // Clamp excess bits\n                key.clamp();\n                // Clone key for inner and outer pads\n                var oKey = this._oKey = key.clone();\n                var iKey = this._iKey = key.clone();\n                // Shortcuts\n                var oKeyWords = oKey.words;\n                var iKeyWords = iKey.words;\n                // XOR keys with pad constants\n                for(var i = 0; i < hasherBlockSize; i++){\n                    oKeyWords[i] ^= 0x5c5c5c5c;\n                    iKeyWords[i] ^= 0x36363636;\n                }\n                oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n                // Set initial values\n                this.reset();\n            },\n            /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */ reset: function() {\n                // Shortcut\n                var hasher = this._hasher;\n                // Reset\n                hasher.reset();\n                hasher.update(this._iKey);\n            },\n            /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */ update: function(messageUpdate) {\n                this._hasher.update(messageUpdate);\n                // Chainable\n                return this;\n            },\n            /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */ finalize: function(messageUpdate) {\n                // Shortcut\n                var hasher = this._hasher;\n                // Compute HMAC\n                var innerHash = hasher.finalize(messageUpdate);\n                hasher.reset();\n                var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n                return hmac;\n            }\n        });\n    })();\n});\n\n});\n\n\nparcelRegister(\"l3r0T\", function(module, exports) {\n\n\n(function(root, factory, undef) {\n    // CommonJS\n    module.exports = exports = factory((parcelRequire(\"g5VXk\")), (parcelRequire(\"6MaQY\")));\n})(this, function(CryptoJS) {\n    /**\n\t * Cipher core components.\n\t */ CryptoJS.lib.Cipher || function(undefined) {\n        // Shortcuts\n        var C = CryptoJS;\n        var C_lib = C.lib;\n        var Base = C_lib.Base;\n        var WordArray = C_lib.WordArray;\n        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n        var C_enc = C.enc;\n        var Utf8 = C_enc.Utf8;\n        var Base64 = C_enc.Base64;\n        var C_algo = C.algo;\n        var EvpKDF = C_algo.EvpKDF;\n        /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */ var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n            /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */ cfg: Base.extend(),\n            /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */ createEncryptor: function(key, cfg) {\n                return this.create(this._ENC_XFORM_MODE, key, cfg);\n            },\n            /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */ createDecryptor: function(key, cfg) {\n                return this.create(this._DEC_XFORM_MODE, key, cfg);\n            },\n            /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */ init: function(xformMode, key, cfg) {\n                // Apply config defaults\n                this.cfg = this.cfg.extend(cfg);\n                // Store transform mode and key\n                this._xformMode = xformMode;\n                this._key = key;\n                // Set initial values\n                this.reset();\n            },\n            /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */ reset: function() {\n                // Reset data buffer\n                BufferedBlockAlgorithm.reset.call(this);\n                // Perform concrete-cipher logic\n                this._doReset();\n            },\n            /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */ process: function(dataUpdate) {\n                // Append\n                this._append(dataUpdate);\n                // Process available blocks\n                return this._process();\n            },\n            /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */ finalize: function(dataUpdate) {\n                // Final data update\n                if (dataUpdate) this._append(dataUpdate);\n                // Perform concrete-cipher logic\n                var finalProcessedData = this._doFinalize();\n                return finalProcessedData;\n            },\n            keySize: 4,\n            ivSize: 4,\n            _ENC_XFORM_MODE: 1,\n            _DEC_XFORM_MODE: 2,\n            /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */ _createHelper: function() {\n                function selectCipherStrategy(key) {\n                    if (typeof key == \"string\") return PasswordBasedCipher;\n                    else return SerializableCipher;\n                }\n                return function(cipher) {\n                    return {\n                        encrypt: function(message, key, cfg) {\n                            return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n                        },\n                        decrypt: function(ciphertext, key, cfg) {\n                            return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n                        }\n                    };\n                };\n            }()\n        });\n        /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */ var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n            _doFinalize: function() {\n                // Process partial blocks\n                var finalProcessedBlocks = this._process(true);\n                return finalProcessedBlocks;\n            },\n            blockSize: 1\n        });\n        /**\n\t     * Mode namespace.\n\t     */ var C_mode = C.mode = {};\n        /**\n\t     * Abstract base block cipher mode template.\n\t     */ var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n            /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */ createEncryptor: function(cipher, iv) {\n                return this.Encryptor.create(cipher, iv);\n            },\n            /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */ createDecryptor: function(cipher, iv) {\n                return this.Decryptor.create(cipher, iv);\n            },\n            /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */ init: function(cipher, iv) {\n                this._cipher = cipher;\n                this._iv = iv;\n            }\n        });\n        /**\n\t     * Cipher Block Chaining mode.\n\t     */ var CBC = C_mode.CBC = function() {\n            /**\n\t         * Abstract base CBC mode.\n\t         */ var CBC = BlockCipherMode.extend();\n            /**\n\t         * CBC encryptor.\n\t         */ CBC.Encryptor = CBC.extend({\n                /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */ processBlock: function(words, offset) {\n                    // Shortcuts\n                    var cipher = this._cipher;\n                    var blockSize = cipher.blockSize;\n                    // XOR and encrypt\n                    xorBlock.call(this, words, offset, blockSize);\n                    cipher.encryptBlock(words, offset);\n                    // Remember this block to use with next block\n                    this._prevBlock = words.slice(offset, offset + blockSize);\n                }\n            });\n            /**\n\t         * CBC decryptor.\n\t         */ CBC.Decryptor = CBC.extend({\n                /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */ processBlock: function(words, offset) {\n                    // Shortcuts\n                    var cipher = this._cipher;\n                    var blockSize = cipher.blockSize;\n                    // Remember this block to use with next block\n                    var thisBlock = words.slice(offset, offset + blockSize);\n                    // Decrypt and XOR\n                    cipher.decryptBlock(words, offset);\n                    xorBlock.call(this, words, offset, blockSize);\n                    // This block becomes the previous block\n                    this._prevBlock = thisBlock;\n                }\n            });\n            function xorBlock(words, offset, blockSize) {\n                var block;\n                // Shortcut\n                var iv = this._iv;\n                // Choose mixing block\n                if (iv) {\n                    block = iv;\n                    // Remove IV for subsequent blocks\n                    this._iv = undefined;\n                } else block = this._prevBlock;\n                // XOR blocks\n                for(var i = 0; i < blockSize; i++)words[offset + i] ^= block[i];\n            }\n            return CBC;\n        }();\n        /**\n\t     * Padding namespace.\n\t     */ var C_pad = C.pad = {};\n        /**\n\t     * PKCS #5/7 padding strategy.\n\t     */ var Pkcs7 = C_pad.Pkcs7 = {\n            /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */ pad: function(data, blockSize) {\n                // Shortcut\n                var blockSizeBytes = blockSize * 4;\n                // Count padding bytes\n                var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n                // Create padding word\n                var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;\n                // Create padding\n                var paddingWords = [];\n                for(var i = 0; i < nPaddingBytes; i += 4)paddingWords.push(paddingWord);\n                var padding = WordArray.create(paddingWords, nPaddingBytes);\n                // Add padding\n                data.concat(padding);\n            },\n            /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */ unpad: function(data) {\n                // Get number of padding bytes from last byte\n                var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n                // Remove padding\n                data.sigBytes -= nPaddingBytes;\n            }\n        };\n        /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */ var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n            /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */ cfg: Cipher.cfg.extend({\n                mode: CBC,\n                padding: Pkcs7\n            }),\n            reset: function() {\n                var modeCreator;\n                // Reset cipher\n                Cipher.reset.call(this);\n                // Shortcuts\n                var cfg = this.cfg;\n                var iv = cfg.iv;\n                var mode = cfg.mode;\n                // Reset block mode\n                if (this._xformMode == this._ENC_XFORM_MODE) modeCreator = mode.createEncryptor;\n                else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n                    modeCreator = mode.createDecryptor;\n                    // Keep at least one block in the buffer for unpadding\n                    this._minBufferSize = 1;\n                }\n                if (this._mode && this._mode.__creator == modeCreator) this._mode.init(this, iv && iv.words);\n                else {\n                    this._mode = modeCreator.call(mode, this, iv && iv.words);\n                    this._mode.__creator = modeCreator;\n                }\n            },\n            _doProcessBlock: function(words, offset) {\n                this._mode.processBlock(words, offset);\n            },\n            _doFinalize: function() {\n                var finalProcessedBlocks;\n                // Shortcut\n                var padding = this.cfg.padding;\n                // Finalize\n                if (this._xformMode == this._ENC_XFORM_MODE) {\n                    // Pad data\n                    padding.pad(this._data, this.blockSize);\n                    // Process final blocks\n                    finalProcessedBlocks = this._process(true);\n                } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n                    // Process final blocks\n                    finalProcessedBlocks = this._process(true);\n                    // Unpad data\n                    padding.unpad(finalProcessedBlocks);\n                }\n                return finalProcessedBlocks;\n            },\n            blockSize: 4\n        });\n        /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */ var CipherParams = C_lib.CipherParams = Base.extend({\n            /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */ init: function(cipherParams) {\n                this.mixIn(cipherParams);\n            },\n            /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */ toString: function(formatter) {\n                return (formatter || this.formatter).stringify(this);\n            }\n        });\n        /**\n\t     * Format namespace.\n\t     */ var C_format = C.format = {};\n        /**\n\t     * OpenSSL formatting strategy.\n\t     */ var OpenSSLFormatter = C_format.OpenSSL = {\n            /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */ stringify: function(cipherParams) {\n                var wordArray;\n                // Shortcuts\n                var ciphertext = cipherParams.ciphertext;\n                var salt = cipherParams.salt;\n                // Format\n                if (salt) wordArray = WordArray.create([\n                    0x53616c74,\n                    0x65645f5f\n                ]).concat(salt).concat(ciphertext);\n                else wordArray = ciphertext;\n                return wordArray.toString(Base64);\n            },\n            /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */ parse: function(openSSLStr) {\n                var salt;\n                // Parse base64\n                var ciphertext = Base64.parse(openSSLStr);\n                // Shortcut\n                var ciphertextWords = ciphertext.words;\n                // Test for salt\n                if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n                    // Extract salt\n                    salt = WordArray.create(ciphertextWords.slice(2, 4));\n                    // Remove salt from ciphertext\n                    ciphertextWords.splice(0, 4);\n                    ciphertext.sigBytes -= 16;\n                }\n                return CipherParams.create({\n                    ciphertext: ciphertext,\n                    salt: salt\n                });\n            }\n        };\n        /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */ var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n            /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */ cfg: Base.extend({\n                format: OpenSSLFormatter\n            }),\n            /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */ encrypt: function(cipher, message, key, cfg) {\n                // Apply config defaults\n                cfg = this.cfg.extend(cfg);\n                // Encrypt\n                var encryptor = cipher.createEncryptor(key, cfg);\n                var ciphertext = encryptor.finalize(message);\n                // Shortcut\n                var cipherCfg = encryptor.cfg;\n                // Create and return serializable cipher params\n                return CipherParams.create({\n                    ciphertext: ciphertext,\n                    key: key,\n                    iv: cipherCfg.iv,\n                    algorithm: cipher,\n                    mode: cipherCfg.mode,\n                    padding: cipherCfg.padding,\n                    blockSize: cipher.blockSize,\n                    formatter: cfg.format\n                });\n            },\n            /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */ decrypt: function(cipher, ciphertext, key, cfg) {\n                // Apply config defaults\n                cfg = this.cfg.extend(cfg);\n                // Convert string to CipherParams\n                ciphertext = this._parse(ciphertext, cfg.format);\n                // Decrypt\n                var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n                return plaintext;\n            },\n            /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */ _parse: function(ciphertext, format) {\n                if (typeof ciphertext == \"string\") return format.parse(ciphertext, this);\n                else return ciphertext;\n            }\n        });\n        /**\n\t     * Key derivation function namespace.\n\t     */ var C_kdf = C.kdf = {};\n        /**\n\t     * OpenSSL key derivation function.\n\t     */ var OpenSSLKdf = C_kdf.OpenSSL = {\n            /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */ execute: function(password, keySize, ivSize, salt, hasher) {\n                // Generate random salt\n                if (!salt) salt = WordArray.random(8);\n                // Derive key and IV\n                if (!hasher) var key = EvpKDF.create({\n                    keySize: keySize + ivSize\n                }).compute(password, salt);\n                else var key = EvpKDF.create({\n                    keySize: keySize + ivSize,\n                    hasher: hasher\n                }).compute(password, salt);\n                // Separate key and IV\n                var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n                key.sigBytes = keySize * 4;\n                // Return params\n                return CipherParams.create({\n                    key: key,\n                    iv: iv,\n                    salt: salt\n                });\n            }\n        };\n        /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */ var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n            /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */ cfg: SerializableCipher.cfg.extend({\n                kdf: OpenSSLKdf\n            }),\n            /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */ encrypt: function(cipher, message, password, cfg) {\n                // Apply config defaults\n                cfg = this.cfg.extend(cfg);\n                // Derive key and other params\n                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);\n                // Add IV to config\n                cfg.iv = derivedParams.iv;\n                // Encrypt\n                var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n                // Mix in derived params\n                ciphertext.mixIn(derivedParams);\n                return ciphertext;\n            },\n            /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */ decrypt: function(cipher, ciphertext, password, cfg) {\n                // Apply config defaults\n                cfg = this.cfg.extend(cfg);\n                // Convert string to CipherParams\n                ciphertext = this._parse(ciphertext, cfg.format);\n                // Derive key and other params\n                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);\n                // Add IV to config\n                cfg.iv = derivedParams.iv;\n                // Decrypt\n                var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n                return plaintext;\n            }\n        });\n    }();\n});\n\n});\n\n\n// src/PenpalError.ts\nvar $af59c28592e8fc00$var$PenpalError = class extends Error {\n    code;\n    constructor(code, message){\n        super(message);\n        this.name = \"PenpalError\";\n        this.code = code;\n    }\n};\nvar $af59c28592e8fc00$export$1206dbfc713d1fe1 = $af59c28592e8fc00$var$PenpalError;\n// src/errorSerialization.ts\nvar $af59c28592e8fc00$var$serializeError = (error)=>({\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n        penpalCode: error instanceof $af59c28592e8fc00$export$1206dbfc713d1fe1 ? error.code : void 0\n    });\nvar $af59c28592e8fc00$var$deserializeError = ({ name: name, message: message, stack: stack, penpalCode: penpalCode })=>{\n    const deserializedError = penpalCode ? new $af59c28592e8fc00$export$1206dbfc713d1fe1(penpalCode, message) : new Error(message);\n    deserializedError.name = name;\n    deserializedError.stack = stack;\n    return deserializedError;\n};\n// src/Reply.ts\nvar $af59c28592e8fc00$var$brand = Symbol(\"Reply\");\nvar $af59c28592e8fc00$var$Reply = class {\n    value;\n    transferables;\n    // Allows TypeScript to distinguish between an actual instance of this\n    // class versus an object that looks structurally similar.\n    // eslint-disable-next-line no-unused-private-class-members\n    #brand = $af59c28592e8fc00$var$brand;\n    constructor(value, options){\n        this.value = value;\n        this.transferables = options?.transferables;\n    }\n};\nvar $af59c28592e8fc00$export$dd8155e5e36dda90 = $af59c28592e8fc00$var$Reply;\n// src/namespace.ts\nvar $af59c28592e8fc00$var$namespace_default = \"penpal\";\n// src/guards.ts\nvar $af59c28592e8fc00$var$isObject = (value)=>{\n    return typeof value === \"object\" && value !== null;\n};\nvar $af59c28592e8fc00$var$isFunction = (value)=>{\n    return typeof value === \"function\";\n};\nvar $af59c28592e8fc00$var$isMessage = (data)=>{\n    return $af59c28592e8fc00$var$isObject(data) && data.namespace === $af59c28592e8fc00$var$namespace_default;\n};\nvar $af59c28592e8fc00$var$isSynMessage = (message)=>{\n    return message.type === \"SYN\";\n};\nvar $af59c28592e8fc00$var$isAck1Message = (message)=>{\n    return message.type === \"ACK1\";\n};\nvar $af59c28592e8fc00$var$isAck2Message = (message)=>{\n    return message.type === \"ACK2\";\n};\nvar $af59c28592e8fc00$var$isCallMessage = (message)=>{\n    return message.type === \"CALL\";\n};\nvar $af59c28592e8fc00$var$isReplyMessage = (message)=>{\n    return message.type === \"REPLY\";\n};\nvar $af59c28592e8fc00$var$isDestroyMessage = (message)=>{\n    return message.type === \"DESTROY\";\n};\n// src/methodSerialization.ts\nvar $af59c28592e8fc00$var$extractMethodPathsFromMethods = (methods, currentPath = [])=>{\n    const methodPaths = [];\n    for (const key of Object.keys(methods)){\n        const value = methods[key];\n        if ($af59c28592e8fc00$var$isFunction(value)) methodPaths.push([\n            ...currentPath,\n            key\n        ]);\n        else if ($af59c28592e8fc00$var$isObject(value)) methodPaths.push(...$af59c28592e8fc00$var$extractMethodPathsFromMethods(value, [\n            ...currentPath,\n            key\n        ]));\n    }\n    return methodPaths;\n};\nvar $af59c28592e8fc00$var$getMethodAtMethodPath = (methodPath, methods)=>{\n    const result = methodPath.reduce((acc, pathSegment)=>{\n        return $af59c28592e8fc00$var$isObject(acc) ? acc[pathSegment] : void 0;\n    }, methods);\n    return $af59c28592e8fc00$var$isFunction(result) ? result : void 0;\n};\nvar $af59c28592e8fc00$var$formatMethodPath = (methodPath)=>{\n    return methodPath.join(\".\");\n};\n// src/connectCallHandler.ts\nvar $af59c28592e8fc00$var$createErrorReplyMessage = (channel, callId, error)=>({\n        namespace: $af59c28592e8fc00$var$namespace_default,\n        channel: channel,\n        type: \"REPLY\",\n        callId: callId,\n        isError: true,\n        ...error instanceof Error ? {\n            value: $af59c28592e8fc00$var$serializeError(error),\n            isSerializedErrorInstance: true\n        } : {\n            value: error\n        }\n    });\nvar $af59c28592e8fc00$var$connectCallHandler = (messenger, methods, channel, log)=>{\n    let isDestroyed = false;\n    const handleMessage = async (message)=>{\n        if (isDestroyed) return;\n        if (!$af59c28592e8fc00$var$isCallMessage(message)) return;\n        log?.(`Received ${$af59c28592e8fc00$var$formatMethodPath(message.methodPath)}() call`, message);\n        const { methodPath: methodPath, args: args, id: callId } = message;\n        let replyMessage;\n        let transferables;\n        try {\n            const method = $af59c28592e8fc00$var$getMethodAtMethodPath(methodPath, methods);\n            if (!method) throw new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"METHOD_NOT_FOUND\", `Method \\`${$af59c28592e8fc00$var$formatMethodPath(methodPath)}\\` is not found.`);\n            let value = await method(...args);\n            if (value instanceof $af59c28592e8fc00$export$dd8155e5e36dda90) {\n                transferables = value.transferables;\n                value = await value.value;\n            }\n            replyMessage = {\n                namespace: $af59c28592e8fc00$var$namespace_default,\n                channel: channel,\n                type: \"REPLY\",\n                callId: callId,\n                value: value\n            };\n        } catch (error) {\n            replyMessage = $af59c28592e8fc00$var$createErrorReplyMessage(channel, callId, error);\n        }\n        if (isDestroyed) return;\n        try {\n            log?.(`Sending ${$af59c28592e8fc00$var$formatMethodPath(methodPath)}() reply`, replyMessage);\n            messenger.sendMessage(replyMessage, transferables);\n        } catch (error) {\n            if (error.name === \"DataCloneError\") {\n                replyMessage = $af59c28592e8fc00$var$createErrorReplyMessage(channel, callId, error);\n                log?.(`Sending ${$af59c28592e8fc00$var$formatMethodPath(methodPath)}() reply`, replyMessage);\n                messenger.sendMessage(replyMessage);\n            }\n            throw error;\n        }\n    };\n    messenger.addMessageHandler(handleMessage);\n    return ()=>{\n        isDestroyed = true;\n        messenger.removeMessageHandler(handleMessage);\n    };\n};\nvar $af59c28592e8fc00$var$connectCallHandler_default = $af59c28592e8fc00$var$connectCallHandler;\n// src/generateId.ts\nvar $af59c28592e8fc00$var$generateId_default = crypto.randomUUID?.bind(crypto) ?? (()=>new Array(4).fill(0).map(()=>Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join(\"-\"));\n// src/CallOptions.ts\nvar $af59c28592e8fc00$var$brand2 = Symbol(\"CallOptions\");\nvar $af59c28592e8fc00$var$CallOptions = class {\n    transferables;\n    timeout;\n    // Allows TypeScript to distinguish between an actual instance of this\n    // class versus an object that looks structurally similar.\n    // eslint-disable-next-line no-unused-private-class-members\n    #brand = $af59c28592e8fc00$var$brand2;\n    constructor(options){\n        this.transferables = options?.transferables;\n        this.timeout = options?.timeout;\n    }\n};\nvar $af59c28592e8fc00$export$5f47c0d058b6446c = $af59c28592e8fc00$var$CallOptions;\n// src/connectRemoteProxy.ts\nvar $af59c28592e8fc00$var$methodsToTreatAsNative = /* @__PURE__ */ new Set([\n    \"apply\",\n    \"call\",\n    \"bind\"\n]);\nvar $af59c28592e8fc00$var$createRemoteProxy = (callback, log, path = [])=>{\n    return new Proxy(path.length ? ()=>{} : /* @__PURE__ */ Object.create(null), {\n        get (target, prop) {\n            if (prop === \"then\") return;\n            if (path.length && $af59c28592e8fc00$var$methodsToTreatAsNative.has(prop)) return Reflect.get(target, prop);\n            return $af59c28592e8fc00$var$createRemoteProxy(callback, log, [\n                ...path,\n                prop\n            ]);\n        },\n        apply (target, _thisArg, args) {\n            return callback(path, args);\n        }\n    });\n};\nvar $af59c28592e8fc00$var$getDestroyedConnectionMethodCallError = (methodPath)=>{\n    return new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"CONNECTION_DESTROYED\", `Method call ${$af59c28592e8fc00$var$formatMethodPath(methodPath)}() failed due to destroyed connection`);\n};\nvar $af59c28592e8fc00$var$connectRemoteProxy = (messenger, channel, log)=>{\n    let isDestroyed = false;\n    const replyHandlers = /* @__PURE__ */ new Map();\n    const handleMessage = (message)=>{\n        if (!$af59c28592e8fc00$var$isReplyMessage(message)) return;\n        const { callId: callId, value: value, isError: isError, isSerializedErrorInstance: isSerializedErrorInstance } = message;\n        const replyHandler = replyHandlers.get(callId);\n        if (!replyHandler) return;\n        replyHandlers.delete(callId);\n        log?.(`Received ${$af59c28592e8fc00$var$formatMethodPath(replyHandler.methodPath)}() call`, message);\n        if (isError) replyHandler.reject(isSerializedErrorInstance ? $af59c28592e8fc00$var$deserializeError(value) : value);\n        else replyHandler.resolve(value);\n    };\n    messenger.addMessageHandler(handleMessage);\n    const remoteProxy = $af59c28592e8fc00$var$createRemoteProxy((methodPath, args)=>{\n        if (isDestroyed) throw $af59c28592e8fc00$var$getDestroyedConnectionMethodCallError(methodPath);\n        const callId = $af59c28592e8fc00$var$generateId_default();\n        const lastArg = args[args.length - 1];\n        const lastArgIsOptions = lastArg instanceof $af59c28592e8fc00$export$5f47c0d058b6446c;\n        const { timeout: timeout, transferables: transferables } = lastArgIsOptions ? lastArg : {};\n        const argsWithoutOptions = lastArgIsOptions ? args.slice(0, -1) : args;\n        return new Promise((resolve, reject)=>{\n            const timeoutId = timeout !== void 0 ? window.setTimeout(()=>{\n                replyHandlers.delete(callId);\n                reject(new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"METHOD_CALL_TIMEOUT\", `Method call ${$af59c28592e8fc00$var$formatMethodPath(methodPath)}() timed out after ${timeout}ms`));\n            }, timeout) : void 0;\n            replyHandlers.set(callId, {\n                methodPath: methodPath,\n                resolve: resolve,\n                reject: reject,\n                timeoutId: timeoutId\n            });\n            try {\n                const callMessage = {\n                    namespace: $af59c28592e8fc00$var$namespace_default,\n                    channel: channel,\n                    type: \"CALL\",\n                    id: callId,\n                    methodPath: methodPath,\n                    args: argsWithoutOptions\n                };\n                log?.(`Sending ${$af59c28592e8fc00$var$formatMethodPath(methodPath)}() call`, callMessage);\n                messenger.sendMessage(callMessage, transferables);\n            } catch (error) {\n                reject(new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"TRANSMISSION_FAILED\", error.message));\n            }\n        });\n    }, log);\n    const destroy = ()=>{\n        isDestroyed = true;\n        messenger.removeMessageHandler(handleMessage);\n        for (const { methodPath: methodPath, reject: reject, timeoutId: timeoutId } of replyHandlers.values()){\n            clearTimeout(timeoutId);\n            reject($af59c28592e8fc00$var$getDestroyedConnectionMethodCallError(methodPath));\n        }\n        replyHandlers.clear();\n    };\n    return {\n        remoteProxy: remoteProxy,\n        destroy: destroy\n    };\n};\nvar $af59c28592e8fc00$var$connectRemoteProxy_default = $af59c28592e8fc00$var$connectRemoteProxy;\n// src/getPromiseWithResolvers.ts\nvar $af59c28592e8fc00$var$getPromiseWithResolvers = ()=>{\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise: promise,\n        resolve: resolve,\n        reject: reject\n    };\n};\nvar $af59c28592e8fc00$var$getPromiseWithResolvers_default = $af59c28592e8fc00$var$getPromiseWithResolvers;\n// src/PenpalBugError.ts\nvar $af59c28592e8fc00$var$PenpalBugError = class extends Error {\n    constructor(message){\n        super(`You've hit a bug in Penpal. Please file an issue with the following information: ${message}`);\n    }\n};\nvar $af59c28592e8fc00$var$PenpalBugError_default = $af59c28592e8fc00$var$PenpalBugError;\n// src/backwardCompatibility.ts\nvar $af59c28592e8fc00$var$DEPRECATED_PENPAL_PARTICIPANT_ID = \"deprecated-penpal\";\nvar $af59c28592e8fc00$var$isDeprecatedMessage = (data)=>{\n    return $af59c28592e8fc00$var$isObject(data) && \"penpal\" in data;\n};\nvar $af59c28592e8fc00$var$upgradeMethodPath = (methodPath)=>methodPath.split(\".\");\nvar $af59c28592e8fc00$var$downgradeMethodPath = (methodPath)=>methodPath.join(\".\");\nvar $af59c28592e8fc00$var$getUnexpectedMessageError = (message)=>{\n    return new $af59c28592e8fc00$var$PenpalBugError_default(`Unexpected message to translate: ${JSON.stringify(message)}`);\n};\nvar $af59c28592e8fc00$var$upgradeMessage = (message)=>{\n    if (message.penpal === \"syn\" /* Syn */ ) return {\n        namespace: $af59c28592e8fc00$var$namespace_default,\n        channel: void 0,\n        type: \"SYN\",\n        participantId: $af59c28592e8fc00$var$DEPRECATED_PENPAL_PARTICIPANT_ID\n    };\n    if (message.penpal === \"ack\" /* Ack */ ) return {\n        namespace: $af59c28592e8fc00$var$namespace_default,\n        channel: void 0,\n        type: \"ACK2\"\n    };\n    if (message.penpal === \"call\" /* Call */ ) return {\n        namespace: $af59c28592e8fc00$var$namespace_default,\n        channel: void 0,\n        type: \"CALL\",\n        // Actually converting the ID to a string would break communication.\n        id: message.id,\n        methodPath: $af59c28592e8fc00$var$upgradeMethodPath(message.methodName),\n        args: message.args\n    };\n    if (message.penpal === \"reply\" /* Reply */ ) {\n        if (message.resolution === \"fulfilled\" /* Fulfilled */ ) return {\n            namespace: $af59c28592e8fc00$var$namespace_default,\n            channel: void 0,\n            type: \"REPLY\",\n            // Actually converting the ID to a string would break communication.\n            callId: message.id,\n            value: message.returnValue\n        };\n        else return {\n            namespace: $af59c28592e8fc00$var$namespace_default,\n            channel: void 0,\n            type: \"REPLY\",\n            // Actually converting the ID to a string would break communication.\n            callId: message.id,\n            isError: true,\n            ...message.returnValueIsError ? {\n                value: message.returnValue,\n                isSerializedErrorInstance: true\n            } : {\n                value: message.returnValue\n            }\n        };\n    }\n    throw $af59c28592e8fc00$var$getUnexpectedMessageError(message);\n};\nvar $af59c28592e8fc00$var$downgradeMessage = (message)=>{\n    if ($af59c28592e8fc00$var$isAck1Message(message)) return {\n        penpal: \"synAck\" /* SynAck */ ,\n        methodNames: message.methodPaths.map($af59c28592e8fc00$var$downgradeMethodPath)\n    };\n    if ($af59c28592e8fc00$var$isCallMessage(message)) return {\n        penpal: \"call\" /* Call */ ,\n        // Actually converting the ID to a number would break communication.\n        id: message.id,\n        methodName: $af59c28592e8fc00$var$downgradeMethodPath(message.methodPath),\n        args: message.args\n    };\n    if ($af59c28592e8fc00$var$isReplyMessage(message)) {\n        if (message.isError) return {\n            penpal: \"reply\" /* Reply */ ,\n            // Actually converting the ID to a number would break communication.\n            id: message.callId,\n            resolution: \"rejected\" /* Rejected */ ,\n            ...message.isSerializedErrorInstance ? {\n                returnValue: message.value,\n                returnValueIsError: true\n            } : {\n                returnValue: message.value\n            }\n        };\n        else return {\n            penpal: \"reply\" /* Reply */ ,\n            // Actually converting the ID to a number would break communication.\n            id: message.callId,\n            resolution: \"fulfilled\" /* Fulfilled */ ,\n            returnValue: message.value\n        };\n    }\n    throw $af59c28592e8fc00$var$getUnexpectedMessageError(message);\n};\n// src/shakeHands.ts\nvar $af59c28592e8fc00$var$shakeHands = ({ messenger: messenger, methods: methods, timeout: timeout, channel: channel, log: log })=>{\n    const participantId = $af59c28592e8fc00$var$generateId_default();\n    let remoteParticipantId;\n    const destroyHandlers = [];\n    let isComplete = false;\n    const methodPaths = $af59c28592e8fc00$var$extractMethodPathsFromMethods(methods);\n    const { promise: promise, resolve: resolve, reject: reject } = $af59c28592e8fc00$var$getPromiseWithResolvers_default();\n    const timeoutId = timeout !== void 0 ? setTimeout(()=>{\n        reject(new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"CONNECTION_TIMEOUT\", `Connection timed out after ${timeout}ms`));\n    }, timeout) : void 0;\n    const destroy = ()=>{\n        for (const destroyHandler of destroyHandlers)destroyHandler();\n    };\n    const connectCallHandlerAndMethodProxies = ()=>{\n        if (isComplete) return;\n        destroyHandlers.push($af59c28592e8fc00$var$connectCallHandler_default(messenger, methods, channel, log));\n        const { remoteProxy: remoteProxy, destroy: destroyMethodProxies } = $af59c28592e8fc00$var$connectRemoteProxy_default(messenger, channel, log);\n        destroyHandlers.push(destroyMethodProxies);\n        clearTimeout(timeoutId);\n        isComplete = true;\n        resolve({\n            remoteProxy: remoteProxy,\n            destroy: destroy\n        });\n    };\n    const sendSynMessage = ()=>{\n        const synMessage = {\n            namespace: $af59c28592e8fc00$var$namespace_default,\n            type: \"SYN\",\n            channel: channel,\n            participantId: participantId\n        };\n        log?.(`Sending handshake SYN`, synMessage);\n        try {\n            messenger.sendMessage(synMessage);\n        } catch (error) {\n            reject(new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"TRANSMISSION_FAILED\", error.message));\n        }\n    };\n    const handleSynMessage = (message)=>{\n        log?.(`Received handshake SYN`, message);\n        if (message.participantId === remoteParticipantId && // TODO: Used for backward-compatibility. Remove in next major version.\n        remoteParticipantId !== $af59c28592e8fc00$var$DEPRECATED_PENPAL_PARTICIPANT_ID) return;\n        remoteParticipantId = message.participantId;\n        sendSynMessage();\n        const isHandshakeLeader = participantId > remoteParticipantId || // TODO: Used for backward-compatibility. Remove in next major version.\n        remoteParticipantId === $af59c28592e8fc00$var$DEPRECATED_PENPAL_PARTICIPANT_ID;\n        if (!isHandshakeLeader) return;\n        const ack1Message = {\n            namespace: $af59c28592e8fc00$var$namespace_default,\n            channel: channel,\n            type: \"ACK1\",\n            methodPaths: methodPaths\n        };\n        log?.(`Sending handshake ACK1`, ack1Message);\n        try {\n            messenger.sendMessage(ack1Message);\n        } catch (error) {\n            reject(new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"TRANSMISSION_FAILED\", error.message));\n            return;\n        }\n    };\n    const handleAck1Message = (message)=>{\n        log?.(`Received handshake ACK1`, message);\n        const ack2Message = {\n            namespace: $af59c28592e8fc00$var$namespace_default,\n            channel: channel,\n            type: \"ACK2\"\n        };\n        log?.(`Sending handshake ACK2`, ack2Message);\n        try {\n            messenger.sendMessage(ack2Message);\n        } catch (error) {\n            reject(new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"TRANSMISSION_FAILED\", error.message));\n            return;\n        }\n        connectCallHandlerAndMethodProxies();\n    };\n    const handleAck2Message = (message)=>{\n        log?.(`Received handshake ACK2`, message);\n        connectCallHandlerAndMethodProxies();\n    };\n    const handleMessage = (message)=>{\n        if ($af59c28592e8fc00$var$isSynMessage(message)) handleSynMessage(message);\n        if ($af59c28592e8fc00$var$isAck1Message(message)) handleAck1Message(message);\n        if ($af59c28592e8fc00$var$isAck2Message(message)) handleAck2Message(message);\n    };\n    messenger.addMessageHandler(handleMessage);\n    destroyHandlers.push(()=>messenger.removeMessageHandler(handleMessage));\n    sendSynMessage();\n    return promise;\n};\nvar $af59c28592e8fc00$var$shakeHands_default = $af59c28592e8fc00$var$shakeHands;\n// src/once.ts\nvar $af59c28592e8fc00$var$once = (fn)=>{\n    let isCalled = false;\n    let result;\n    return (...args)=>{\n        if (!isCalled) {\n            isCalled = true;\n            result = fn(...args);\n        }\n        return result;\n    };\n};\nvar $af59c28592e8fc00$var$once_default = $af59c28592e8fc00$var$once;\n// src/connect.ts\nvar $af59c28592e8fc00$var$usedMessengers = /* @__PURE__ */ new WeakSet();\nvar $af59c28592e8fc00$var$connect = ({ messenger: messenger, methods: methods = {}, timeout: timeout, channel: channel, log: log })=>{\n    if (!messenger) throw new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"INVALID_ARGUMENT\", \"messenger must be defined\");\n    if ($af59c28592e8fc00$var$usedMessengers.has(messenger)) throw new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"INVALID_ARGUMENT\", \"A messenger can only be used for a single connection\");\n    $af59c28592e8fc00$var$usedMessengers.add(messenger);\n    const connectionDestroyedHandlers = [\n        messenger.destroy\n    ];\n    const destroyConnection = $af59c28592e8fc00$var$once_default((notifyOtherParticipant)=>{\n        if (notifyOtherParticipant) {\n            const destroyMessage = {\n                namespace: $af59c28592e8fc00$var$namespace_default,\n                channel: channel,\n                type: \"DESTROY\"\n            };\n            try {\n                messenger.sendMessage(destroyMessage);\n            } catch (_) {}\n        }\n        for (const connectionDestroyedHandler of connectionDestroyedHandlers)connectionDestroyedHandler();\n        log?.(\"Connection destroyed\");\n    });\n    const validateReceivedMessage = (data)=>{\n        return $af59c28592e8fc00$var$isMessage(data) && data.channel === channel;\n    };\n    const promise = (async ()=>{\n        try {\n            messenger.initialize({\n                log: log,\n                validateReceivedMessage: validateReceivedMessage\n            });\n            messenger.addMessageHandler((message)=>{\n                if ($af59c28592e8fc00$var$isDestroyMessage(message)) destroyConnection(false);\n            });\n            const { remoteProxy: remoteProxy, destroy: destroy } = await $af59c28592e8fc00$var$shakeHands_default({\n                messenger: messenger,\n                methods: methods,\n                timeout: timeout,\n                channel: channel,\n                log: log\n            });\n            connectionDestroyedHandlers.push(destroy);\n            return remoteProxy;\n        } catch (error) {\n            destroyConnection(true);\n            throw error;\n        }\n    })();\n    return {\n        promise: promise,\n        // Why we don't reject the connection promise when consumer calls destroy():\n        // https://github.com/Aaronius/penpal/issues/51\n        destroy: ()=>{\n            destroyConnection(true);\n        }\n    };\n};\nvar $af59c28592e8fc00$export$64605811ab45167f = $af59c28592e8fc00$var$connect;\n// src/messengers/WindowMessenger.ts\nvar $af59c28592e8fc00$var$WindowMessenger = class {\n    #remoteWindow;\n    #allowedOrigins;\n    #log;\n    #validateReceivedMessage;\n    #concreteRemoteOrigin;\n    #messageCallbacks = /* @__PURE__ */ new Set();\n    #port;\n    // TODO: Used for backward-compatibility. Remove in next major version.\n    #isChildUsingDeprecatedProtocol = false;\n    constructor({ remoteWindow: remoteWindow, allowedOrigins: allowedOrigins }){\n        if (!remoteWindow) throw new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"INVALID_ARGUMENT\", \"remoteWindow must be defined\");\n        this.#remoteWindow = remoteWindow;\n        this.#allowedOrigins = allowedOrigins?.length ? allowedOrigins : [\n            window.origin\n        ];\n    }\n    initialize = ({ log: log, validateReceivedMessage: validateReceivedMessage })=>{\n        this.#log = log;\n        this.#validateReceivedMessage = validateReceivedMessage;\n        window.addEventListener(\"message\", this.#handleMessageFromRemoteWindow);\n    };\n    sendMessage = (message, transferables)=>{\n        if ($af59c28592e8fc00$var$isSynMessage(message)) {\n            const originForSending = this.#getOriginForSendingMessage(message);\n            this.#remoteWindow.postMessage(message, {\n                targetOrigin: originForSending,\n                transfer: transferables\n            });\n            return;\n        }\n        if ($af59c28592e8fc00$var$isAck1Message(message) || // If the child is using a previous version of Penpal, we need to\n        // downgrade the message and send it through the window rather than\n        // the port because older versions of Penpal don't use MessagePorts.\n        this.#isChildUsingDeprecatedProtocol) {\n            const payload = this.#isChildUsingDeprecatedProtocol ? $af59c28592e8fc00$var$downgradeMessage(message) : message;\n            const originForSending = this.#getOriginForSendingMessage(message);\n            this.#remoteWindow.postMessage(payload, {\n                targetOrigin: originForSending,\n                transfer: transferables\n            });\n            return;\n        }\n        if ($af59c28592e8fc00$var$isAck2Message(message)) {\n            const { port1: port1, port2: port2 } = new MessageChannel();\n            this.#port = port1;\n            port1.addEventListener(\"message\", this.#handleMessageFromPort);\n            port1.start();\n            const transferablesToSend = [\n                port2,\n                ...transferables || []\n            ];\n            const originForSending = this.#getOriginForSendingMessage(message);\n            this.#remoteWindow.postMessage(message, {\n                targetOrigin: originForSending,\n                transfer: transferablesToSend\n            });\n            return;\n        }\n        if (this.#port) {\n            this.#port.postMessage(message, {\n                transfer: transferables\n            });\n            return;\n        }\n        throw new $af59c28592e8fc00$var$PenpalBugError_default(\"Port is undefined\");\n    };\n    addMessageHandler = (callback)=>{\n        this.#messageCallbacks.add(callback);\n    };\n    removeMessageHandler = (callback)=>{\n        this.#messageCallbacks.delete(callback);\n    };\n    destroy = ()=>{\n        window.removeEventListener(\"message\", this.#handleMessageFromRemoteWindow);\n        this.#destroyPort();\n        this.#messageCallbacks.clear();\n    };\n    #isAllowedOrigin = (origin)=>{\n        return this.#allowedOrigins.some((allowedOrigin)=>allowedOrigin instanceof RegExp ? allowedOrigin.test(origin) : allowedOrigin === origin || allowedOrigin === \"*\");\n    };\n    #getOriginForSendingMessage = (message)=>{\n        if ($af59c28592e8fc00$var$isSynMessage(message)) return \"*\";\n        if (!this.#concreteRemoteOrigin) throw new $af59c28592e8fc00$var$PenpalBugError_default(\"Concrete remote origin not set\");\n        return this.#concreteRemoteOrigin === \"null\" && this.#allowedOrigins.includes(\"*\") ? \"*\" : this.#concreteRemoteOrigin;\n    };\n    #destroyPort = ()=>{\n        this.#port?.removeEventListener(\"message\", this.#handleMessageFromPort);\n        this.#port?.close();\n        this.#port = void 0;\n    };\n    #handleMessageFromRemoteWindow = ({ source: source, origin: origin, ports: ports, data: data })=>{\n        if (source !== this.#remoteWindow) return;\n        if ($af59c28592e8fc00$var$isDeprecatedMessage(data)) {\n            this.#log?.(\"Please upgrade the child window to the latest version of Penpal.\");\n            this.#isChildUsingDeprecatedProtocol = true;\n            data = $af59c28592e8fc00$var$upgradeMessage(data);\n        }\n        if (!this.#validateReceivedMessage?.(data)) return;\n        if (!this.#isAllowedOrigin(origin)) {\n            this.#log?.(`Received a message from origin \\`${origin}\\` which did not match allowed origins \\`[${this.#allowedOrigins.join(\", \")}]\\``);\n            return;\n        }\n        if ($af59c28592e8fc00$var$isSynMessage(data)) {\n            this.#destroyPort();\n            this.#concreteRemoteOrigin = origin;\n        }\n        if ($af59c28592e8fc00$var$isAck2Message(data) && // Previous versions of Penpal don't use MessagePorts and do all\n        // communication through the window.\n        !this.#isChildUsingDeprecatedProtocol) {\n            this.#port = ports[0];\n            if (!this.#port) throw new $af59c28592e8fc00$var$PenpalBugError_default(\"No port received on ACK2\");\n            this.#port.addEventListener(\"message\", this.#handleMessageFromPort);\n            this.#port.start();\n        }\n        for (const callback of this.#messageCallbacks)callback(data);\n    };\n    #handleMessageFromPort = ({ data: data })=>{\n        if (!this.#validateReceivedMessage?.(data)) return;\n        for (const callback of this.#messageCallbacks)callback(data);\n    };\n};\nvar $af59c28592e8fc00$export$a9edd53e76b2cf6 = $af59c28592e8fc00$var$WindowMessenger;\n// src/messengers/WorkerMessenger.ts\nvar $af59c28592e8fc00$var$WorkerMessenger = class {\n    #worker;\n    #validateReceivedMessage;\n    #messageCallbacks = /* @__PURE__ */ new Set();\n    #port;\n    constructor({ worker: worker }){\n        if (!worker) throw new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"INVALID_ARGUMENT\", \"worker must be defined\");\n        this.#worker = worker;\n    }\n    initialize = ({ validateReceivedMessage: validateReceivedMessage })=>{\n        this.#validateReceivedMessage = validateReceivedMessage;\n        this.#worker.addEventListener(\"message\", this.#handleMessage);\n    };\n    sendMessage = (message, transferables)=>{\n        if ($af59c28592e8fc00$var$isSynMessage(message) || $af59c28592e8fc00$var$isAck1Message(message)) {\n            this.#worker.postMessage(message, {\n                transfer: transferables\n            });\n            return;\n        }\n        if ($af59c28592e8fc00$var$isAck2Message(message)) {\n            const { port1: port1, port2: port2 } = new MessageChannel();\n            this.#port = port1;\n            port1.addEventListener(\"message\", this.#handleMessage);\n            port1.start();\n            this.#worker.postMessage(message, {\n                transfer: [\n                    port2,\n                    ...transferables || []\n                ]\n            });\n            return;\n        }\n        if (this.#port) {\n            this.#port.postMessage(message, {\n                transfer: transferables\n            });\n            return;\n        }\n        throw new $af59c28592e8fc00$var$PenpalBugError_default(\"Port is undefined\");\n    };\n    addMessageHandler = (callback)=>{\n        this.#messageCallbacks.add(callback);\n    };\n    removeMessageHandler = (callback)=>{\n        this.#messageCallbacks.delete(callback);\n    };\n    destroy = ()=>{\n        this.#worker.removeEventListener(\"message\", this.#handleMessage);\n        this.#destroyPort();\n        this.#messageCallbacks.clear();\n    };\n    #destroyPort = ()=>{\n        this.#port?.removeEventListener(\"message\", this.#handleMessage);\n        this.#port?.close();\n        this.#port = void 0;\n    };\n    #handleMessage = ({ ports: ports, data: data })=>{\n        if (!this.#validateReceivedMessage?.(data)) return;\n        if ($af59c28592e8fc00$var$isSynMessage(data)) this.#destroyPort();\n        if ($af59c28592e8fc00$var$isAck2Message(data)) {\n            this.#port = ports[0];\n            if (!this.#port) throw new $af59c28592e8fc00$var$PenpalBugError_default(\"No port received on ACK2\");\n            this.#port.addEventListener(\"message\", this.#handleMessage);\n            this.#port.start();\n        }\n        for (const callback of this.#messageCallbacks)callback(data);\n    };\n};\nvar $af59c28592e8fc00$export$9610eb27533223ec = $af59c28592e8fc00$var$WorkerMessenger;\n// src/messengers/PortMessenger.ts\nvar $af59c28592e8fc00$var$PortMessenger = class {\n    #port;\n    #validateReceivedMessage;\n    #messageCallbacks = /* @__PURE__ */ new Set();\n    constructor({ port: port }){\n        if (!port) throw new $af59c28592e8fc00$export$1206dbfc713d1fe1(\"INVALID_ARGUMENT\", \"port must be defined\");\n        this.#port = port;\n    }\n    initialize = ({ validateReceivedMessage: validateReceivedMessage })=>{\n        this.#validateReceivedMessage = validateReceivedMessage;\n        this.#port.addEventListener(\"message\", this.#handleMessage);\n        this.#port.start();\n    };\n    sendMessage = (message, transferables)=>{\n        this.#port?.postMessage(message, {\n            transfer: transferables\n        });\n    };\n    addMessageHandler = (callback)=>{\n        this.#messageCallbacks.add(callback);\n    };\n    removeMessageHandler = (callback)=>{\n        this.#messageCallbacks.delete(callback);\n    };\n    destroy = ()=>{\n        this.#port.removeEventListener(\"message\", this.#handleMessage);\n        this.#port.close();\n        this.#messageCallbacks.clear();\n    };\n    #handleMessage = ({ data: data })=>{\n        if (!this.#validateReceivedMessage?.(data)) return;\n        for (const callback of this.#messageCallbacks)callback(data);\n    };\n};\nvar $af59c28592e8fc00$export$4990b7326d64b6ab = $af59c28592e8fc00$var$PortMessenger;\n// src/ErrorCodeObj.ts\nvar $af59c28592e8fc00$var$ErrorCodeObj = {\n    ConnectionDestroyed: \"CONNECTION_DESTROYED\",\n    ConnectionTimeout: \"CONNECTION_TIMEOUT\",\n    InvalidArgument: \"INVALID_ARGUMENT\",\n    MethodCallTimeout: \"METHOD_CALL_TIMEOUT\",\n    MethodNotFound: \"METHOD_NOT_FOUND\",\n    TransmissionFailed: \"TRANSMISSION_FAILED\"\n};\nvar $af59c28592e8fc00$export$d4e71bc0b80dc0fb = $af59c28592e8fc00$var$ErrorCodeObj;\n// src/debug.ts\nvar $af59c28592e8fc00$var$debug = (prefix)=>{\n    return (...args)=>{\n        console.log(`\\u270D\\uFE0F %c${prefix}%c`, \"font-weight: bold;\", \"\", ...args);\n    };\n};\nvar $af59c28592e8fc00$export$1c9f709888824e05 = $af59c28592e8fc00$var$debug;\n //# sourceMappingURL=penpal.mjs.map\n\n\nfunction $19ea2ddd5fd57cde$export$2e2bcd8739ae039(a) {\n    return a != null && typeof a === \"object\" && a[\"@@functional/placeholder\"] === true;\n}\n\n\nfunction $882bba7afa241055$export$2e2bcd8739ae039(fn) {\n    return function f1(a) {\n        if (arguments.length === 0 || (0, $19ea2ddd5fd57cde$export$2e2bcd8739ae039)(a)) return f1;\n        else return fn.apply(this, arguments);\n    };\n}\n\n\n\nfunction $e14426db870a76cf$export$2e2bcd8739ae039(fn) {\n    return function f2(a, b) {\n        switch(arguments.length){\n            case 0:\n                return f2;\n            case 1:\n                return (0, $19ea2ddd5fd57cde$export$2e2bcd8739ae039)(a) ? f2 : (0, $882bba7afa241055$export$2e2bcd8739ae039)(function(_b) {\n                    return fn(a, _b);\n                });\n            default:\n                return (0, $19ea2ddd5fd57cde$export$2e2bcd8739ae039)(a) && (0, $19ea2ddd5fd57cde$export$2e2bcd8739ae039)(b) ? f2 : (0, $19ea2ddd5fd57cde$export$2e2bcd8739ae039)(a) ? (0, $882bba7afa241055$export$2e2bcd8739ae039)(function(_a) {\n                    return fn(_a, b);\n                }) : (0, $19ea2ddd5fd57cde$export$2e2bcd8739ae039)(b) ? (0, $882bba7afa241055$export$2e2bcd8739ae039)(function(_b) {\n                    return fn(a, _b);\n                }) : fn(a, b);\n        }\n    };\n}\n\n\n\n/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */ var $60ef219ca8109f15$export$2e2bcd8739ae039 = Number.isInteger || function _isInteger(n) {\n    return n << 0 === n;\n};\n\n\n\nfunction $9b2b1597a4e1d4c3$export$2e2bcd8739ae039(x) {\n    return Object.prototype.toString.call(x) === \"[object String]\";\n}\n\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      const list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */ var $117b1c89b58ae121$var$nth = /*#__PURE__*/ (0, $e14426db870a76cf$export$2e2bcd8739ae039)(function nth(offset, list) {\n    var idx = offset < 0 ? list.length + offset : offset;\n    return (0, $9b2b1597a4e1d4c3$export$2e2bcd8739ae039)(list) ? list.charAt(idx) : list[idx];\n});\nvar $117b1c89b58ae121$export$2e2bcd8739ae039 = $117b1c89b58ae121$var$nth;\n\n\n/**\n * Retrieves the values at given paths of an object.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Object\n * @typedefn Idx = [String | Int | Symbol]\n * @sig [Idx] -> {a} -> [a | Undefined]\n * @param {Array} pathsArray The array of paths to be fetched.\n * @param {Object} obj The object to retrieve the nested properties from.\n * @return {Array} A list consisting of values at paths specified by \"pathsArray\".\n * @see R.path\n * @example\n *\n *      R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]\n *      R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]\n */ var $1f8061ca8cdf0062$var$paths = /*#__PURE__*/ (0, $e14426db870a76cf$export$2e2bcd8739ae039)(function paths(pathsArray, obj) {\n    return pathsArray.map(function(paths) {\n        var val = obj;\n        var idx = 0;\n        var p;\n        while(idx < paths.length){\n            if (val == null) return;\n            p = paths[idx];\n            val = (0, $60ef219ca8109f15$export$2e2bcd8739ae039)(p) ? (0, $117b1c89b58ae121$export$2e2bcd8739ae039)(p, val) : val[p];\n            idx += 1;\n        }\n        return val;\n    });\n});\nvar $1f8061ca8cdf0062$export$2e2bcd8739ae039 = $1f8061ca8cdf0062$var$paths;\n\n\n/**\n * Retrieves the value at a given path. The nodes of the path can be arbitrary strings or non-negative integers.\n * For anything else, the value is unspecified. Integer paths are meant to index arrays, strings are meant for objects.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {a} -> a | Undefined\n * @sig Idx = String | NonNegativeInt\n * @param {Array} path The path to use.\n * @param {Object} obj The object or array to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop, R.nth, R.assocPath, R.dissocPath\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n *      R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1\n *      R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2\n *      R.path([2], {'2': 2}); //=> 2\n *      R.path([-2], {'-2': 'a'}); //=> undefined\n */ var $4fde6d69d461a7b0$var$path = /*#__PURE__*/ (0, $e14426db870a76cf$export$2e2bcd8739ae039)(function path(pathAr, obj) {\n    return (0, $1f8061ca8cdf0062$export$2e2bcd8739ae039)([\n        pathAr\n    ], obj)[0];\n});\nvar $4fde6d69d461a7b0$export$2e2bcd8739ae039 = $4fde6d69d461a7b0$var$path;\n\n\n\nfunction $46b0b6d300139dae$export$2e2bcd8739ae039(iter) {\n    var list = [];\n    var next;\n    while(!(next = iter.next()).done)list.push(next.value);\n    return list;\n}\n\n\nfunction $42f3664d54dcf98e$export$2e2bcd8739ae039(pred, x, list) {\n    var idx = 0;\n    var len = list.length;\n    while(idx < len){\n        if (pred(x, list[idx])) return true;\n        idx += 1;\n    }\n    return false;\n}\n\n\nfunction $7fed2c26dfe91800$export$2e2bcd8739ae039(f) {\n    // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n    var match = String(f).match(/^function (\\w*)/);\n    return match == null ? \"\" : match[1];\n}\n\n\nfunction $7ca85f5d3b0feaed$export$2e2bcd8739ae039(prop, obj) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\nfunction $f8ef2a94eda72387$var$_objectIs(a, b) {\n    // SameValue algorithm\n    if (a === b) // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n    else // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n}\nvar $f8ef2a94eda72387$export$2e2bcd8739ae039 = typeof Object.is === \"function\" ? Object.is : $f8ef2a94eda72387$var$_objectIs;\n\n\n\n\n\nvar $d4c2fbc53f8f5040$var$toString = Object.prototype.toString;\nvar $d4c2fbc53f8f5040$var$_isArguments = /*#__PURE__*/ function() {\n    return $d4c2fbc53f8f5040$var$toString.call(arguments) === \"[object Arguments]\" ? function _isArguments(x) {\n        return $d4c2fbc53f8f5040$var$toString.call(x) === \"[object Arguments]\";\n    } : function _isArguments(x) {\n        return (0, $7ca85f5d3b0feaed$export$2e2bcd8739ae039)(\"callee\", x);\n    };\n}();\nvar $d4c2fbc53f8f5040$export$2e2bcd8739ae039 = $d4c2fbc53f8f5040$var$_isArguments;\n\n\nvar $5c5209b78325f90a$var$hasEnumBug = !/*#__PURE__*/ ({\n    toString: null\n}).propertyIsEnumerable(\"toString\");\nvar $5c5209b78325f90a$var$nonEnumerableProps = [\n    \"constructor\",\n    \"valueOf\",\n    \"isPrototypeOf\",\n    \"toString\",\n    \"propertyIsEnumerable\",\n    \"hasOwnProperty\",\n    \"toLocaleString\"\n]; // Safari bug\nvar $5c5209b78325f90a$var$hasArgsEnumBug = /*#__PURE__*/ function() {\n    \"use strict\";\n    return arguments.propertyIsEnumerable(\"length\");\n}();\nvar $5c5209b78325f90a$var$contains = function contains(list, item) {\n    var idx = 0;\n    while(idx < list.length){\n        if (list[idx] === item) return true;\n        idx += 1;\n    }\n    return false;\n};\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values, R.toPairs\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */ var $5c5209b78325f90a$var$keys = typeof Object.keys === \"function\" && !$5c5209b78325f90a$var$hasArgsEnumBug ? /*#__PURE__*/ (0, $882bba7afa241055$export$2e2bcd8739ae039)(function keys(obj) {\n    return Object(obj) !== obj ? [] : Object.keys(obj);\n}) : /*#__PURE__*/ (0, $882bba7afa241055$export$2e2bcd8739ae039)(function keys(obj) {\n    if (Object(obj) !== obj) return [];\n    var prop, nIdx;\n    var ks = [];\n    var checkArgsLength = $5c5209b78325f90a$var$hasArgsEnumBug && (0, $d4c2fbc53f8f5040$export$2e2bcd8739ae039)(obj);\n    for(prop in obj)if ((0, $7ca85f5d3b0feaed$export$2e2bcd8739ae039)(prop, obj) && (!checkArgsLength || prop !== \"length\")) ks[ks.length] = prop;\n    if ($5c5209b78325f90a$var$hasEnumBug) {\n        nIdx = $5c5209b78325f90a$var$nonEnumerableProps.length - 1;\n        while(nIdx >= 0){\n            prop = $5c5209b78325f90a$var$nonEnumerableProps[nIdx];\n            if ((0, $7ca85f5d3b0feaed$export$2e2bcd8739ae039)(prop, obj) && !$5c5209b78325f90a$var$contains(ks, prop)) ks[ks.length] = prop;\n            nIdx -= 1;\n        }\n    }\n    return ks;\n});\nvar $5c5209b78325f90a$export$2e2bcd8739ae039 = $5c5209b78325f90a$var$keys;\n\n\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig * -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(async () => {}); //=> \"AsyncFunction\"\n *      R.type(undefined); //=> \"Undefined\"\n */ var $daf39ce063abbb84$var$type = /*#__PURE__*/ (0, $882bba7afa241055$export$2e2bcd8739ae039)(function type(val) {\n    return val === null ? \"Null\" : val === undefined ? \"Undefined\" : Object.prototype.toString.call(val).slice(8, -1);\n});\nvar $daf39ce063abbb84$export$2e2bcd8739ae039 = $daf39ce063abbb84$var$type;\n\n\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparison of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */ function $6af9b45c3712f4f0$var$_uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n    var a = (0, $46b0b6d300139dae$export$2e2bcd8739ae039)(aIterator);\n    var b = (0, $46b0b6d300139dae$export$2e2bcd8739ae039)(bIterator);\n    function eq(_a, _b) {\n        return $6af9b45c3712f4f0$export$2e2bcd8739ae039(_a, _b, stackA.slice(), stackB.slice());\n    } // if *a* array contains any element that is not included in *b*\n    return !(0, $42f3664d54dcf98e$export$2e2bcd8739ae039)(function(b, aItem) {\n        return !(0, $42f3664d54dcf98e$export$2e2bcd8739ae039)(eq, aItem, b);\n    }, b, a);\n}\nfunction $6af9b45c3712f4f0$export$2e2bcd8739ae039(a, b, stackA, stackB) {\n    if ((0, $f8ef2a94eda72387$export$2e2bcd8739ae039)(a, b)) return true;\n    var typeA = (0, $daf39ce063abbb84$export$2e2bcd8739ae039)(a);\n    if (typeA !== (0, $daf39ce063abbb84$export$2e2bcd8739ae039)(b)) return false;\n    if (typeof a[\"fantasy-land/equals\"] === \"function\" || typeof b[\"fantasy-land/equals\"] === \"function\") return typeof a[\"fantasy-land/equals\"] === \"function\" && a[\"fantasy-land/equals\"](b) && typeof b[\"fantasy-land/equals\"] === \"function\" && b[\"fantasy-land/equals\"](a);\n    if (typeof a.equals === \"function\" || typeof b.equals === \"function\") return typeof a.equals === \"function\" && a.equals(b) && typeof b.equals === \"function\" && b.equals(a);\n    switch(typeA){\n        case \"Arguments\":\n        case \"Array\":\n        case \"Object\":\n            if (typeof a.constructor === \"function\" && (0, $7fed2c26dfe91800$export$2e2bcd8739ae039)(a.constructor) === \"Promise\") return a === b;\n            break;\n        case \"Boolean\":\n        case \"Number\":\n        case \"String\":\n            if (!(typeof a === typeof b && (0, $f8ef2a94eda72387$export$2e2bcd8739ae039)(a.valueOf(), b.valueOf()))) return false;\n            break;\n        case \"Date\":\n            if (!(0, $f8ef2a94eda72387$export$2e2bcd8739ae039)(a.valueOf(), b.valueOf())) return false;\n            break;\n        case \"Error\":\n            return a.name === b.name && a.message === b.message;\n        case \"RegExp\":\n            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) return false;\n            break;\n    }\n    var idx = stackA.length - 1;\n    while(idx >= 0){\n        if (stackA[idx] === a) return stackB[idx] === b;\n        idx -= 1;\n    }\n    switch(typeA){\n        case \"Map\":\n            if (a.size !== b.size) return false;\n            return $6af9b45c3712f4f0$var$_uniqContentEquals(a.entries(), b.entries(), stackA.concat([\n                a\n            ]), stackB.concat([\n                b\n            ]));\n        case \"Set\":\n            if (a.size !== b.size) return false;\n            return $6af9b45c3712f4f0$var$_uniqContentEquals(a.values(), b.values(), stackA.concat([\n                a\n            ]), stackB.concat([\n                b\n            ]));\n        case \"Arguments\":\n        case \"Array\":\n        case \"Object\":\n        case \"Boolean\":\n        case \"Number\":\n        case \"String\":\n        case \"Date\":\n        case \"Error\":\n        case \"RegExp\":\n        case \"Int8Array\":\n        case \"Uint8Array\":\n        case \"Uint8ClampedArray\":\n        case \"Int16Array\":\n        case \"Uint16Array\":\n        case \"Int32Array\":\n        case \"Uint32Array\":\n        case \"Float32Array\":\n        case \"Float64Array\":\n        case \"ArrayBuffer\":\n            break;\n        default:\n            // Values of other types are only equal if identical.\n            return false;\n    }\n    var keysA = (0, $5c5209b78325f90a$export$2e2bcd8739ae039)(a);\n    if (keysA.length !== (0, $5c5209b78325f90a$export$2e2bcd8739ae039)(b).length) return false;\n    var extendedStackA = stackA.concat([\n        a\n    ]);\n    var extendedStackB = stackB.concat([\n        b\n    ]);\n    idx = keysA.length - 1;\n    while(idx >= 0){\n        var key = keysA[idx];\n        if (!((0, $7ca85f5d3b0feaed$export$2e2bcd8739ae039)(key, b) && $6af9b45c3712f4f0$export$2e2bcd8739ae039(b[key], a[key], extendedStackA, extendedStackB))) return false;\n        idx -= 1;\n    }\n    return true;\n}\n\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      const a = {}; a.v = a;\n *      const b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */ var $49c4124573ea3e00$var$equals = /*#__PURE__*/ (0, $e14426db870a76cf$export$2e2bcd8739ae039)(function equals(a, b) {\n    return (0, $6af9b45c3712f4f0$export$2e2bcd8739ae039)(a, b, [], []);\n});\nvar $49c4124573ea3e00$export$2e2bcd8739ae039 = $49c4124573ea3e00$var$equals;\n\n\nfunction $3042843750f70a50$export$2e2bcd8739ae039(list, a, idx) {\n    var inf, item; // Array.prototype.indexOf doesn't exist below IE9\n    if (typeof list.indexOf === \"function\") switch(typeof a){\n        case \"number\":\n            if (a === 0) {\n                // manually crawl the list to distinguish between +0 and -0\n                inf = 1 / a;\n                while(idx < list.length){\n                    item = list[idx];\n                    if (item === 0 && 1 / item === inf) return idx;\n                    idx += 1;\n                }\n                return -1;\n            } else if (a !== a) {\n                // NaN\n                while(idx < list.length){\n                    item = list[idx];\n                    if (typeof item === \"number\" && item !== item) return idx;\n                    idx += 1;\n                }\n                return -1;\n            } // non-zero numbers can utilise Set\n            return list.indexOf(a, idx);\n        // all these types can utilise Set\n        case \"string\":\n        case \"boolean\":\n        case \"function\":\n        case \"undefined\":\n            return list.indexOf(a, idx);\n        case \"object\":\n            if (a === null) // null can utilise Set\n            return list.indexOf(a, idx);\n    }\n     // anything else not covered above, defer to R.equals\n    while(idx < list.length){\n        if ((0, $49c4124573ea3e00$export$2e2bcd8739ae039)(list[idx], a)) return idx;\n        idx += 1;\n    }\n    return -1;\n}\n\n\nfunction $9694817463214ede$export$2e2bcd8739ae039(a, list) {\n    return (0, $3042843750f70a50$export$2e2bcd8739ae039)(list, a, 0) >= 0;\n}\n\n\nvar $f0bfdf50d8548542$var$_Set = /*#__PURE__*/ function() {\n    function _Set() {\n        /* globals Set */ this._nativeSet = typeof Set === \"function\" ? new Set() : null;\n        this._items = {};\n    }\n    // until we figure out why jsdoc chokes on this\n    // @param item The item to add to the Set\n    // @returns {boolean} true if the item did not exist prior, otherwise false\n    //\n    _Set.prototype.add = function(item) {\n        return !$f0bfdf50d8548542$var$hasOrAdd(item, true, this);\n    }; //\n    // @param item The item to check for existence in the Set\n    // @returns {boolean} true if the item exists in the Set, otherwise false\n    //\n    _Set.prototype.has = function(item) {\n        return $f0bfdf50d8548542$var$hasOrAdd(item, false, this);\n    }; //\n    // Combines the logic for checking whether an item is a member of the set and\n    // for adding a new item to the set.\n    //\n    // @param item       The item to check or add to the Set instance.\n    // @param shouldAdd  If true, the item will be added to the set if it doesn't\n    //                   already exist.\n    // @param set        The set instance to check or add to.\n    // @return {boolean} true if the item already existed, otherwise false.\n    //\n    return _Set;\n}();\nfunction $f0bfdf50d8548542$var$hasOrAdd(item, shouldAdd, set) {\n    var type = typeof item;\n    var prevSize, newSize;\n    switch(type){\n        case \"string\":\n        case \"number\":\n            // distinguish between +0 and -0\n            if (item === 0 && 1 / item === -Infinity) {\n                if (set._items[\"-0\"]) return true;\n                else {\n                    if (shouldAdd) set._items[\"-0\"] = true;\n                    return false;\n                }\n            } // these types can all utilise the native Set\n            if (set._nativeSet !== null) {\n                if (shouldAdd) {\n                    prevSize = set._nativeSet.size;\n                    set._nativeSet.add(item);\n                    newSize = set._nativeSet.size;\n                    return newSize === prevSize;\n                } else return set._nativeSet.has(item);\n            } else {\n                if (!(type in set._items)) {\n                    if (shouldAdd) {\n                        set._items[type] = {};\n                        set._items[type][item] = true;\n                    }\n                    return false;\n                } else if (item in set._items[type]) return true;\n                else {\n                    if (shouldAdd) set._items[type][item] = true;\n                    return false;\n                }\n            }\n        case \"boolean\":\n            // set._items['boolean'] holds a two element array\n            // representing [ falseExists, trueExists ]\n            if (type in set._items) {\n                var bIdx = item ? 1 : 0;\n                if (set._items[type][bIdx]) return true;\n                else {\n                    if (shouldAdd) set._items[type][bIdx] = true;\n                    return false;\n                }\n            } else {\n                if (shouldAdd) set._items[type] = item ? [\n                    false,\n                    true\n                ] : [\n                    true,\n                    false\n                ];\n                return false;\n            }\n        case \"function\":\n            // compare functions for reference equality\n            if (set._nativeSet !== null) {\n                if (shouldAdd) {\n                    prevSize = set._nativeSet.size;\n                    set._nativeSet.add(item);\n                    newSize = set._nativeSet.size;\n                    return newSize === prevSize;\n                } else return set._nativeSet.has(item);\n            } else {\n                if (!(type in set._items)) {\n                    if (shouldAdd) set._items[type] = [\n                        item\n                    ];\n                    return false;\n                }\n                if (!(0, $9694817463214ede$export$2e2bcd8739ae039)(item, set._items[type])) {\n                    if (shouldAdd) set._items[type].push(item);\n                    return false;\n                }\n                return true;\n            }\n        case \"undefined\":\n            if (set._items[type]) return true;\n            else {\n                if (shouldAdd) set._items[type] = true;\n                return false;\n            }\n        case \"object\":\n            if (item === null) {\n                if (!set._items[\"null\"]) {\n                    if (shouldAdd) set._items[\"null\"] = true;\n                    return false;\n                }\n                return true;\n            }\n        /* falls through */ default:\n            // reduce the search size of heterogeneous sets by creating buckets\n            // for each type.\n            type = Object.prototype.toString.call(item);\n            if (!(type in set._items)) {\n                if (shouldAdd) set._items[type] = [\n                    item\n                ];\n                return false;\n            } // scan through all previously applied items\n            if (!(0, $9694817463214ede$export$2e2bcd8739ae039)(item, set._items[type])) {\n                if (shouldAdd) set._items[type].push(item);\n                return false;\n            }\n            return true;\n    }\n} // A simple Set type that honours R.equals semantics\nvar $f0bfdf50d8548542$export$2e2bcd8739ae039 = $f0bfdf50d8548542$var$_Set;\n\n\nfunction $91101a5106cb2962$export$2e2bcd8739ae039(f) {\n    return function() {\n        return !f.apply(this, arguments);\n    };\n}\n\n\n\nfunction $7863099338ef0570$export$2e2bcd8739ae039(reducer, acc, list) {\n    var index = 0;\n    var length = list.length;\n    while(index < length){\n        acc = reducer(acc, list[index]);\n        index += 1;\n    }\n    return acc;\n}\n\n\n\n/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */ var $ec23a8befbc10747$export$2e2bcd8739ae039 = Array.isArray || function _isArray(val) {\n    return val != null && val.length >= 0 && Object.prototype.toString.call(val) === \"[object Array]\";\n};\n\n\nfunction $c69e1be25eda489d$export$2e2bcd8739ae039(obj) {\n    return obj != null && typeof obj[\"@@transducer/step\"] === \"function\";\n}\n\n\nfunction $86f1b07c44c8f220$export$2e2bcd8739ae039(methodNames, transducerCreator, fn) {\n    return function() {\n        if (arguments.length === 0) return fn();\n        var obj = arguments[arguments.length - 1];\n        if (!(0, $ec23a8befbc10747$export$2e2bcd8739ae039)(obj)) {\n            var idx = 0;\n            while(idx < methodNames.length){\n                if (typeof obj[methodNames[idx]] === \"function\") return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));\n                idx += 1;\n            }\n            if ((0, $c69e1be25eda489d$export$2e2bcd8739ae039)(obj)) {\n                var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));\n                return transducer(obj);\n            }\n        }\n        return fn.apply(this, arguments);\n    };\n}\n\n\nfunction $1186bcb1e0f4aca2$export$2e2bcd8739ae039(fn, list) {\n    var idx = 0;\n    var len = list.length;\n    var result = [];\n    while(idx < len){\n        if (fn(list[idx])) result[result.length] = list[idx];\n        idx += 1;\n    }\n    return result;\n}\n\n\nfunction $4297f6d885420197$export$2e2bcd8739ae039(x) {\n    return Object.prototype.toString.call(x) === \"[object Object]\";\n}\n\n\nvar $af7e8af4853eaaae$export$2e2bcd8739ae039 = {\n    init: function() {\n        return this.xf[\"@@transducer/init\"]();\n    },\n    result: function(result) {\n        return this.xf[\"@@transducer/result\"](result);\n    }\n};\n\n\nvar $855381eca1dbb528$var$XFilter = /*#__PURE__*/ function() {\n    function XFilter(f, xf) {\n        this.xf = xf;\n        this.f = f;\n    }\n    XFilter.prototype[\"@@transducer/init\"] = (0, $af7e8af4853eaaae$export$2e2bcd8739ae039).init;\n    XFilter.prototype[\"@@transducer/result\"] = (0, $af7e8af4853eaaae$export$2e2bcd8739ae039).result;\n    XFilter.prototype[\"@@transducer/step\"] = function(result, input) {\n        return this.f(input) ? this.xf[\"@@transducer/step\"](result, input) : result;\n    };\n    return XFilter;\n}();\nfunction $855381eca1dbb528$export$2e2bcd8739ae039(f) {\n    return function(xf) {\n        return new $855381eca1dbb528$var$XFilter(f, xf);\n    };\n}\n\n\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @category Object\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      const isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */ var $7927d7d0e4ddb537$var$filter = /*#__PURE__*/ (0, $e14426db870a76cf$export$2e2bcd8739ae039)(/*#__PURE__*/ (0, $86f1b07c44c8f220$export$2e2bcd8739ae039)([\n    \"fantasy-land/filter\",\n    \"filter\"\n], (0, $855381eca1dbb528$export$2e2bcd8739ae039), function(pred, filterable) {\n    return (0, $4297f6d885420197$export$2e2bcd8739ae039)(filterable) ? (0, $7863099338ef0570$export$2e2bcd8739ae039)(function(acc, key) {\n        if (pred(filterable[key])) acc[key] = filterable[key];\n        return acc;\n    }, {}, (0, $5c5209b78325f90a$export$2e2bcd8739ae039)(filterable)) : (0, $1186bcb1e0f4aca2$export$2e2bcd8739ae039)(pred, filterable);\n}));\nvar $7927d7d0e4ddb537$export$2e2bcd8739ae039 = $7927d7d0e4ddb537$var$filter;\n\n\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      const isOdd = (n) => n % 2 !== 0;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */ var $eede1afc76e517a2$var$reject = /*#__PURE__*/ (0, $e14426db870a76cf$export$2e2bcd8739ae039)(function reject(pred, filterable) {\n    return (0, $7927d7d0e4ddb537$export$2e2bcd8739ae039)((0, $91101a5106cb2962$export$2e2bcd8739ae039)(pred), filterable);\n});\nvar $eede1afc76e517a2$export$2e2bcd8739ae039 = $eede1afc76e517a2$var$reject;\n\n\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference, R.remove\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */ var $5ba872a326df8bcd$var$without = /*#__PURE__*/ (0, $e14426db870a76cf$export$2e2bcd8739ae039)(function without(xs, list) {\n    var toRemove = new (0, $f0bfdf50d8548542$export$2e2bcd8739ae039)();\n    for(var i = 0; i < xs.length; i += 1)toRemove.add(xs[i]);\n    return (0, $eede1afc76e517a2$export$2e2bcd8739ae039)(toRemove.has.bind(toRemove), list);\n});\nvar $5ba872a326df8bcd$export$2e2bcd8739ae039 = $5ba872a326df8bcd$var$without;\n\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */ var $1c9f8a1e88f30dc8$var$zipObj = /*#__PURE__*/ (0, $e14426db870a76cf$export$2e2bcd8739ae039)(function zipObj(keys, values) {\n    var idx = 0;\n    var len = Math.min(keys.length, values.length);\n    var out = {};\n    while(idx < len){\n        out[keys[idx]] = values[idx];\n        idx += 1;\n    }\n    return out;\n});\nvar $1c9f8a1e88f30dc8$export$2e2bcd8739ae039 = $1c9f8a1e88f30dc8$var$zipObj;\n\n\nasync function $3289345718387699$export$5b5f0092f02f8422(screen_name, url, zip) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);\n        // console.log(response);\n        const blob = await response.blob();\n        let filename = url.substring(url.lastIndexOf(\"/\") + 1);\n        if (filename.includes(\"?\")) filename = filename.split(\"?\")[0];\n        zip.file(`${screen_name}/${filename}`, blob);\n    } catch (error) {\n        console.error(`Failed to download and compress: ${url}`, error);\n    // failedUrls.push({ url, retries: 1 });\n    }\n}\nfunction $3289345718387699$export$9fc5011a778dc2d8(str) {\n    try {\n        // const str = \"Mon Apr 10 11:30:55 +0000 2023\";\n        // Split the string into its components\n        const parts = str.split(\" \");\n        // Get the day, year, and time\n        const day = parts[2];\n        const year = parts[5];\n        const time = parts[3];\n        // Convert the month from a string to a number (0-11)\n        const monthNames = [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\"\n        ];\n        const month = monthNames.indexOf(parts[1]);\n        // Create a new Date object\n        const date = new Date(Date.UTC(year, month, day, ...time.split(\":\")));\n        return date;\n    } catch (e) {\n        return new Date();\n    }\n}\nfunction $3289345718387699$export$4828302ba0a9677b(item) {\n    let sortidx = item.sortIndex;\n    const shiftedValue = BigInt(sortidx) >> BigInt(20);\n    const convertedDate = new Date(Number(shiftedValue));\n    return convertedDate;\n}\nfunction $3289345718387699$export$8187d2eb08ba46f8(tweet) {\n    // tx.executeSql(`\n    //             INSERT OR IGNORE INTO bookmarks\n    //             (entry_id, sort_index, raw_entry, profile_image_url_https, screen_name, name, full_text, legacy_entities, is_expandable, note_tweet_text, note_tweet_entity_set, synced_at, tweeted_at)\n    //             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), ?);\n    //           `,\n    // .field('profile_image_url_https')\n    // .field('screen_name')\n    // .field('name')\n    // .field('full_text')\n    // .field('tweeted_at')\n    // .field('note_tweet_text')\n    // .field(`'https://twitter.com/' || screen_name || '/status/' || REPLACE(entry_id, 'tweet-', '')`, 'tweet_url')\n    var tweetResultType = $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.__typename\".split(\".\"), tweet);\n    let keys = [\n        \"bookmark_date\",\n        \"profile_image_url_https\",\n        \"screen_name\",\n        \"name\",\n        \"full_text\",\n        \"note_tweet_text\",\n        \"tweeted_at\",\n        \"extended_media\"\n    ];\n    let values;\n    if (tweetResultType === \"Tweet\") values = [\n        $3289345718387699$export$4828302ba0a9677b(tweet),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.core.user_results.result.avatar.image_url\".split(\".\"), tweet),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.core.user_results.result.core.screen_name\".split(\".\"), tweet),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.core.user_results.result.core.name\".split(\".\"), tweet),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.legacy.full_text\".split(\".\"), tweet),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.note_tweet.note_tweet_results.result.text\".split(\".\"), tweet),\n        $3289345718387699$export$9fc5011a778dc2d8($4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.legacy.created_at\".split(\".\"), tweet)).toISOString(),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.legacy.extended_entities.media\".split(\".\"), tweet)\n    ];\n    else if (tweetResultType === \"TweetWithVisibilityResults\") values = [\n        $3289345718387699$export$4828302ba0a9677b(tweet),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.tweet.core.user_results.result.avatar.image_url\".split(\".\"), tweet),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.tweet.core.user_results.result.core.screen_name\".split(\".\"), tweet),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.tweet.core.user_results.result.core.name\".split(\".\"), tweet),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.tweet.legacy.full_text\".split(\".\"), tweet),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.note_tweet.note_tweet_results.result.text\".split(\".\"), tweet),\n        $3289345718387699$export$9fc5011a778dc2d8($4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.tweet.legacy.created_at\".split(\".\"), tweet)).toISOString(),\n        $4fde6d69d461a7b0$export$2e2bcd8739ae039(\"content.itemContent.tweet_results.result.tweet.legacy.extended_entities.media\".split(\".\"), tweet)\n    ];\n    else {\n        if (tweetResultType) console.error(\"Unknown tweet type\", tweetResultType);\n        return null;\n    }\n    let output = $1c9f8a1e88f30dc8$export$2e2bcd8739ae039(keys, values);\n    output[\"tweet_url\"] = `https://x.com/${output.screen_name}/status/${tweet.entryId.replace(\"tweet-\", \"\")}`;\n    // .field(, 'tweet_url')\n    return output;\n}\nfunction $3289345718387699$export$35193a8a641bb1b(jsonData, fileName) {\n    // Convert JSON data to CSV format\n    const csvData = $3289345718387699$export$4f77028867b86013(jsonData);\n    // Create a Blob object from the CSV data\n    const blob = new Blob([\n        csvData\n    ], {\n        type: \"text/csv\"\n    });\n    // Create download URL for the Blob object\n    const url = URL.createObjectURL(blob);\n    // Create an anchor element for the download link\n    const anchorElement = document.createElement(\"a\");\n    anchorElement.href = url;\n    anchorElement.download = fileName;\n    // Programmatically trigger the download\n    anchorElement.click();\n    // Clean up the temporary elements\n    URL.revokeObjectURL(url);\n// anchorElement.remove();\n}\nfunction $3289345718387699$export$4f77028867b86013(jsonData) {\n    // Extract the headers from the JSON data\n    let headers = Object.keys(jsonData[0]);\n    let dontInclude = [\n        \"extended_media\",\n        \"org_item\",\n        \"bookmark_date\"\n    ];\n    headers = $5ba872a326df8bcd$export$2e2bcd8739ae039(dontInclude, headers);\n    // Create an array of CSV rows\n    const rows = [];\n    // Add headers to the rows array\n    rows.push(headers.join(\",\"));\n    // Process each object in the JSON data\n    jsonData.forEach((data)=>{\n        const values = headers.map((header)=>{\n            // Escape double quotes in field values\n            const raw = data[header] ? data[header].toString() : \"\";\n            const field = raw.replace(/\"/g, '\"\"');\n            return `\"${field}\"`;\n        });\n        rows.push(values.join(\",\"));\n    });\n    // Join the rows array with newline characters\n    return rows.join(\"\\n\");\n}\nfunction $3289345718387699$export$90aadfdc953d1529(jsonData, fileName) {\n    const jsonString = JSON.stringify(jsonData);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const anchorElement = document.createElement(\"a\");\n    anchorElement.href = url;\n    anchorElement.download = fileName;\n    anchorElement.click();\n// document.removeChild(anchorElement);\n}\nfunction $3289345718387699$var$generateRandomUserId() {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    let userId = \"\";\n    // Generate a 10 character long random user id\n    for(let i = 0; i < 20; i++)userId += chars.charAt(Math.floor(Math.random() * chars.length));\n    return userId;\n}\nlet $3289345718387699$var$_cachedStorage;\nfunction $3289345718387699$export$ddcffe0146c8f882() {\n    if (!$3289345718387699$var$_cachedStorage) $3289345718387699$var$_cachedStorage = chrome.storage.local;\n    return $3289345718387699$var$_cachedStorage;\n}\n\nvar $jMwRH = parcelRequire(\"jMwRH\");\nfunction $3289345718387699$export$a7649f8513ac033a() {\n    var msg = $3289345718387699$var$generateRandomUserId();\n    var ciphertext = $jMwRH.encrypt(msg, \"Cgf4zaeuypDZBhD8GqtgRrxqgaZkchx\").toString();\n    return ciphertext;\n}\nasync function $3289345718387699$export$2aef3baa9aaecaf1() {\n    let cached = await $3289345718387699$export$ddcffe0146c8f882().get(\"hr_state\");\n    if (cached.hr_state) return cached.hr_state.enc_key;\n    else {\n        let newKey = $3289345718387699$export$a7649f8513ac033a();\n        await $3289345718387699$export$ddcffe0146c8f882().set({\n            hr_state: {\n                enc_key: newKey\n            }\n        });\n        return newKey;\n    }\n}\nasync function $3289345718387699$export$8a452ee356909bac() {\n    let cached = await $3289345718387699$export$ddcffe0146c8f882().get(\"client_id\");\n    if (cached.client_id) return cached.client_id;\n    else {\n        let newId = $3289345718387699$var$generateRandomUserId();\n        await $3289345718387699$export$ddcffe0146c8f882().set({\n            client_id: newId\n        });\n        return newId;\n    }\n}\nasync function $3289345718387699$export$63709b00698b7d14() {\n    let cachedResult = await $3289345718387699$export$ddcffe0146c8f882().get(\"unlock_status\");\n    if (cachedResult[\"unlock_status\"]) return true;\n    else {\n        let clientId = await $3289345718387699$export$8a452ee356909bac();\n        let res = await fetch(`https://2p36w37sqaym5ksh47m3br6owe0xkebc.lambda-url.ap-southeast-1.on.aws?clientId=${clientId}`);\n        let content = await res.json();\n        // if it's granted...\n        if (content.granted) await $3289345718387699$export$ddcffe0146c8f882().set({\n            \"unlock_status\": true\n        });\n        return content.granted;\n    }\n}\n\n\nconst $94f96d7db483cd7f$var$messenger = new (0, $af59c28592e8fc00$export$a9edd53e76b2cf6)({\n    remoteWindow: window.parent,\n    // Defaults to the current origin.\n    allowedOrigins: [\n        \"https://dev.toolboxforweb.xyz:8787\",\n        \"https://bookmarks.toolboxforweb.xyz\"\n    ]\n});\nfunction $94f96d7db483cd7f$var$getData(keys) {\n    return chrome.storage.local.get(keys);\n}\nlet $94f96d7db483cd7f$var$connection = (0, $af59c28592e8fc00$export$64605811ab45167f)({\n    messenger: $94f96d7db483cd7f$var$messenger,\n    methods: {\n        getData: $94f96d7db483cd7f$var$getData,\n        getSecKey: $3289345718387699$export$2aef3baa9aaecaf1\n    }\n});\n\n\n//# sourceMappingURL=bridge.bfbf685b.js.map\n",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            var t;\n\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/*globals window, global, require*/\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\n\t    var crypto;\n\n\t    // Native crypto from window (Browser)\n\t    if (typeof window !== 'undefined' && window.crypto) {\n\t        crypto = window.crypto;\n\t    }\n\n\t    // Native crypto in web worker (Browser)\n\t    if (typeof self !== 'undefined' && self.crypto) {\n\t        crypto = self.crypto;\n\t    }\n\n\t    // Native crypto from worker\n\t    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n\t        crypto = globalThis.crypto;\n\t    }\n\n\t    // Native (experimental IE 11) crypto from window (Browser)\n\t    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n\t        crypto = window.msCrypto;\n\t    }\n\n\t    // Native crypto from global (NodeJS)\n\t    if (!crypto && typeof global !== 'undefined' && global.crypto) {\n\t        crypto = global.crypto;\n\t    }\n\n\t    // Native crypto import via require (NodeJS)\n\t    if (!crypto && typeof require === 'function') {\n\t        try {\n\t            crypto = require('crypto');\n\t        } catch (err) {}\n\t    }\n\n\t    /*\n\t     * Cryptographically secure pseudorandom number generator\n\t     *\n\t     * As Math.random() is cryptographically not safe to use\n\t     */\n\t    var cryptoSecureRandomInt = function () {\n\t        if (crypto) {\n\t            // Use getRandomValues method (Browser)\n\t            if (typeof crypto.getRandomValues === 'function') {\n\t                try {\n\t                    return crypto.getRandomValues(new Uint32Array(1))[0];\n\t                } catch (err) {}\n\t            }\n\n\t            // Use randomBytes method (NodeJS)\n\t            if (typeof crypto.randomBytes === 'function') {\n\t                try {\n\t                    return crypto.randomBytes(4).readInt32LE();\n\t                } catch (err) {}\n\t            }\n\t        }\n\n\t        throw new Error('Native crypto module could not be used to get secure random number.');\n\t    };\n\n\t    /*\n\t     * Local polyfill of Object.create\n\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {}\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }());\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var j = 0; j < thatSigBytes; j += 4) {\n\t                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            for (var i = 0; i < nBytes; i += 4) {\n\t                words.push(cryptoSecureRandomInt());\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            var processedWords;\n\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));","\"use strict\";",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              var bitsCombined = bits1 | bits2;\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            var block;\n\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            var block;\n\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            var modeCreator;\n\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var finalProcessedBlocks;\n\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            var wordArray;\n\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            var salt;\n\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt, hasher) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            if (!hasher) {\n\t                var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\t            } else {\n\t                var key = EvpKDF.create({ keySize: keySize + ivSize, hasher: hasher }).compute(password, salt);\n\t            }\n\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));","import { WindowMessenger, connect } from 'penpal/dist/penpal.mjs';\nimport { getSecKey } from './utils';\n\nconsole.log('Bridge loaded');\n\nconst messenger = new WindowMessenger({\n  remoteWindow: window.parent,\n  // Defaults to the current origin.\n  allowedOrigins: [\n    'https://dev.toolboxforweb.xyz:8787',\n    'https://bookmarks.toolboxforweb.xyz'\n  ],\n});\n\nfunction getData(keys) {\n  console.log('getData', keys);\n  return chrome.storage.local.get(keys);\n}\n\nlet connection = connect({\n  messenger,\n  methods: {\n    getData,\n    getSecKey,\n  },\n})\n",null,"import { ErrorCode } from './types.js';\n\nclass PenpalError extends Error {\n  public code: ErrorCode;\n\n  constructor(code: ErrorCode, message: string) {\n    super(message);\n    this.name = 'PenpalError';\n    this.code = code;\n  }\n}\n\nexport default PenpalError;\n","import { SerializedError } from './types.js';\nimport PenpalError from './PenpalError.js';\n\n/**\n * Converts an error object into a plain object.\n */\nexport const serializeError = (error: Error): SerializedError => ({\n  name: error.name,\n  message: error.message,\n  stack: error.stack,\n  penpalCode: error instanceof PenpalError ? error.code : undefined,\n});\n\n/**\n * Converts a plain object into an error object.\n */\nexport const deserializeError = ({\n  name,\n  message,\n  stack,\n  penpalCode,\n}: SerializedError): Error => {\n  const deserializedError = penpalCode\n    ? new PenpalError(penpalCode, message)\n    : new Error(message);\n\n  deserializedError.name = name;\n  deserializedError.stack = stack;\n\n  return deserializedError;\n};\n","const brand: unique symbol = Symbol('Reply');\n\nclass Reply<T = unknown> {\n  readonly value: T;\n  readonly transferables?: Transferable[];\n\n  // Allows TypeScript to distinguish between an actual instance of this\n  // class versus an object that looks structurally similar.\n  // eslint-disable-next-line no-unused-private-class-members\n  #brand = brand;\n\n  constructor(\n    value: T,\n    options?: {\n      transferables?: Transferable[];\n    }\n  ) {\n    this.value = value;\n    this.transferables = options?.transferables;\n  }\n}\n\nexport default Reply;\n","export default 'penpal' as const;\n","import namespace from './namespace.js';\nimport {\n  Ack2Message,\n  CallMessage,\n  Message,\n  ReplyMessage,\n  Ack1Message,\n  SynMessage,\n  DestroyMessage,\n} from './types.js';\n\nexport const isObject = (\n  value: unknown\n): value is Record<string | number | symbol, unknown> => {\n  return typeof value === 'object' && value !== null;\n};\n\nexport const isFunction = (value: unknown) => {\n  return typeof value === 'function';\n};\n\nexport const isMessage = (data: unknown): data is Message => {\n  return isObject(data) && data.namespace === namespace;\n};\n\nexport const isSynMessage = (message: Message): message is SynMessage => {\n  return message.type === 'SYN';\n};\n\nexport const isAck1Message = (message: Message): message is Ack1Message => {\n  return message.type === 'ACK1';\n};\n\nexport const isAck2Message = (message: Message): message is Ack2Message => {\n  return message.type === 'ACK2';\n};\n\nexport const isCallMessage = (message: Message): message is CallMessage => {\n  return message.type === 'CALL';\n};\n\nexport const isReplyMessage = (message: Message): message is ReplyMessage => {\n  return message.type === 'REPLY';\n};\n\nexport const isDestroyMessage = (\n  message: Message\n): message is DestroyMessage => {\n  return message.type === 'DESTROY';\n};\n","import { MethodPath, Methods } from './types.js';\nimport { isFunction, isObject } from './guards.js';\n\n// TODO: Used for backward-compatibility. Remove in next major version.\n/**\n * Given an object of (nested) keys to functions, extract paths to each function.\n *\n * @example\n * Given this Method object:\n * {\n *   one: {\n *     two: () => {}\n *   }\n *   three: () => {}\n * }\n *\n * the extracted MethodPath[] would be:\n * [\n *   ['one', 'two'],\n *   ['three']\n * ]\n */\nexport const extractMethodPathsFromMethods = (\n  methods: Methods,\n  currentPath: MethodPath = []\n) => {\n  const methodPaths: MethodPath[] = [];\n\n  for (const key of Object.keys(methods)) {\n    const value = methods[key];\n\n    if (isFunction(value)) {\n      methodPaths.push([...currentPath, key]);\n    } else if (isObject(value)) {\n      methodPaths.push(\n        ...extractMethodPathsFromMethods(value, [...currentPath, key])\n      );\n    }\n  }\n\n  return methodPaths;\n};\n\nexport const getMethodAtMethodPath = (\n  methodPath: MethodPath,\n  methods: Methods\n) => {\n  const result = methodPath.reduce<Methods | Function | undefined>(\n    (acc, pathSegment) => {\n      return isObject(acc) ? acc[pathSegment] : undefined;\n    },\n    methods\n  );\n\n  return isFunction(result) ? result : undefined;\n};\n\nexport const formatMethodPath = (methodPath: MethodPath) => {\n  return methodPath.join('.');\n};\n","import { serializeError } from './errorSerialization.js';\nimport { Message, ReplyMessage, Methods, Log } from './types.js';\nimport Reply from './Reply.js';\nimport Messenger from './messengers/Messenger.js';\nimport PenpalError from './PenpalError.js';\nimport {\n  formatMethodPath,\n  getMethodAtMethodPath,\n} from './methodSerialization.js';\nimport { isCallMessage } from './guards.js';\nimport namespace from './namespace.js';\n\nconst createErrorReplyMessage = (\n  channel: string | undefined,\n  callId: string,\n  error: unknown\n): ReplyMessage => ({\n  namespace,\n  channel,\n  type: 'REPLY',\n  callId,\n  isError: true,\n  ...(error instanceof Error\n    ? { value: serializeError(error), isSerializedErrorInstance: true }\n    : { value: error }),\n});\n\n/**\n * Listens for \"call\" messages from the remote, executes the corresponding method,\n * and responds with the return value or error.\n */\nconst connectCallHandler = (\n  messenger: Messenger,\n  methods: Methods,\n  channel: string | undefined,\n  log: Log | undefined\n) => {\n  let isDestroyed = false;\n\n  const handleMessage = async (message: Message) => {\n    if (isDestroyed) {\n      // It's possible to throw an error here, but it would only be catchable\n      // using window.onerror since we're in an asynchronously-called function.\n      // There is no method call the consumer is making that they could wrap in\n      // a try-catch. Even if the consumer were to catch the error somehow,\n      // the value of doing so is questionable.\n      return;\n    }\n\n    if (!isCallMessage(message)) {\n      return;\n    }\n\n    log?.(`Received ${formatMethodPath(message.methodPath)}() call`, message);\n\n    const { methodPath, args, id: callId } = message;\n    let replyMessage: ReplyMessage;\n    let transferables: Transferable[] | undefined;\n\n    try {\n      const method = getMethodAtMethodPath(methodPath, methods);\n\n      if (!method) {\n        throw new PenpalError(\n          'METHOD_NOT_FOUND',\n          `Method \\`${formatMethodPath(methodPath)}\\` is not found.`\n        );\n      }\n\n      let value: unknown = await method(...args);\n\n      if (value instanceof Reply) {\n        transferables = value.transferables;\n        value = await value.value;\n      }\n\n      replyMessage = {\n        namespace,\n        channel,\n        type: 'REPLY',\n        callId,\n        value,\n      };\n    } catch (error) {\n      replyMessage = createErrorReplyMessage(channel, callId, error);\n    }\n\n    // Although we checked this at the beginning of the function, we need to\n    // check it again because we've made async calls, and the connection may\n    // have been destroyed in the meantime.\n    if (isDestroyed) {\n      return;\n    }\n\n    try {\n      log?.(`Sending ${formatMethodPath(methodPath)}() reply`, replyMessage);\n      messenger.sendMessage(replyMessage, transferables);\n    } catch (error) {\n      // If a consumer attempts to send an object that's not\n      // cloneable (e.g., window), we want to ensure the receiver's promise\n      // gets rejected.\n      if ((error as Error).name === 'DataCloneError') {\n        replyMessage = createErrorReplyMessage(channel, callId, error as Error);\n        log?.(`Sending ${formatMethodPath(methodPath)}() reply`, replyMessage);\n        messenger.sendMessage(replyMessage);\n      }\n      throw error;\n    }\n  };\n\n  messenger.addMessageHandler(handleMessage);\n\n  return () => {\n    isDestroyed = true;\n    messenger.removeMessageHandler(handleMessage);\n  };\n};\n\nexport default connectCallHandler;\n","/**\n * @return A unique ID\n */\n// crypto.randomUUID is not available in insecure contexts.\nexport default crypto.randomUUID?.bind(crypto) ??\n  (() =>\n    new Array(4)\n      .fill(0)\n      .map(() =>\n        Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)\n      )\n      .join('-'));\n","const brand: unique symbol = Symbol('CallOptions');\n\nclass CallOptions {\n  readonly transferables?: Transferable[];\n  readonly timeout?: number;\n\n  // Allows TypeScript to distinguish between an actual instance of this\n  // class versus an object that looks structurally similar.\n  // eslint-disable-next-line no-unused-private-class-members\n  #brand = brand;\n\n  constructor(options?: { transferables?: Transferable[]; timeout?: number }) {\n    this.transferables = options?.transferables;\n    this.timeout = options?.timeout;\n  }\n}\n\nexport default CallOptions;\n","import generateId from './generateId.js';\nimport { deserializeError } from './errorSerialization.js';\nimport { formatMethodPath } from './methodSerialization.js';\nimport {\n  Message,\n  RemoteProxy,\n  Methods,\n  MethodPath,\n  CallMessage,\n  Log,\n} from './types.js';\nimport CallOptions from './CallOptions.js';\nimport Messenger from './messengers/Messenger.js';\nimport PenpalError from './PenpalError.js';\nimport { isReplyMessage } from './guards.js';\nimport namespace from './namespace.js';\n\ntype ReplyHandler = {\n  methodPath: MethodPath;\n  resolve: (value: unknown) => void;\n  reject: (reason: unknown) => void;\n  timeoutId?: number;\n};\n\nconst methodsToTreatAsNative = new Set(['apply', 'call', 'bind']);\n\nconst createRemoteProxy = (\n  callback: (path: MethodPath, args: unknown[]) => void,\n  log?: Log,\n  path: MethodPath = []\n): Methods => {\n  return new Proxy(\n    path.length\n      ? () => {\n          // Intentionally empty\n        }\n      : Object.create(null),\n    {\n      get(target, prop: string) {\n        // If a promise is resolved with this proxy object, the JavaScript\n        // runtime will look for a `then` property on this object to determine\n        // if it should be treated as a promise (to support promise chaining).\n        // If we don't return undefined here, the JavaScript runtime will treat\n        // this object as a promise and attempt to call `then`, which will\n        // then send a call message to the remote. This is not what we want.\n        if (prop === 'then') {\n          return;\n        }\n\n        // Because we're using a proxy and because Penpal supports developers\n        // exposing nested methods, we have a predicament. If a developer\n        // calls, for example, remote.auth.apply(), are they\n        // attempting to call a nested apply() method that a developer has\n        // explicitly exposed from the remote? Could they instead be attempting\n        // to call Function.prototype.apply() on the remote.auth() method?\n        // Without the remote telling the local Penpal which methods the\n        // developer has exposed, it has no way of knowing (and the main reason\n        // we use a proxy is so that Penpal doesn't have to communicate which\n        // methods are exposed). So, we treat certain methods as native methods\n        // and return the native method rather than a proxy. The downside of\n        // this is that if a developer has explicitly exposed a nested method\n        // with the same name as one of these native method names, the developer\n        // will be unable to call the exposed remote method because they will\n        // be calling the method on the Function prototype instead.\n        if (path.length && methodsToTreatAsNative.has(prop)) {\n          return Reflect.get(target, prop);\n        }\n\n        return createRemoteProxy(callback, log, [...path, prop]);\n      },\n      apply(target, _thisArg, args) {\n        return callback(path, args);\n      },\n    }\n  );\n};\n\nconst getDestroyedConnectionMethodCallError = (methodPath: MethodPath) => {\n  return new PenpalError(\n    'CONNECTION_DESTROYED',\n    `Method call ${formatMethodPath(\n      methodPath\n    )}() failed due to destroyed connection`\n  );\n};\n\n/**\n * Creates a proxy. When methods are called on the proxy, a \"call\" message will\n * be sent to the remote, the remote's corresponding method will be\n * executed, and the method's return value will be returned via a message.\n */\nconst connectRemoteProxy = <TMethods extends Methods>(\n  messenger: Messenger,\n  channel: string | undefined,\n  log: Log | undefined\n) => {\n  let isDestroyed = false;\n  const replyHandlers = new Map<string, ReplyHandler>();\n\n  const handleMessage = (message: Message) => {\n    if (!isReplyMessage(message)) {\n      return;\n    }\n\n    const { callId, value, isError, isSerializedErrorInstance } = message;\n    const replyHandler = replyHandlers.get(callId);\n\n    if (!replyHandler) {\n      return;\n    }\n\n    replyHandlers.delete(callId);\n    log?.(\n      `Received ${formatMethodPath(replyHandler.methodPath)}() call`,\n      message\n    );\n\n    if (isError) {\n      replyHandler.reject(\n        isSerializedErrorInstance ? deserializeError(value) : value\n      );\n    } else {\n      replyHandler.resolve(value);\n    }\n  };\n\n  messenger.addMessageHandler(handleMessage);\n\n  const remoteProxy = createRemoteProxy((methodPath, args) => {\n    if (isDestroyed) {\n      throw getDestroyedConnectionMethodCallError(methodPath);\n    }\n\n    const callId = generateId();\n    const lastArg = args[args.length - 1];\n    const lastArgIsOptions = lastArg instanceof CallOptions;\n    const { timeout, transferables } = lastArgIsOptions ? lastArg : {};\n    const argsWithoutOptions = lastArgIsOptions ? args.slice(0, -1) : args;\n\n    return new Promise((resolve, reject) => {\n      // We reference `window.setTimeout` instead of just `setTimeout`\n      // so that the TypeScript engine doesn't\n      // get confused when running tests. Something within\n      // Karma + @rollup/plugin-typescript leaks node types into source\n      // files when running tests. Node's setTimeout has a return type of\n      // Timeout rather than number, resulting in a build error when\n      // running tests if we don't disambiguate the browser setTimeout\n      // from node's setTimeout. There may be a better way to configure\n      // Karma + Rollup + Typescript to avoid node type leakage.\n      const timeoutId =\n        timeout !== undefined\n          ? window.setTimeout(() => {\n              replyHandlers.delete(callId);\n              reject(\n                new PenpalError(\n                  'METHOD_CALL_TIMEOUT',\n                  `Method call ${formatMethodPath(\n                    methodPath\n                  )}() timed out after ${timeout}ms`\n                )\n              );\n            }, timeout)\n          : undefined;\n\n      replyHandlers.set(callId, { methodPath, resolve, reject, timeoutId });\n\n      try {\n        const callMessage: CallMessage = {\n          namespace,\n          channel,\n          type: 'CALL',\n          id: callId,\n          methodPath,\n          args: argsWithoutOptions,\n        };\n        log?.(`Sending ${formatMethodPath(methodPath)}() call`, callMessage);\n        messenger.sendMessage(callMessage, transferables);\n      } catch (error) {\n        reject(\n          new PenpalError('TRANSMISSION_FAILED', (error as Error).message)\n        );\n      }\n    });\n  }, log) as RemoteProxy<TMethods>;\n\n  const destroy = () => {\n    isDestroyed = true;\n    messenger.removeMessageHandler(handleMessage);\n\n    for (const { methodPath, reject, timeoutId } of replyHandlers.values()) {\n      clearTimeout(timeoutId);\n      reject(getDestroyedConnectionMethodCallError(methodPath));\n    }\n\n    replyHandlers.clear();\n  };\n\n  return {\n    remoteProxy,\n    destroy,\n  };\n};\n\nexport default connectRemoteProxy;\n","// Just use the native Promise.withResolvers() once it gains a bit more\n// adoption. Safari was the last major browser to support it, which happened\n// on March 5, 2024 in Safari 17.4.\nconst getPromiseWithResolvers = <ResolvedValueType, RejectedValueType>() => {\n  let resolve: (value: ResolvedValueType) => void;\n  let reject: (error: RejectedValueType) => void;\n\n  const promise = new Promise<ResolvedValueType>((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n\n  return {\n    promise,\n    resolve: resolve!,\n    reject: reject!,\n  };\n};\n\nexport default getPromiseWithResolvers;\n","/**\n * Error class that is thrown when we've reached a situation that we believe to\n * be a bug in Penpal and not anything the consumer has done.\n */\nclass PenpalBugError extends Error {\n  constructor(message: string) {\n    super(\n      `You've hit a bug in Penpal. Please file an issue with the following information: ${message}`\n    );\n  }\n}\n\nexport default PenpalBugError;\n","import { Message, MethodPath } from './types.js';\nimport namespace from './namespace.js';\nimport {\n  isCallMessage,\n  isReplyMessage,\n  isAck1Message,\n  isObject,\n} from './guards.js';\nimport PenpalBugError from './PenpalBugError.js';\n\nexport const DEPRECATED_PENPAL_PARTICIPANT_ID = 'deprecated-penpal';\n\n// TODO: This file is used for backward-compatibility. Remove in next major version.\n\nenum DeprecatedMessageType {\n  Call = 'call',\n  Reply = 'reply',\n  Syn = 'syn',\n  SynAck = 'synAck',\n  Ack = 'ack',\n}\n\nenum DeprecatedResolution {\n  Fulfilled = 'fulfilled',\n  Rejected = 'rejected',\n}\n\ntype DeprecatedSynMessage = {\n  penpal: DeprecatedMessageType.Syn;\n};\n\ntype DeprecatedSynAckMessage = {\n  penpal: DeprecatedMessageType.SynAck;\n  methodNames: string[];\n};\n\ntype DeprecatedAckMessage = {\n  penpal: DeprecatedMessageType.Ack;\n  methodNames: string[];\n};\n\ntype DeprecatedCallMessage = {\n  penpal: DeprecatedMessageType.Call;\n  id: number;\n  methodName: string;\n  args: unknown[];\n};\n\ntype DeprecatedSerializedError = {\n  name: string;\n  message: string;\n  stack?: string;\n};\n\ntype DeprecatedReplyMessage = {\n  penpal: DeprecatedMessageType.Reply;\n  id: number;\n} & (\n  | {\n      resolution: DeprecatedResolution.Fulfilled;\n      returnValue: unknown;\n      returnValueIsError?: false;\n    }\n  | {\n      resolution: DeprecatedResolution.Rejected;\n      returnValue: unknown;\n      returnValueIsError?: false;\n    }\n  | {\n      resolution: DeprecatedResolution.Rejected;\n      returnValue: DeprecatedSerializedError;\n      returnValueIsError: true;\n    }\n);\n\nexport type DeprecatedMessage =\n  | DeprecatedSynMessage\n  | DeprecatedSynAckMessage\n  | DeprecatedAckMessage\n  | DeprecatedCallMessage\n  | DeprecatedReplyMessage;\n\nexport const isDeprecatedMessage = (\n  data: unknown\n): data is DeprecatedMessage => {\n  return isObject(data) && 'penpal' in data;\n};\n\nconst upgradeMethodPath = (methodPath: string): MethodPath =>\n  methodPath.split('.');\nconst downgradeMethodPath = (methodPath: MethodPath) => methodPath.join('.');\n\nconst getUnexpectedMessageError = (message: unknown) => {\n  return new PenpalBugError(\n    `Unexpected message to translate: ${JSON.stringify(message)}`\n  );\n};\n\nexport const upgradeMessage = (message: DeprecatedMessage): Message => {\n  if (message.penpal === DeprecatedMessageType.Syn) {\n    return {\n      namespace,\n      channel: undefined,\n      type: 'SYN',\n      participantId: DEPRECATED_PENPAL_PARTICIPANT_ID,\n    };\n  }\n\n  if (message.penpal === DeprecatedMessageType.Ack) {\n    return {\n      namespace,\n      channel: undefined,\n      type: 'ACK2',\n    };\n  }\n\n  if (message.penpal === DeprecatedMessageType.Call) {\n    return {\n      namespace,\n      channel: undefined,\n      type: 'CALL',\n      // Actually converting the ID to a string would break communication.\n      id: (message.id as unknown) as string,\n      methodPath: upgradeMethodPath(message.methodName),\n      args: message.args,\n    };\n  }\n\n  if (message.penpal === DeprecatedMessageType.Reply) {\n    if (message.resolution === DeprecatedResolution.Fulfilled) {\n      return {\n        namespace,\n        channel: undefined,\n        type: 'REPLY',\n        // Actually converting the ID to a string would break communication.\n        callId: (message.id as unknown) as string,\n        value: message.returnValue,\n      };\n    } else {\n      return {\n        namespace,\n        channel: undefined,\n        type: 'REPLY',\n        // Actually converting the ID to a string would break communication.\n        callId: (message.id as unknown) as string,\n        isError: true,\n        ...(message.returnValueIsError\n          ? {\n              value: message.returnValue,\n              isSerializedErrorInstance: true,\n            }\n          : {\n              value: message.returnValue,\n            }),\n      };\n    }\n  }\n\n  throw getUnexpectedMessageError(message);\n};\n\nexport const downgradeMessage = (message: Message): DeprecatedMessage => {\n  if (isAck1Message(message)) {\n    return {\n      penpal: DeprecatedMessageType.SynAck,\n      methodNames: message.methodPaths.map(downgradeMethodPath),\n    };\n  }\n\n  if (isCallMessage(message)) {\n    return {\n      penpal: DeprecatedMessageType.Call,\n      // Actually converting the ID to a number would break communication.\n      id: (message.id as unknown) as number,\n      methodName: downgradeMethodPath(message.methodPath),\n      args: message.args,\n    };\n  }\n\n  if (isReplyMessage(message)) {\n    if (message.isError) {\n      return {\n        penpal: DeprecatedMessageType.Reply,\n        // Actually converting the ID to a number would break communication.\n        id: (message.callId as unknown) as number,\n        resolution: DeprecatedResolution.Rejected,\n        ...(message.isSerializedErrorInstance\n          ? {\n              returnValue: message.value,\n              returnValueIsError: true,\n            }\n          : { returnValue: message.value }),\n      };\n    } else {\n      return {\n        penpal: DeprecatedMessageType.Reply,\n        // Actually converting the ID to a number would break communication.\n        id: (message.callId as unknown) as number,\n        resolution: DeprecatedResolution.Fulfilled,\n        returnValue: message.value,\n      };\n    }\n  }\n\n  throw getUnexpectedMessageError(message);\n};\n","import Messenger from './messengers/Messenger.js';\nimport {\n  Ack2Message,\n  Methods,\n  Message,\n  RemoteProxy,\n  Ack1Message,\n  SynMessage,\n  Log,\n} from './types.js';\nimport PenpalError from './PenpalError.js';\nimport connectCallHandler from './connectCallHandler.js';\nimport connectRemoteProxy from './connectRemoteProxy.js';\nimport { isAck2Message, isAck1Message, isSynMessage } from './guards.js';\nimport getPromiseWithResolvers from './getPromiseWithResolvers.js';\nimport { extractMethodPathsFromMethods } from './methodSerialization.js';\nimport generateId from './generateId.js';\nimport { DEPRECATED_PENPAL_PARTICIPANT_ID } from './backwardCompatibility.js';\nimport namespace from './namespace.js';\n\ntype Options = {\n  messenger: Messenger;\n  methods: Methods;\n  timeout: number | undefined;\n  channel: string | undefined;\n  log: Log | undefined;\n};\n\ntype HandshakeResult<TMethods extends Methods> = {\n  remoteProxy: RemoteProxy<TMethods>;\n  destroy: () => void;\n};\n\n/**\n * Attempts to establish communication with the remote via a handshake protocol.\n * The handshake protocol fulfills a few requirements:\n *\n * 1. One participant in the handshake may not be available when the other\n *    participant starts the handshake. For example, a document inside an iframe\n *    may not be loaded when the parent window starts a handshake.\n * 2. While #1 could be solved by having the consumer of Penpal specify which\n *    participant should initiate the handshake, we'd rather avoid this\n *    unnecessary cognitive load.\n * 3. While #1 could be solved by having the consumer of Penpal specify which\n *    participant is the \"parent\" or \"child\" and then having Penpal assume\n *    the child should initiate the handshake, we'd rather avoid parent-child\n *    terminology since Penpal can support communication between two\n *    participants where neither would be considered a parent nor child. It may\n *    also be too presumptive that the child should always initiate the\n *    handshake.\n * 4. For robustness, each participant must know that the other participant is\n *    receiving its messages for the handshake to be considered complete.\n * 5. The handshake should support a participant attempting to\n *    re-establish the connection. This can occur, for example, if an end user\n *    were to right-click within an iframe and click reload.\n * 6. The handshake should allow a Messenger to easily attach something to\n *    a handshake message from one participant to the other unidirectionally\n *    (rather than from both participants to each other).\n *    This is important when a participant needs to be in charge of, for\n *    example, creating a MessageChannel and sending one MessagePort from the\n *    MessagePort pair to the other participant. If both participants attempted\n *    to do this it could lead to confusion.\n * 7. The handshake ideally shouldn't require sending handshake messages on an\n *    interval (retrying until the other participant is ready to receive them).\n *    Intervals can increase compute resources if the interval is too short\n *    or increase latency if the interval is too long. While we could make this\n *    configurable, it's additional mental load for the consumer. Additionally,\n *    setInterval and setTimeout are not available within some contexts\n *    (like AudioWorklet), where a consumer may like to use Penpal.\n *\n * To accomplish these requirements, the handshake protocol is as follows:\n * 1. Each participant generates a random participant ID.\n * 2. As soon as possible, each participant sends a SYN message containing its\n *    participant ID to the other participant.\n * 3. When the SYN messages were sent, one of the participants may not have\n *    been ready to receive the SYN message from the other. At least one\n *    of the participants was ready, however, and should have received a SYN\n *    message from the other participant. Each participant that did receive\n *    a SYN message knows for sure that the other participant is now ready\n *    to receive a SYN message, so it will send another SYN message in case\n *    the other participant did not receive the first SYN message. This\n *    ultimately results in each participant sending two SYN messages.\n * 4. Each participant now should have received at least one SYN message from\n *    the other participant. Each participant compares their own ID with the\n *    other participant's ID. Whichever participant has the higher ID\n *    (using a simple string comparison) is considered the handshake leader\n *    and will send an ACK1 message to the other participant.\n * 5. At this point, the handshake leader does not know whether the other\n *    participant is actually receiving messages. The participant receiving\n *    the ACK1 message will respond with an ACK2, informing the handshake\n *    leader that it is indeed receiving messages.\n * 6. At this point, both participants know the other is receiving messages\n *    and the handshake is complete.\n */\nconst shakeHands = <TMethods extends Methods>({\n  messenger,\n  methods,\n  timeout,\n  channel,\n  log,\n}: Options): Promise<HandshakeResult<TMethods>> => {\n  const participantId = generateId();\n  let remoteParticipantId: string;\n  const destroyHandlers: (() => void)[] = [];\n  let isComplete = false;\n\n  const methodPaths = extractMethodPathsFromMethods(methods);\n\n  const { promise, resolve, reject } = getPromiseWithResolvers<\n    HandshakeResult<TMethods>,\n    PenpalError\n  >();\n\n  const timeoutId =\n    timeout !== undefined\n      ? setTimeout(() => {\n          reject(\n            new PenpalError(\n              'CONNECTION_TIMEOUT',\n              `Connection timed out after ${timeout}ms`\n            )\n          );\n        }, timeout)\n      : undefined;\n\n  const destroy = () => {\n    for (const destroyHandler of destroyHandlers) {\n      destroyHandler();\n    }\n  };\n\n  const connectCallHandlerAndMethodProxies = () => {\n    if (isComplete) {\n      // If we get here, it means the remote is attempting to re-connect. While\n      // that's supported, we don't need to run the rest of this function again.\n      return;\n    }\n\n    destroyHandlers.push(connectCallHandler(messenger, methods, channel, log));\n\n    const { remoteProxy, destroy: destroyMethodProxies } = connectRemoteProxy<\n      TMethods\n    >(messenger, channel, log);\n\n    destroyHandlers.push(destroyMethodProxies);\n\n    clearTimeout(timeoutId);\n    isComplete = true;\n\n    resolve({\n      remoteProxy,\n      destroy: destroy,\n    });\n  };\n\n  const sendSynMessage = () => {\n    const synMessage: SynMessage = {\n      namespace,\n      type: 'SYN',\n      channel,\n      participantId: participantId,\n    };\n    log?.(`Sending handshake SYN`, synMessage);\n\n    try {\n      messenger.sendMessage(synMessage);\n    } catch (error) {\n      reject(new PenpalError('TRANSMISSION_FAILED', (error as Error).message));\n    }\n  };\n\n  const handleSynMessage = (message: SynMessage) => {\n    log?.(`Received handshake SYN`, message);\n\n    if (\n      message.participantId === remoteParticipantId &&\n      // TODO: Used for backward-compatibility. Remove in next major version.\n      remoteParticipantId !== DEPRECATED_PENPAL_PARTICIPANT_ID\n    ) {\n      return;\n    }\n\n    remoteParticipantId = message.participantId;\n\n    // We send another SYN message in case the other participant was not ready\n    // when we sent the first SYN message.\n    sendSynMessage();\n\n    const isHandshakeLeader =\n      participantId > remoteParticipantId ||\n      // TODO: Used for backward-compatibility. Remove in next major version.\n      remoteParticipantId === DEPRECATED_PENPAL_PARTICIPANT_ID;\n\n    if (!isHandshakeLeader) {\n      return;\n    }\n\n    const ack1Message: Ack1Message = {\n      namespace,\n      channel,\n      type: 'ACK1',\n      methodPaths,\n    };\n    log?.(`Sending handshake ACK1`, ack1Message);\n\n    try {\n      messenger.sendMessage(ack1Message);\n    } catch (error) {\n      reject(new PenpalError('TRANSMISSION_FAILED', (error as Error).message));\n      return;\n    }\n  };\n\n  const handleAck1Message = (message: Ack1Message) => {\n    log?.(`Received handshake ACK1`, message);\n    const ack2Message: Ack2Message = {\n      namespace,\n      channel,\n      type: 'ACK2',\n    };\n    log?.(`Sending handshake ACK2`, ack2Message);\n\n    try {\n      messenger.sendMessage(ack2Message);\n    } catch (error) {\n      reject(new PenpalError('TRANSMISSION_FAILED', (error as Error).message));\n      return;\n    }\n\n    connectCallHandlerAndMethodProxies();\n  };\n\n  const handleAck2Message = (message: Ack2Message) => {\n    log?.(`Received handshake ACK2`, message);\n    connectCallHandlerAndMethodProxies();\n  };\n\n  const handleMessage = (message: Message) => {\n    if (isSynMessage(message)) {\n      handleSynMessage(message);\n    }\n\n    if (isAck1Message(message)) {\n      handleAck1Message(message);\n    }\n\n    if (isAck2Message(message)) {\n      handleAck2Message(message);\n    }\n  };\n\n  messenger.addMessageHandler(handleMessage);\n  destroyHandlers.push(() => messenger.removeMessageHandler(handleMessage));\n\n  sendSynMessage();\n\n  return promise;\n};\n\nexport default shakeHands;\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst once = <T extends (...args: any[]) => any>(\n  fn: T\n): ((...args: Parameters<T>) => ReturnType<T>) => {\n  let isCalled = false;\n  let result: ReturnType<T>;\n\n  return (...args: Parameters<T>): ReturnType<T> => {\n    if (!isCalled) {\n      isCalled = true;\n      result = fn(...args);\n    }\n    return result;\n  };\n};\n\nexport default once;\n","import { DestroyMessage, Connection, Log, Message, Methods } from './types.js';\nimport PenpalError from './PenpalError.js';\nimport Messenger from './messengers/Messenger.js';\nimport shakeHands from './shakeHands.js';\nimport { isDestroyMessage, isMessage } from './guards.js';\nimport once from './once.js';\nimport namespace from './namespace.js';\n\ntype Options = {\n  /**\n   * Messenger in charge of handling communication with the remote.\n   */\n  messenger: Messenger;\n  /**\n   * Methods that may be called by the remote.\n   */\n  methods?: Methods;\n  /**\n   * The amount of time, in milliseconds, Penpal should wait\n   * for a connection to be established before rejecting the connection promise.\n   */\n  timeout?: number;\n  /**\n   * A string identifier that disambiguates communication when establishing\n   * multiple, parallel connections between two participants (e.g., two windows,\n   * a window and a worker).\n   */\n  channel?: string;\n  /**\n   * A function for logging debug messages. Debug messages will only be\n   * logged when this is defined.\n   */\n  log?: Log;\n};\n\nconst usedMessengers = new WeakSet<Messenger>();\n\n/**\n * Attempts to establish communication with the remote.\n */\nconst connect = <TMethods extends Methods>({\n  messenger,\n  methods = {},\n  timeout,\n  channel,\n  log,\n}: Options): Connection<TMethods> => {\n  if (!messenger) {\n    throw new PenpalError('INVALID_ARGUMENT', 'messenger must be defined');\n  }\n\n  if (usedMessengers.has(messenger)) {\n    throw new PenpalError(\n      'INVALID_ARGUMENT',\n      'A messenger can only be used for a single connection'\n    );\n  }\n\n  usedMessengers.add(messenger);\n\n  const connectionDestroyedHandlers: (() => void)[] = [messenger.destroy];\n\n  const destroyConnection = once((notifyOtherParticipant: boolean) => {\n    if (notifyOtherParticipant) {\n      const destroyMessage: DestroyMessage = {\n        namespace,\n        channel,\n        type: 'DESTROY',\n      };\n\n      try {\n        messenger.sendMessage(destroyMessage);\n      } catch (_) {\n        // We do our best to notify the other participant of the connection, but\n        // if there's an error in doing so (e.g., maybe the handshake hasn't\n        // completed and a messenger can't send the message), it's probably not\n        // worth bothering the consumer with an error.\n      }\n    }\n\n    for (const connectionDestroyedHandler of connectionDestroyedHandlers) {\n      connectionDestroyedHandler();\n    }\n\n    log?.('Connection destroyed');\n  });\n\n  const validateReceivedMessage = (data: unknown): data is Message => {\n    return isMessage(data) && data.channel === channel;\n  };\n\n  const promise = (async () => {\n    try {\n      messenger.initialize({ log, validateReceivedMessage });\n      messenger.addMessageHandler((message) => {\n        if (isDestroyMessage(message)) {\n          destroyConnection(false);\n        }\n      });\n\n      const { remoteProxy, destroy } = await shakeHands<TMethods>({\n        messenger,\n        methods,\n        timeout,\n        channel,\n        log,\n      });\n      connectionDestroyedHandlers.push(destroy);\n      return remoteProxy;\n    } catch (error) {\n      destroyConnection(true);\n      throw error as PenpalError;\n    }\n  })();\n\n  return {\n    promise,\n    // Why we don't reject the connection promise when consumer calls destroy():\n    // https://github.com/Aaronius/penpal/issues/51\n    destroy: () => {\n      destroyConnection(true);\n    },\n  };\n};\n\nexport default connect;\n","import { Log, Message } from '../types.js';\nimport Messenger, {\n  InitializeMessengerOptions,\n  MessageHandler,\n} from './Messenger.js';\nimport {\n  downgradeMessage,\n  isDeprecatedMessage,\n  upgradeMessage,\n} from '../backwardCompatibility.js';\nimport { isAck2Message, isAck1Message, isSynMessage } from '../guards.js';\nimport PenpalError from '../PenpalError.js';\nimport PenpalBugError from '../PenpalBugError.js';\n\ntype Options = {\n  /**\n   * The window with which the current window will communicate.\n   */\n  remoteWindow: Window;\n  /**\n   * An array of strings or regular expressions defining to which origins\n   * communication will be allowed. If not provided, communication will be\n   * restricted to the origin of the current page. You may specify an allowed\n   * origin of `*` to not restrict communication, but beware the risks of\n   * doing so.\n   */\n  allowedOrigins?: (string | RegExp)[];\n};\n\n/**\n * Handles the details of communicating with a child window.\n */\nclass WindowMessenger implements Messenger {\n  readonly #remoteWindow: Window;\n  readonly #allowedOrigins: [string | RegExp, ...(string | RegExp)[]];\n  #log?: Log;\n  #validateReceivedMessage?: (data: unknown) => data is Message;\n  #concreteRemoteOrigin?: string;\n  #messageCallbacks = new Set<(message: Message) => void>();\n  #port?: MessagePort;\n  // TODO: Used for backward-compatibility. Remove in next major version.\n  #isChildUsingDeprecatedProtocol = false;\n\n  constructor({ remoteWindow, allowedOrigins }: Options) {\n    if (!remoteWindow) {\n      throw new PenpalError('INVALID_ARGUMENT', 'remoteWindow must be defined');\n    }\n\n    this.#remoteWindow = remoteWindow;\n    this.#allowedOrigins = allowedOrigins?.length\n      ? (allowedOrigins as [string | RegExp, ...(string | RegExp)[]])\n      : [window.origin];\n  }\n\n  initialize = ({\n    log,\n    validateReceivedMessage,\n  }: InitializeMessengerOptions) => {\n    this.#log = log;\n    this.#validateReceivedMessage = validateReceivedMessage;\n    window.addEventListener('message', this.#handleMessageFromRemoteWindow);\n  };\n\n  sendMessage = (message: Message, transferables?: Transferable[]): void => {\n    if (isSynMessage(message)) {\n      const originForSending = this.#getOriginForSendingMessage(message);\n      this.#remoteWindow.postMessage(message, {\n        targetOrigin: originForSending,\n        transfer: transferables,\n      });\n      return;\n    }\n\n    if (\n      isAck1Message(message) ||\n      // If the child is using a previous version of Penpal, we need to\n      // downgrade the message and send it through the window rather than\n      // the port because older versions of Penpal don't use MessagePorts.\n      this.#isChildUsingDeprecatedProtocol\n    ) {\n      const payload = this.#isChildUsingDeprecatedProtocol\n        ? downgradeMessage(message)\n        : message;\n      const originForSending = this.#getOriginForSendingMessage(message);\n      this.#remoteWindow.postMessage(payload, {\n        targetOrigin: originForSending,\n        transfer: transferables,\n      });\n      return;\n    }\n\n    if (isAck2Message(message)) {\n      const { port1, port2 } = new MessageChannel();\n      this.#port = port1;\n      port1.addEventListener('message', this.#handleMessageFromPort);\n      port1.start();\n      const transferablesToSend = [port2, ...(transferables || [])];\n      const originForSending = this.#getOriginForSendingMessage(message);\n      this.#remoteWindow.postMessage(message, {\n        targetOrigin: originForSending,\n        transfer: transferablesToSend,\n      });\n      return;\n    }\n\n    if (this.#port) {\n      this.#port.postMessage(message, {\n        transfer: transferables,\n      });\n      return;\n    }\n\n    throw new PenpalBugError('Port is undefined');\n  };\n\n  addMessageHandler = (callback: MessageHandler): void => {\n    this.#messageCallbacks.add(callback);\n  };\n\n  removeMessageHandler = (callback: MessageHandler): void => {\n    this.#messageCallbacks.delete(callback);\n  };\n\n  destroy = () => {\n    window.removeEventListener('message', this.#handleMessageFromRemoteWindow);\n    this.#destroyPort();\n    this.#messageCallbacks.clear();\n  };\n\n  #isAllowedOrigin = (origin: string) => {\n    return this.#allowedOrigins.some((allowedOrigin) =>\n      allowedOrigin instanceof RegExp\n        ? allowedOrigin.test(origin)\n        : allowedOrigin === origin || allowedOrigin === '*'\n    );\n  };\n\n  #getOriginForSendingMessage = (message: Message) => {\n    // It's safe to send the SYN message to any origin because it doesn't contain\n    // anything sensitive. When Penpal receives a SYN message, the origin on\n    // the message (which we call the concrete origin) is validated against the\n    // configured allowed origins. All subsequent messages will be sent to the\n    // concrete origin.\n    // If you decide to change this, consider https://github.com/Aaronius/penpal/issues/103\n    if (isSynMessage(message)) {\n      return '*';\n    }\n\n    if (!this.#concreteRemoteOrigin) {\n      throw new PenpalBugError('Concrete remote origin not set');\n    }\n\n    // If the concrete remote origin (the origin we received from the remote\n    // on a prior message) is 'null', it means the remote is within\n    // an \"opaque origin\". The only way to post a message to an\n    // opaque origin is by using '*'. This does carry some security risk,\n    // so we only do this if the consumer has specifically defined '*' as\n    // an allowed origin. Opaque origins occur, for example, when\n    // loading an HTML document directly from the filesystem (not a\n    // web server) or through a data URI.\n    return this.#concreteRemoteOrigin === 'null' &&\n      this.#allowedOrigins.includes('*')\n      ? '*'\n      : this.#concreteRemoteOrigin;\n  };\n\n  #destroyPort = () => {\n    this.#port?.removeEventListener('message', this.#handleMessageFromPort);\n    this.#port?.close();\n    this.#port = undefined;\n  };\n\n  #handleMessageFromRemoteWindow = ({\n    source,\n    origin,\n    ports,\n    data,\n  }: MessageEvent): void => {\n    if (source !== this.#remoteWindow) {\n      return;\n    }\n\n    // TODO: Used for backward-compatibility. Remove in next major version.\n    if (isDeprecatedMessage(data)) {\n      this.#log?.(\n        'Please upgrade the child window to the latest version of Penpal.'\n      );\n      this.#isChildUsingDeprecatedProtocol = true;\n      data = upgradeMessage(data);\n    }\n\n    if (!this.#validateReceivedMessage?.(data)) {\n      return;\n    }\n\n    if (!this.#isAllowedOrigin(origin)) {\n      this.#log?.(\n        `Received a message from origin \\`${origin}\\` which did not match ` +\n          `allowed origins \\`[${this.#allowedOrigins.join(', ')}]\\``\n      );\n      return;\n    }\n\n    if (isSynMessage(data)) {\n      // If we receive a SYN message and already have a port, it means\n      // the child is re-connecting, in which case we'll receive a new port.\n      // For this reason, we always make sure we destroy the existing port.\n      this.#destroyPort();\n      this.#concreteRemoteOrigin = origin;\n    }\n\n    if (\n      isAck2Message(data) &&\n      // Previous versions of Penpal don't use MessagePorts and do all\n      // communication through the window.\n      !this.#isChildUsingDeprecatedProtocol\n    ) {\n      this.#port = ports[0];\n\n      if (!this.#port) {\n        throw new PenpalBugError('No port received on ACK2');\n      }\n\n      this.#port.addEventListener('message', this.#handleMessageFromPort);\n      this.#port.start();\n    }\n\n    for (const callback of this.#messageCallbacks) {\n      callback(data);\n    }\n  };\n\n  #handleMessageFromPort = ({ data }: MessageEvent): void => {\n    // Unlike in _handleMessageFromWindow, we don't need to check if\n    // the message is from a deprecated version of Penpal because older versions\n    // of Penpal don't use MessagePorts.\n    if (!this.#validateReceivedMessage?.(data)) {\n      return;\n    }\n\n    for (const callback of this.#messageCallbacks) {\n      callback(data);\n    }\n  };\n}\n\nexport default WindowMessenger;\n","import { Message } from '../types.js';\nimport Messenger, {\n  InitializeMessengerOptions,\n  MessageHandler,\n} from './Messenger.js';\nimport { isAck2Message, isAck1Message, isSynMessage } from '../guards.js';\nimport PenpalError from '../PenpalError.js';\nimport PenpalBugError from '../PenpalBugError.js';\n\n// This is needed to resolve some conflict errors. There may be a better way.\ntype MessageTarget = Pick<\n  Worker,\n  'postMessage' | 'addEventListener' | 'removeEventListener'\n>;\n\ntype Options = {\n  /**\n   * The web worker receiving/sending communication from/to the parent window.\n   * If this messenger is being used within the worker, `worker` should\n   * typically be set to `self`.\n   */\n  worker: Worker | DedicatedWorkerGlobalScope;\n};\n\n/**\n * Handles the details of communicating with a child web worker.\n */\nclass WorkerMessenger implements Messenger {\n  #worker: MessageTarget;\n  #validateReceivedMessage?: (data: unknown) => data is Message;\n  #messageCallbacks = new Set<MessageHandler>();\n  #port?: MessagePort;\n\n  constructor({ worker }: Options) {\n    if (!worker) {\n      throw new PenpalError('INVALID_ARGUMENT', 'worker must be defined');\n    }\n\n    this.#worker = worker;\n  }\n\n  initialize = ({ validateReceivedMessage }: InitializeMessengerOptions) => {\n    this.#validateReceivedMessage = validateReceivedMessage;\n    this.#worker.addEventListener('message', this.#handleMessage);\n  };\n\n  sendMessage = (message: Message, transferables?: Transferable[]): void => {\n    if (isSynMessage(message) || isAck1Message(message)) {\n      this.#worker.postMessage(message, { transfer: transferables });\n      return;\n    }\n\n    if (isAck2Message(message)) {\n      const { port1, port2 } = new MessageChannel();\n      this.#port = port1;\n      port1.addEventListener('message', this.#handleMessage);\n      port1.start();\n\n      this.#worker.postMessage(message, {\n        transfer: [port2, ...(transferables || [])],\n      });\n      return;\n    }\n\n    if (this.#port) {\n      this.#port.postMessage(message, {\n        transfer: transferables,\n      });\n      return;\n    }\n\n    throw new PenpalBugError('Port is undefined');\n  };\n\n  addMessageHandler = (callback: MessageHandler): void => {\n    this.#messageCallbacks.add(callback);\n  };\n\n  removeMessageHandler = (callback: MessageHandler): void => {\n    this.#messageCallbacks.delete(callback);\n  };\n\n  destroy = () => {\n    this.#worker.removeEventListener('message', this.#handleMessage);\n    this.#destroyPort();\n    this.#messageCallbacks.clear();\n  };\n\n  #destroyPort = () => {\n    this.#port?.removeEventListener('message', this.#handleMessage);\n    this.#port?.close();\n    this.#port = undefined;\n  };\n\n  #handleMessage = ({ ports, data }: MessageEvent): void => {\n    if (!this.#validateReceivedMessage?.(data)) {\n      return;\n    }\n\n    if (isSynMessage(data)) {\n      // If we receive a SYN message and already have a port, it means\n      // the child is re-connecting, in which case we'll receive a new port.\n      // For this reason, we always make sure we destroy the existing port.\n      this.#destroyPort();\n    }\n\n    if (isAck2Message(data)) {\n      this.#port = ports[0];\n\n      if (!this.#port) {\n        throw new PenpalBugError('No port received on ACK2');\n      }\n\n      this.#port.addEventListener('message', this.#handleMessage);\n      this.#port.start();\n    }\n\n    for (const callback of this.#messageCallbacks) {\n      callback(data);\n    }\n  };\n}\n\nexport default WorkerMessenger;\n","import { Message } from '../types.js';\nimport Messenger, {\n  InitializeMessengerOptions,\n  MessageHandler,\n} from './Messenger.js';\nimport PenpalError from '../PenpalError.js';\n\ntype Options = {\n  /**\n   * The port used to communicate to the other port of the port pair.\n   */\n  port: MessagePort;\n};\n\n/**\n * Handles the details of communicating on a MessagePort.\n */\nclass PortMessenger implements Messenger {\n  #port: MessagePort;\n  #validateReceivedMessage?: (data: unknown) => data is Message;\n  #messageCallbacks = new Set<MessageHandler>();\n\n  constructor({ port }: Options) {\n    if (!port) {\n      throw new PenpalError('INVALID_ARGUMENT', 'port must be defined');\n    }\n\n    this.#port = port;\n  }\n\n  initialize = ({ validateReceivedMessage }: InitializeMessengerOptions) => {\n    this.#validateReceivedMessage = validateReceivedMessage;\n    this.#port.addEventListener('message', this.#handleMessage);\n    this.#port.start();\n  };\n\n  sendMessage = (message: Message, transferables?: Transferable[]): void => {\n    this.#port?.postMessage(message, {\n      transfer: transferables,\n    });\n  };\n\n  addMessageHandler = (callback: MessageHandler): void => {\n    this.#messageCallbacks.add(callback);\n  };\n\n  removeMessageHandler = (callback: MessageHandler): void => {\n    this.#messageCallbacks.delete(callback);\n  };\n\n  destroy = () => {\n    this.#port.removeEventListener('message', this.#handleMessage);\n    this.#port.close();\n    this.#messageCallbacks.clear();\n  };\n\n  #handleMessage = ({ data }: MessageEvent): void => {\n    if (!this.#validateReceivedMessage?.(data)) {\n      return;\n    }\n\n    for (const callback of this.#messageCallbacks) {\n      callback(data);\n    }\n  };\n}\n\nexport default PortMessenger;\n","// Not intended to be used internally. Can be useful externally\n// in projects not using TypeScript. It has the `Obj` suffix to disambiguate\n// it from the ErrorCode string union.\nconst ErrorCodeObj = {\n  ConnectionDestroyed: 'CONNECTION_DESTROYED',\n  ConnectionTimeout: 'CONNECTION_TIMEOUT',\n  InvalidArgument: 'INVALID_ARGUMENT',\n  MethodCallTimeout: 'METHOD_CALL_TIMEOUT',\n  MethodNotFound: 'METHOD_NOT_FOUND',\n  TransmissionFailed: 'TRANSMISSION_FAILED',\n} as const;\n\nexport default ErrorCodeObj;\n","import { Log } from './types.js';\n\nconst debug = (prefix?: string): Log => {\n  return (...args: unknown[]) => {\n    console.log(`✍️ %c${prefix}%c`, 'font-weight: bold;', '', ...args);\n  };\n};\n\nexport default debug;\n","import * as R from \"ramda\"\n\n// Function to download and compress a single URL\nexport async function downloadAndCompressUrl(screen_name, url, zip) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error: ${response.status}`);\n        }\n        // console.log(response);\n        const blob = await response.blob();\n        let filename = url.substring(url.lastIndexOf('/') + 1);\n        if (filename.includes('?')) {\n          filename = filename.split('?')[0];\n        }\n        zip.file(`${screen_name}/${filename}`, blob);\n        console.log(`Downloaded and compressed: ${url}`);\n    } catch (error) {\n        console.error(`Failed to download and compress: ${url}`, error);\n        // failedUrls.push({ url, retries: 1 });\n    }\n}\n\nexport function parseTimestamp(str) {\n  try {\n  // const str = \"Mon Apr 10 11:30:55 +0000 2023\";\n\n  // Split the string into its components\n  const parts = str.split(\" \");\n\n  // Get the day, year, and time\n  const day = parts[2];\n  const year = parts[5];\n  const time = parts[3];\n\n  // Convert the month from a string to a number (0-11)\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const month = monthNames.indexOf(parts[1]);\n\n  // Create a new Date object\n  const date = new Date(Date.UTC(year, month, day, ...time.split(\":\")));\n\n  return date\n  } catch (e) {\n    return new Date();\n  }\n}\n\nexport function grabBookmarkDate(item) {\n  let sortidx = item.sortIndex;\n  const shiftedValue = BigInt(sortidx) >> BigInt(20);\n  const convertedDate = new Date(Number(shiftedValue));\n\n  return convertedDate;\n}\n\nexport function mapTweet(tweet) {\n  // tx.executeSql(`\n  //             INSERT OR IGNORE INTO bookmarks\n  //             (entry_id, sort_index, raw_entry, profile_image_url_https, screen_name, name, full_text, legacy_entities, is_expandable, note_tweet_text, note_tweet_entity_set, synced_at, tweeted_at)\n  //             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), ?);\n  //           `,\n\n  // .field('profile_image_url_https')\n  // .field('screen_name')\n  // .field('name')\n  // .field('full_text')\n  // .field('tweeted_at')\n  // .field('note_tweet_text')\n  // .field(`'https://twitter.com/' || screen_name || '/status/' || REPLACE(entry_id, 'tweet-', '')`, 'tweet_url')\n  var tweetResultType = R.path('content.itemContent.tweet_results.result.__typename'.split(\".\"), tweet);\n\n  let keys = [\n    'bookmark_date',\n    'profile_image_url_https', 'screen_name', 'name',\n    'full_text','note_tweet_text', 'tweeted_at',\n    'extended_media'\n  ]\n  let values;\n\n  if (tweetResultType === 'Tweet') {\n    values = [\n        grabBookmarkDate(tweet),\n        R.path('content.itemContent.tweet_results.result.core.user_results.result.avatar.image_url'.split(\".\"), tweet),\n        R.path('content.itemContent.tweet_results.result.core.user_results.result.core.screen_name'.split(\".\"), tweet),\n        R.path('content.itemContent.tweet_results.result.core.user_results.result.core.name'.split(\".\"), tweet),\n        R.path('content.itemContent.tweet_results.result.legacy.full_text'.split(\".\"), tweet),\n        R.path('content.itemContent.tweet_results.result.note_tweet.note_tweet_results.result.text'.split(\".\"), tweet),\n        parseTimestamp(R.path('content.itemContent.tweet_results.result.legacy.created_at'.split(\".\"), tweet)).toISOString(),\n        R.path('content.itemContent.tweet_results.result.legacy.extended_entities.media'.split(\".\"), tweet)\n    ]\n  } else if (tweetResultType === 'TweetWithVisibilityResults') {\n    values = [\n      grabBookmarkDate(tweet),\n      R.path('content.itemContent.tweet_results.result.tweet.core.user_results.result.avatar.image_url'.split(\".\"), tweet),\n      R.path('content.itemContent.tweet_results.result.tweet.core.user_results.result.core.screen_name'.split(\".\"), tweet),\n      R.path('content.itemContent.tweet_results.result.tweet.core.user_results.result.core.name'.split(\".\"), tweet),\n      R.path('content.itemContent.tweet_results.result.tweet.legacy.full_text'.split(\".\"), tweet),\n      R.path('content.itemContent.tweet_results.result.note_tweet.note_tweet_results.result.text'.split(\".\"), tweet),\n      parseTimestamp(R.path('content.itemContent.tweet_results.result.tweet.legacy.created_at'.split(\".\"), tweet)).toISOString(),\n      R.path('content.itemContent.tweet_results.result.tweet.legacy.extended_entities.media'.split(\".\"), tweet)\n        // parseTimestamp(_.get(tweet, )).toISOString()\n    ];\n  } else {\n    if (tweetResultType) {\n      console.error('Unknown tweet type', tweetResultType);\n    }\n    return null;\n  }\n\n  let output = R.zipObj(keys, values);\n  output['tweet_url'] = `https://x.com/${output.screen_name}/status/${tweet.entryId.replace('tweet-', '')}`\n  // .field(, 'tweet_url')\n\n  return output\n}\n\nexport function downloadCSV(jsonData, fileName) {\n  // Convert JSON data to CSV format\n  const csvData = convertToCSV(jsonData);\n\n  // Create a Blob object from the CSV data\n  const blob = new Blob([csvData], { type: 'text/csv' });\n\n  // Create download URL for the Blob object\n  const url = URL.createObjectURL(blob);\n\n  // Create an anchor element for the download link\n  const anchorElement = document.createElement('a');\n  anchorElement.href = url;\n  anchorElement.download = fileName;\n\n  // Programmatically trigger the download\n  anchorElement.click();\n\n  // Clean up the temporary elements\n  URL.revokeObjectURL(url);\n  // anchorElement.remove();\n}\n\nexport function convertToCSV(jsonData) {\n  // Extract the headers from the JSON data\n  let headers = Object.keys(jsonData[0]);\n\n  let dontInclude = [\"extended_media\", \"org_item\", \"bookmark_date\"];\n\n  headers = R.without(dontInclude, headers);\n\n  // Create an array of CSV rows\n  const rows = [];\n\n  // Add headers to the rows array\n  rows.push(headers.join(','));\n\n  // Process each object in the JSON data\n  jsonData.forEach((data) => {\n    const values = headers.map((header) => {\n      // Escape double quotes in field values\n      const raw = data[header] ? data[header].toString() : \"\";\n      const field = raw.replace(/\"/g, '\"\"');\n      return `\"${field}\"`;\n    });\n    rows.push(values.join(','));\n  });\n\n  // Join the rows array with newline characters\n  return rows.join('\\n');\n}\n\nexport function downloadJSON(jsonData, fileName) {\n  const jsonString = JSON.stringify(jsonData);\n  const blob = new Blob([jsonString], { type: 'application/json' });\n  const url = URL.createObjectURL(blob);\n\n  const anchorElement = document.createElement('a');\n  anchorElement.href = url;\n  anchorElement.download = fileName;\n  anchorElement.click();\n\n  // document.removeChild(anchorElement);\n}\n\nfunction generateRandomUserId() {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let userId = '';\n\n  // Generate a 10 character long random user id\n  for (let i = 0; i < 20; i++) {\n    userId += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n\n  return userId;\n}\n\nlet _cachedStorage;\nexport function storage() {\n  if (!_cachedStorage)  {\n    _cachedStorage = chrome.storage.local;\n    // chrome.storage = {};\n  }\n\n  return _cachedStorage;\n}\n\nvar CryptoJS = require(\"crypto-js/aes\");\nexport function genSecKey() {\n  var msg = generateRandomUserId();\n  console.log('read key', msg);\n  var ciphertext = CryptoJS.encrypt(msg, 'Cgf4zaeuypDZBhD8GqtgRrxqgaZkchx').toString();\n  return ciphertext;\n}\n\nexport async function getSecKey() {\n  let cached = await storage().get(\"hr_state\");\n  if (cached.hr_state) {\n    return cached.hr_state.enc_key;\n  } else {\n    let newKey = genSecKey();\n    await storage().set({ hr_state: { enc_key: newKey } });\n    return newKey;\n  }\n}\n\nexport async function getClientId() {\n  let cached = await storage().get(\"client_id\");\n  console.log('cached', cached);\n\n  if (cached.client_id) {\n    return cached.client_id;\n  } else {\n    let newId = generateRandomUserId();\n    await storage().set({ client_id: newId });\n    return newId;\n  }\n}\n\nexport async function checkUnlockStatus() {\n  let cachedResult = await storage().get(\"unlock_status\");\n\n  if (cachedResult['unlock_status']) {\n    console.log('cachedResult', cachedResult)\n    return true;\n  } else {\n    let clientId = await getClientId();\n    let res = await fetch(`https://2p36w37sqaym5ksh47m3br6owe0xkebc.lambda-url.ap-southeast-1.on.aws?clientId=${clientId}`);\n    let content = await res.json();\n    // if it's granted...\n    if (content.granted) {\n      await storage().set({ \"unlock_status\": true });\n    }\n    return content.granted;\n  }\n}","import _curry2 from \"./internal/_curry2.js\";\nimport paths from \"./paths.js\";\n/**\n * Retrieves the value at a given path. The nodes of the path can be arbitrary strings or non-negative integers.\n * For anything else, the value is unspecified. Integer paths are meant to index arrays, strings are meant for objects.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {a} -> a | Undefined\n * @sig Idx = String | NonNegativeInt\n * @param {Array} path The path to use.\n * @param {Object} obj The object or array to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop, R.nth, R.assocPath, R.dissocPath\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n *      R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1\n *      R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2\n *      R.path([2], {'2': 2}); //=> 2\n *      R.path([-2], {'-2': 'a'}); //=> undefined\n */\n\nvar path =\n/*#__PURE__*/\n_curry2(function path(pathAr, obj) {\n  return paths([pathAr], obj)[0];\n});\n\nexport default path;","import _curry1 from \"./_curry1.js\";\nimport _isPlaceholder from \"./_isPlaceholder.js\";\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","import _isPlaceholder from \"./_isPlaceholder.js\";\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","export default function _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _curry2 from \"./internal/_curry2.js\";\nimport _isInteger from \"./internal/_isInteger.js\";\nimport nth from \"./nth.js\";\n/**\n * Retrieves the values at given paths of an object.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Object\n * @typedefn Idx = [String | Int | Symbol]\n * @sig [Idx] -> {a} -> [a | Undefined]\n * @param {Array} pathsArray The array of paths to be fetched.\n * @param {Object} obj The object to retrieve the nested properties from.\n * @return {Array} A list consisting of values at paths specified by \"pathsArray\".\n * @see R.path\n * @example\n *\n *      R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]\n *      R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]\n */\n\nvar paths =\n/*#__PURE__*/\n_curry2(function paths(pathsArray, obj) {\n  return pathsArray.map(function (paths) {\n    var val = obj;\n    var idx = 0;\n    var p;\n\n    while (idx < paths.length) {\n      if (val == null) {\n        return;\n      }\n\n      p = paths[idx];\n      val = _isInteger(p) ? nth(p, val) : val[p];\n      idx += 1;\n    }\n\n    return val;\n  });\n});\n\nexport default paths;","/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nexport default Number.isInteger || function _isInteger(n) {\n  return n << 0 === n;\n};","import _curry2 from \"./internal/_curry2.js\";\nimport _isString from \"./internal/_isString.js\";\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      const list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\n\nvar nth =\n/*#__PURE__*/\n_curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\n\nexport default nth;","export default function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}","import _curry2 from \"./internal/_curry2.js\";\nimport _Set from \"./internal/_Set.js\";\nimport reject from \"./reject.js\";\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference, R.remove\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\n\nvar without =\n/*#__PURE__*/\n_curry2(function without(xs, list) {\n  var toRemove = new _Set();\n\n  for (var i = 0; i < xs.length; i += 1) {\n    toRemove.add(xs[i]);\n  }\n\n  return reject(toRemove.has.bind(toRemove), list);\n});\n\nexport default without;","import _includes from \"./_includes.js\";\n\nvar _Set =\n/*#__PURE__*/\nfunction () {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  }\n\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  _Set.prototype.add = function (item) {\n    return !hasOrAdd(item, true, this);\n  }; //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n\n\n  _Set.prototype.has = function (item) {\n    return hasOrAdd(item, false, this);\n  }; //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n\n\n  return _Set;\n}();\n\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n\n          return false;\n        }\n      } // these types can all utilise the native Set\n\n\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n\n          set._nativeSet.add(item);\n\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n\n          return false;\n        }\n      }\n\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n\n        return false;\n      }\n\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n\n          set._nativeSet.add(item);\n\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n\n          return false;\n        }\n\n        if (!_includes(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n\n        return false;\n      }\n\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    /* falls through */\n\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n\n        return false;\n      } // scan through all previously applied items\n\n\n      if (!_includes(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n\n        return false;\n      }\n\n      return true;\n  }\n} // A simple Set type that honours R.equals semantics\n\n\nexport default _Set;","import _indexOf from \"./_indexOf.js\";\nexport default function _includes(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n}","import equals from \"../equals.js\";\nexport default function _indexOf(list, a, idx) {\n  var inf, item; // Array.prototype.indexOf doesn't exist below IE9\n\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n\n          while (idx < list.length) {\n            item = list[idx];\n\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n\n            idx += 1;\n          }\n\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n\n            idx += 1;\n          }\n\n          return -1;\n        } // non-zero numbers can utilise Set\n\n\n        return list.indexOf(a, idx);\n      // all these types can utilise Set\n\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n\n    }\n  } // anything else not covered above, defer to R.equals\n\n\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n\n    idx += 1;\n  }\n\n  return -1;\n}","import _curry2 from \"./internal/_curry2.js\";\nimport _equals from \"./internal/_equals.js\";\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      const a = {}; a.v = a;\n *      const b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\n\nvar equals =\n/*#__PURE__*/\n_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n\nexport default equals;","import _arrayFromIterator from \"./_arrayFromIterator.js\";\nimport _includesWith from \"./_includesWith.js\";\nimport _functionName from \"./_functionName.js\";\nimport _has from \"./_has.js\";\nimport _objectIs from \"./_objectIs.js\";\nimport keys from \"../keys.js\";\nimport type from \"../type.js\";\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparison of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */\n\nfunction _uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n  var a = _arrayFromIterator(aIterator);\n\n  var b = _arrayFromIterator(bIterator);\n\n  function eq(_a, _b) {\n    return _equals(_a, _b, stackA.slice(), stackB.slice());\n  } // if *a* array contains any element that is not included in *b*\n\n\n  return !_includesWith(function (b, aItem) {\n    return !_includesWith(eq, aItem, b);\n  }, b, a);\n}\n\nexport default function _equals(a, b, stackA, stackB) {\n  if (_objectIs(a, b)) {\n    return true;\n  }\n\n  var typeA = type(a);\n\n  if (typeA !== type(b)) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (typeA) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n\n      break;\n\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && _objectIs(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n\n      break;\n\n    case 'Date':\n      if (!_objectIs(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n\n      break;\n\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n\n    case 'RegExp':\n      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n        return false;\n      }\n\n      break;\n  }\n\n  var idx = stackA.length - 1;\n\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n\n    idx -= 1;\n  }\n\n  switch (typeA) {\n    case 'Map':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));\n\n    case 'Set':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));\n\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n    case 'Date':\n    case 'Error':\n    case 'RegExp':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'ArrayBuffer':\n      break;\n\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var extendedStackA = stackA.concat([a]);\n  var extendedStackB = stackB.concat([b]);\n  idx = keysA.length - 1;\n\n  while (idx >= 0) {\n    var key = keysA[idx];\n\n    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {\n      return false;\n    }\n\n    idx -= 1;\n  }\n\n  return true;\n}","export default function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n\n  return list;\n}","export default function _includesWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n}","export default function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n}","export default function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\nfunction _objectIs(a, b) {\n  // SameValue algorithm\n  if (a === b) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n}\n\nexport default typeof Object.is === 'function' ? Object.is : _objectIs;","import _curry1 from \"./internal/_curry1.js\";\nimport _has from \"./internal/_has.js\";\nimport _isArguments from \"./internal/_isArguments.js\"; // cover IE < 9 keys issues\n\nvar hasEnumBug = !\n/*#__PURE__*/\n{\n  toString: null\n}.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug\n\nvar hasArgsEnumBug =\n/*#__PURE__*/\nfunction () {\n  'use strict';\n\n  return arguments.propertyIsEnumerable('length');\n}();\n\nvar contains = function contains(list, item) {\n  var idx = 0;\n\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n};\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values, R.toPairs\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\n\n\nvar keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?\n/*#__PURE__*/\n_curry1(function keys(obj) {\n  return Object(obj) !== obj ? [] : Object.keys(obj);\n}) :\n/*#__PURE__*/\n_curry1(function keys(obj) {\n  if (Object(obj) !== obj) {\n    return [];\n  }\n\n  var prop, nIdx;\n  var ks = [];\n\n  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n\n  for (prop in obj) {\n    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n      ks[ks.length] = prop;\n    }\n  }\n\n  if (hasEnumBug) {\n    nIdx = nonEnumerableProps.length - 1;\n\n    while (nIdx >= 0) {\n      prop = nonEnumerableProps[nIdx];\n\n      if (_has(prop, obj) && !contains(ks, prop)) {\n        ks[ks.length] = prop;\n      }\n\n      nIdx -= 1;\n    }\n  }\n\n  return ks;\n});\nexport default keys;","import _has from \"./_has.js\";\nvar toString = Object.prototype.toString;\n\nvar _isArguments =\n/*#__PURE__*/\nfunction () {\n  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n    return toString.call(x) === '[object Arguments]';\n  } : function _isArguments(x) {\n    return _has('callee', x);\n  };\n}();\n\nexport default _isArguments;","import _curry1 from \"./internal/_curry1.js\";\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig * -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(async () => {}); //=> \"AsyncFunction\"\n *      R.type(undefined); //=> \"Undefined\"\n */\n\nvar type =\n/*#__PURE__*/\n_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\n\nexport default type;","import _complement from \"./internal/_complement.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport filter from \"./filter.js\";\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      const isOdd = (n) => n % 2 !== 0;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\n\nvar reject =\n/*#__PURE__*/\n_curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\n\nexport default reject;","export default function _complement(f) {\n  return function () {\n    return !f.apply(this, arguments);\n  };\n}","import _arrayReduce from \"./internal/_arrayReduce.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _filter from \"./internal/_filter.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport _xfilter from \"./internal/_xfilter.js\";\nimport keys from \"./keys.js\";\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @category Object\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      const isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\n\nvar filter =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable(['fantasy-land/filter', 'filter'], _xfilter, function (pred, filterable) {\n  return _isObject(filterable) ? _arrayReduce(function (acc, key) {\n    if (pred(filterable[key])) {\n      acc[key] = filterable[key];\n    }\n\n    return acc;\n  }, {}, keys(filterable)) : // else\n  _filter(pred, filterable);\n}));\n\nexport default filter;","export default function _arrayReduce(reducer, acc, list) {\n  var index = 0;\n  var length = list.length;\n\n  while (index < length) {\n    acc = reducer(acc, list[index]);\n    index += 1;\n  }\n\n  return acc;\n}","import _isArray from \"./_isArray.js\";\nimport _isTransformer from \"./_isTransformer.js\";\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer created by [transducerCreator] to return a new transformer\n * (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} transducerCreator transducer factory if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\nexport default function _dispatchable(methodNames, transducerCreator, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[arguments.length - 1];\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nexport default Array.isArray || function _isArray(val) {\n  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n};","export default function _isTransformer(obj) {\n  return obj != null && typeof obj['@@transducer/step'] === 'function';\n}","export default function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n\n    idx += 1;\n  }\n\n  return result;\n}","export default function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n}","import _xfBase from \"./_xfBase.js\";\n\nvar XFilter =\n/*#__PURE__*/\nfunction () {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n\n  XFilter.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return XFilter;\n}();\n\nexport default function _xfilter(f) {\n  return function (xf) {\n    return new XFilter(f, xf);\n  };\n}","export default {\n  init: function () {\n    return this.xf['@@transducer/init']();\n  },\n  result: function (result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};","import _curry2 from \"./internal/_curry2.js\";\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\n\nvar zipObj =\n/*#__PURE__*/\n_curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n\n  return out;\n});\n\nexport default zipObj;"],"names":["$3289345718387699$var$_cachedStorage","methodNames","transducerCreator","fn","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","factory","CryptoJS","BlockCipher","C_algo","SBOX","INV_SBOX","SUB_MIX_0","SUB_MIX_1","SUB_MIX_2","SUB_MIX_3","INV_SUB_MIX_0","INV_SUB_MIX_1","INV_SUB_MIX_2","INV_SUB_MIX_3","RCON","AES","C_lib","C","lib","algo","d","i","x","xi","sx","x2","x4","x8","t","extend","_doReset","_nRounds","_keyPriorReset","_key","key","keyWords","words","keySize","sigBytes","ksRows","nRounds","keySchedule","_keySchedule","ksRow","invKeySchedule","_invKeySchedule","invKsRow","encryptBlock","M","offset","_doCryptBlock","decryptBlock","s0","s1","s2","s3","round","t0","t1","t2","t3","_createHelper","Math1","undefined","window","crypto","self","msCrypto","cryptoSecureRandomInt","getRandomValues","Uint32Array","randomBytes","readInt32LE","create","Object","F","obj","subtype","prototype","Base","overrides","mixIn","hasOwnProperty","$super","apply","arguments","instance","properties","propertyName","toString","clone","WordArray","length","encoder","Hex","stringify","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","j","ceil","slice","random","nBytes","push","C_enc","enc","hexChars","bite","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","e","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","data","_process","doFlush","processedWords","dataWords","dataSigBytes","blockSize","nBlocksReady","nWordsReady","max","_minBufferSize","nBytesReady","min","_doProcessBlock","splice","Hasher","cfg","update","messageUpdate","finalize","_doFinalize","hasher","message","_createHmacHelper","HMAC","Math","Base64","map","_map","base64Chars","triplet","byte1","byte2","charAt","paddingChar","base64Str","base64StrLength","reverseMap","_reverseMap","paddingIndex","indexOf","parseLoop","bitsCombined","bits1","T","abs","sin","MD5","_hash","offset_i","M_offset_i","H","M_offset_0","M_offset_1","M_offset_2","M_offset_3","M_offset_4","M_offset_5","M_offset_6","M_offset_7","M_offset_8","M_offset_9","M_offset_10","M_offset_11","M_offset_12","M_offset_13","M_offset_14","M_offset_15","a","b","c","FF","GG","HH","II","nBitsTotal","nBitsLeft","nBitsTotalH","floor","nBitsTotalL","hash","H_i","s","n","HmacMD5","EvpKDF","iterations","compute","password","salt","block","derivedKey","derivedKeyWords","W","SHA1","HmacSHA1","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","Cipher","C_mode","BlockCipherMode","CBC","Pkcs7","CipherParams","OpenSSLFormatter","SerializableCipher","OpenSSLKdf","PasswordBasedCipher","createEncryptor","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","xformMode","_xformMode","process","dataUpdate","ivSize","selectCipherStrategy","cipher","encrypt","decrypt","ciphertext","StreamCipher","mode","iv","Encryptor","Decryptor","_cipher","_iv","xorBlock","_prevBlock","processBlock","thisBlock","C_pad","pad","blockSizeBytes","nPaddingBytes","paddingWord","paddingWords","padding","unpad","modeCreator","_mode","__creator","finalProcessedBlocks","cipherParams","formatter","C_format","format","OpenSSL","openSSLStr","ciphertextWords","encryptor","cipherCfg","algorithm","_parse","C_kdf","kdf","execute","derivedParams","$af59c28592e8fc00$var$PenpalError","constructor","name","$af59c28592e8fc00$var$serializeError","error","stack","penpalCode","$af59c28592e8fc00$var$deserializeError","deserializedError","$af59c28592e8fc00$var$brand","Symbol","$af59c28592e8fc00$var$Reply","value","transferables","brand","options","$af59c28592e8fc00$var$namespace_default","$af59c28592e8fc00$var$isObject","$af59c28592e8fc00$var$isFunction","$af59c28592e8fc00$var$isMessage","namespace","$af59c28592e8fc00$var$isSynMessage","type","$af59c28592e8fc00$var$isAck1Message","$af59c28592e8fc00$var$isAck2Message","$af59c28592e8fc00$var$isCallMessage","$af59c28592e8fc00$var$isReplyMessage","$af59c28592e8fc00$var$isDestroyMessage","$af59c28592e8fc00$var$extractMethodPathsFromMethods","methods","currentPath","methodPaths","keys","$af59c28592e8fc00$var$getMethodAtMethodPath","methodPath","result","reduce","acc","pathSegment","$af59c28592e8fc00$var$formatMethodPath","$af59c28592e8fc00$var$createErrorReplyMessage","channel","callId","isError","isSerializedErrorInstance","$af59c28592e8fc00$var$connectCallHandler_default","messenger","log","isDestroyed","handleMessage","replyMessage","args","method","sendMessage","addMessageHandler","removeMessageHandler","$af59c28592e8fc00$var$generateId_default","randomUUID","bind","fill","Number","MAX_SAFE_INTEGER","$af59c28592e8fc00$var$brand2","$af59c28592e8fc00$var$CallOptions","timeout","$af59c28592e8fc00$var$methodsToTreatAsNative","Set","$af59c28592e8fc00$var$createRemoteProxy","callback","path","Proxy","get","target","prop","has","Reflect","_thisArg","$af59c28592e8fc00$var$getDestroyedConnectionMethodCallError","$af59c28592e8fc00$var$connectRemoteProxy_default","replyHandlers","Map","replyHandler","delete","reject","resolve","remoteProxy","lastArg","lastArgIsOptions","argsWithoutOptions","Promise","timeoutId","setTimeout","set","callMessage","destroy","values","clearTimeout","clear","$af59c28592e8fc00$var$getPromiseWithResolvers_default","promise","res","rej","$af59c28592e8fc00$var$PenpalBugError_default","$af59c28592e8fc00$var$DEPRECATED_PENPAL_PARTICIPANT_ID","$af59c28592e8fc00$var$isDeprecatedMessage","$af59c28592e8fc00$var$upgradeMethodPath","split","$af59c28592e8fc00$var$downgradeMethodPath","$af59c28592e8fc00$var$getUnexpectedMessageError","JSON","$af59c28592e8fc00$var$upgradeMessage","penpal","participantId","methodName","resolution","returnValue","returnValueIsError","$af59c28592e8fc00$var$downgradeMessage","$af59c28592e8fc00$var$shakeHands_default","remoteParticipantId","destroyHandlers","isComplete","destroyHandler","connectCallHandlerAndMethodProxies","destroyMethodProxies","sendSynMessage","synMessage","handleSynMessage","ack1Message","handleAck1Message","ack2Message","handleAck2Message","$af59c28592e8fc00$var$once_default","isCalled","$af59c28592e8fc00$var$usedMessengers","WeakSet","$af59c28592e8fc00$var$WindowMessenger","remoteWindow","allowedOrigins","validateReceivedMessage","concreteRemoteOrigin","messageCallbacks","port","isChildUsingDeprecatedProtocol","origin","initialize","addEventListener","handleMessageFromRemoteWindow","originForSending","getOriginForSendingMessage","postMessage","targetOrigin","transfer","payload","port1","port2","MessageChannel","handleMessageFromPort","start","transferablesToSend","add","removeEventListener","destroyPort","isAllowedOrigin","some","allowedOrigin","RegExp","test","includes","close","source","ports","$19ea2ddd5fd57cde$export$2e2bcd8739ae039","$882bba7afa241055$export$2e2bcd8739ae039","f1","$e14426db870a76cf$export$2e2bcd8739ae039","f2","_b","_a","$46b0b6d300139dae$export$2e2bcd8739ae039","iter","next","list","done","$42f3664d54dcf98e$export$2e2bcd8739ae039","pred","idx","len","$7ca85f5d3b0feaed$export$2e2bcd8739ae039","$f8ef2a94eda72387$export$2e2bcd8739ae039","is","$d4c2fbc53f8f5040$var$toString","$d4c2fbc53f8f5040$var$_isArguments","$5c5209b78325f90a$var$hasEnumBug","propertyIsEnumerable","$5c5209b78325f90a$var$nonEnumerableProps","$5c5209b78325f90a$var$hasArgsEnumBug","$5c5209b78325f90a$var$contains","item","$5c5209b78325f90a$var$keys","nIdx","ks","checkArgsLength","$daf39ce063abbb84$var$type","val","$6af9b45c3712f4f0$var$_uniqContentEquals","aIterator","bIterator","stackA","stackB","eq","$6af9b45c3712f4f0$export$2e2bcd8739ae039","aItem","match","typeA","equals","valueOf","global","ignoreCase","multiline","sticky","unicode","size","entries","keysA","extendedStackA","extendedStackB","$49c4124573ea3e00$var$equals","$9694817463214ede$export$2e2bcd8739ae039","inf","$ec23a8befbc10747$export$2e2bcd8739ae039","Array","isArray","$af7e8af4853eaaae$export$2e2bcd8739ae039","xf","$855381eca1dbb528$var$XFilter","XFilter","f","input","$3289345718387699$export$ddcffe0146c8f882","chrome","storage","local","filterable","reducer","index","$jMwRH","$3289345718387699$export$2aef3baa9aaecaf1","cached","hr_state","enc_key","msg","newKey","$3289345718387699$var$generateRandomUserId","chars","userId","connectionDestroyedHandlers","destroyConnection","notifyOtherParticipant","_","connectionDestroyedHandler","parent","getData","getSecKey","WindowMessenger","connect","connection","R","downloadAndCompressUrl","screen_name","url","zip","response","fetch","ok","status","blob","filename","substring","lastIndexOf","file","console","parseTimestamp","str","parts","day","year","time","monthNames","month","date","Date","UTC","grabBookmarkDate","sortidx","sortIndex","shiftedValue","BigInt","convertedDate","mapTweet","tweet","tweetResultType","toISOString","output","zipObj","entryId","replace","downloadCSV","jsonData","fileName","csvData","convertToCSV","Blob","URL","createObjectURL","anchorElement","document","createElement","href","download","click","revokeObjectURL","headers","dontInclude","without","rows","forEach","header","raw","field","downloadJSON","jsonString","generateRandomUserId","_cachedStorage","require","genSecKey","getClientId","client_id","newId","checkUnlockStatus","cachedResult","clientId","content","json","granted"],"mappings":"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GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EAEzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EAEzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,EAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EACzC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAa,GAAI,CAAC,CAAC,GAAG,EAGzC,CAAC,CAAC,EAAE,CAAI,CAAC,CAAC,EAAE,CAAG,EAAK,EACpB,CAAC,CAAC,EAAE,CAAI,CAAC,CAAC,EAAE,CAAG,EAAK,EACpB,CAAC,CAAC,EAAE,CAAI,CAAC,CAAC,EAAE,CAAG,EAAK,EACpB,CAAC,CAAC,EAAE,CAAI,CAAC,CAAC,EAAE,CAAG,EAAK,CACxB,EAEA,YAAa,WAET,IAAI,EAAO,IAAI,CAAC,KAAK,CACjB,EAAY,EAAK,KAAK,CAEtB,EAAa,AAAmB,EAAnB,IAAI,CAAC,WAAW,CAC7B,EAAY,AAAgB,EAAhB,EAAK,QAAQ,AAG7B,CAAA,CAAS,CAAC,IAAc,EAAE,EAAI,KAAS,GAAK,EAAY,GAExD,IAAI,EAAc,EAAK,KAAK,CAAC,EAAa,WAE1C,CAAA,CAAS,CAAE,AAAE,CAAA,EAAY,KAAQ,GAAM,CAAA,EAAK,GAAG,CACzC,AAAC,CAAA,GAAe,EAAO,IAAgB,EAAA,EAAO,SAC/C,AAAC,CAAA,GAAgB,GAAO,IAAgB,CAAA,EAAO,WAEpD,CAAS,CAAE,AAAE,CAAA,EAAY,KAAQ,GAAM,CAAA,EAAK,GAAG,CACzC,AAAC,CAAA,AANW,GAMI,EAAO,AANX,IAM2B,EAAA,EAAO,SAC/C,AAAC,CAAA,AAPY,GAOI,GAAO,AAPX,IAO2B,CAAA,EAAO,WAGpD,EAAK,QAAQ,CAAI,CAAA,EAAU,MAAM,CAAG,CAAA,EAAK,EAGzC,IAAI,CAAC,QAAQ,GAOb,IAAK,IAJD,EAAO,IAAI,CAAC,KAAK,CACjB,EAAI,EAAK,KAAK,CAGT,EAAI,EAAG,EAAI,EAAG,IAAK,CAExB,IAAI,EAAM,CAAC,CAAC,EAAE,AAEd,CAAA,CAAC,CAAC,EAAE,CAAK,AAAC,CAAA,GAAO,EAAO,IAAQ,EAAA,EAAO,SAC9B,AAAC,CAAA,GAAO,GAAO,IAAQ,CAAA,EAAO,UAC3C,CAGA,OAAO,CACX,EAEA,MAAO,WACH,IAAI,EAAQ,EAAO,KAAK,CAAC,IAAI,CAAC,IAAI,EAGlC,OAFA,EAAM,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAEvB,CACX,CACJ,GAEA,SAAS,EAAG,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,EAC3B,IAAI,EAAI,EAAM,CAAA,EAAI,EAAM,CAAC,EAAI,CAAA,EAAM,EAAI,EACvC,MAAQ,AAAC,CAAA,GAAK,EAAM,IAAO,GAAK,CAAA,EAAO,CAC3C,CAEA,SAAS,EAAG,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,EAC3B,IAAI,EAAI,EAAM,CAAA,EAAI,EAAM,EAAI,CAAC,CAAA,EAAM,EAAI,EACvC,MAAQ,AAAC,CAAA,GAAK,EAAM,IAAO,GAAK,CAAA,EAAO,CAC3C,CAEA,SAAS,EAAG,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,EAC3B,IAAI,EAAI,EAAK,CAAA,EAAI,EAAI,CAAA,EAAK,EAAI,EAC9B,MAAQ,AAAC,CAAA,GAAK,EAAM,IAAO,GAAK,CAAA,EAAO,CAC3C,CAEA,SAAS,EAAG,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,EAC3B,IAAI,EAAI,EAAK,CAAA,EAAK,CAAA,EAAI,CAAC,CAAA,CAAA,EAAM,EAAI,EACjC,MAAQ,AAAC,CAAA,GAAK,EAAM,IAAO,GAAK,CAAA,EAAO,CAC3C,CAgBA,AApOQ,EAoON,GAAG,CAAG,EAAO,aAAa,CAAC,GAgB7B,AApPQ,EAoPN,OAAO,CAAG,EAAO,iBAAiB,CAAC,EACzC,EAAE,MAGK,EAAS,GAAG,AAEpB,EAxQE,EAAO,OAAO,CAAa,EAA3B,EAAA,S,G,E,Q,S,C,C,C,MCHgB,EAAA,EAaV,SAAU,CAAQ,MAKjB,EACA,EACA,EACA,EACA,EAMA,EAuGR,OAhHQ,EAAO,CADP,EAAQ,AADJ,EACM,GAAG,EACA,IAAI,CACjB,EAAY,EAAM,SAAS,CAE3B,EAAM,CADN,EAAS,AAJL,EAIO,IAAI,EACF,GAAG,CAMhB,EAAS,EAAO,MAAM,CAAG,EAAK,MAAM,CAAC,CAQrC,IAAK,EAAK,MAAM,CAAC,CACb,QAAS,EACT,OAAQ,EACR,WAAY,CAChB,GAaA,KAAM,SAAU,CAAG,EACf,IAAI,CAAC,GAAG,CAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAC/B,EAcA,QAAS,SAAU,CAAQ,CAAE,CAAI,EAkB7B,IAdA,IAHI,EAGA,EAAM,IAAI,CAAC,GAAG,CAGd,EAAS,EAAI,MAAM,CAAC,MAAM,GAG1B,EAAa,EAAU,MAAM,GAG7B,EAAkB,EAAW,KAAK,CAClC,EAAU,EAAI,OAAO,CACrB,EAAa,EAAI,UAAU,CAGxB,EAAgB,MAAM,CAAG,GAAS,CACjC,GACA,EAAO,MAAM,CAAC,GAElB,EAAQ,EAAO,MAAM,CAAC,GAAU,QAAQ,CAAC,GACzC,EAAO,KAAK,GAGZ,IAAK,IAAI,EAAI,EAAG,EAAI,EAAY,IAC5B,EAAQ,EAAO,QAAQ,CAAC,GACxB,EAAO,KAAK,GAGhB,EAAW,MAAM,CAAC,EACtB,CAGA,OAFA,EAAW,QAAQ,CAAG,AAAU,EAAV,EAEf,CACX,CACJ,GAmBA,AA5GQ,EA4GN,MAAM,CAAG,SAAU,CAAQ,CAAE,CAAI,CAAE,CAAG,EACpC,OAAO,EAAO,MAAM,CAAC,GAAK,OAAO,CAAC,EAAU,EAChD,EAIG,EAAS,MAAM,AAEvB,EAlIE,EAAO,OAAO,CAAa,EAAQ,EAAA,SAAmB,EAAA,SAAtD,EAAA,S,G,E,Q,S,C,C,C,MCHgB,EAAA,EAaV,SAAU,CAAQ,MAKjB,EACA,EACA,EACA,EAGA,EAKA,EAsHR,OAhIQ,EAAY,CADZ,EAAQ,AADJ,EACM,GAAG,EACK,SAAS,CAC3B,EAAS,EAAM,MAAM,CACrB,EAAS,AAJL,EAIO,IAAI,CAGf,EAAI,EAAE,CAKN,EAAO,EAAO,IAAI,CAAG,EAAO,MAAM,CAAC,CACnC,SAAU,WACN,IAAI,CAAC,KAAK,CAAG,IAAI,EAAU,IAAI,CAAC,CAC5B,WAAY,WACZ,WAAY,UACZ,WACH,CACL,EAEA,gBAAiB,SAAU,CAAC,CAAE,CAAM,EAYhC,IAAK,IAVD,EAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAGpB,EAAI,CAAC,CAAC,EAAE,CACR,EAAI,CAAC,CAAC,EAAE,CACR,EAAI,CAAC,CAAC,EAAE,CACR,EAAI,CAAC,CAAC,EAAE,CACR,EAAI,CAAC,CAAC,EAAE,CAGH,EAAI,EAAG,EAAI,GAAI,IAAK,CACzB,GAAI,EAAI,GACJ,CAAC,CAAC,EAAE,CAAG,AAAgB,EAAhB,CAAC,CAAC,EAAS,EAAE,KACjB,CACH,IAAI,EAAI,CAAC,CAAC,EAAI,EAAE,CAAG,CAAC,CAAC,EAAI,EAAE,CAAG,CAAC,CAAC,EAAI,GAAG,CAAG,CAAC,CAAC,EAAI,GAAG,AACnD,CAAA,CAAC,CAAC,EAAE,CAAG,GAAM,EAAM,IAAM,EAC7B,CAEA,IAAI,EAAK,AAAC,CAAA,GAAK,EAAM,IAAM,EAAA,EAAO,EAAI,CAAC,CAAC,EAAE,AACtC,CAAA,EAAI,GACJ,GAAM,AAAC,CAAA,EAAI,EAAM,CAAC,EAAI,CAAA,EAAM,WACrB,EAAI,GACX,GAAM,CAAA,EAAI,EAAI,CAAA,EAAK,WACZ,EAAI,GACX,GAAM,AAAC,CAAA,EAAI,EAAM,EAAI,EAAM,EAAI,CAAA,EAAM,WAErC,GAAM,CAAA,EAAI,EAAI,CAAA,EAAK,UAGvB,EAAI,EACJ,EAAI,EACJ,EAAI,GAAM,GAAO,IAAM,EACvB,EAAI,EACJ,EAAI,CACR,CAGA,CAAC,CAAC,EAAE,CAAI,CAAC,CAAC,EAAE,CAAG,EAAK,EACpB,CAAC,CAAC,EAAE,CAAI,CAAC,CAAC,EAAE,CAAG,EAAK,EACpB,CAAC,CAAC,EAAE,CAAI,CAAC,CAAC,EAAE,CAAG,EAAK,EACpB,CAAC,CAAC,EAAE,CAAI,CAAC,CAAC,EAAE,CAAG,EAAK,EACpB,CAAC,CAAC,EAAE,CAAI,CAAC,CAAC,EAAE,CAAG,EAAK,CACxB,EAEA,YAAa,WAET,IAAI,EAAO,IAAI,CAAC,KAAK,CACjB,EAAY,EAAK,KAAK,CAEtB,EAAa,AAAmB,EAAnB,IAAI,CAAC,WAAW,CAC7B,EAAY,AAAgB,EAAhB,EAAK,QAAQ,CAY7B,OATA,CAAS,CAAC,IAAc,EAAE,EAAI,KAAS,GAAK,EAAY,GACxD,CAAS,CAAC,AAAC,CAAA,EAAc,KAAQ,GAAM,CAAA,EAAK,GAAG,CAAG,KAAK,KAAK,CAAC,EAAa,YAC1E,CAAS,CAAE,AAAE,CAAA,EAAY,KAAQ,GAAM,CAAA,EAAK,GAAG,CAAG,EAClD,EAAK,QAAQ,CAAG,AAAmB,EAAnB,EAAU,MAAM,CAGhC,IAAI,CAAC,QAAQ,GAGN,IAAI,CAAC,KAAK,AACrB,EAEA,MAAO,WACH,IAAI,EAAQ,EAAO,KAAK,CAAC,IAAI,CAAC,IAAI,EAGlC,OAFA,EAAM,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAEvB,CACX,CACJ,GAgBA,AA9GQ,EA8GN,IAAI,CAAG,EAAO,aAAa,CAAC,GAgB9B,AA9HQ,EA8HN,QAAQ,CAAG,EAAO,iBAAiB,CAAC,GAInC,EAAS,IAAI,AAErB,EAlJE,EAAO,OAAO,CAAa,EAA3B,EAAA,S,G,E,Q,S,C,C,C,MCHgB,EAAA,EAaV,SAAU,CAAQ,MAMjB,EAEA,EAFA,EAAO,AADC,AADJ,EACM,GAAG,CACA,IAAI,CAEjB,EAAO,AADC,AAHJ,EAGM,GAAG,CACA,IAAI,CAMV,AALE,AALL,EAKO,IAAI,CAKD,IAAI,CAAG,EAAK,MAAM,CAAC,CAWjC,KAAM,SAAU,CAAM,CAAE,CAAG,EAEvB,EAAS,IAAI,CAAC,OAAO,CAAG,IAAI,EAAO,IAAI,CAGrB,UAAd,OAAO,GACP,CAAA,EAAM,EAAK,KAAK,CAAC,EADrB,EAKA,IAAI,EAAkB,EAAO,SAAS,CAClC,EAAuB,AAAkB,EAAlB,CAGvB,CAAA,EAAI,QAAQ,CAAG,GACf,CAAA,EAAM,EAAO,QAAQ,CAAC,EAD1B,EAKA,EAAI,KAAK,GAWT,IAAK,IARD,EAAO,IAAI,CAAC,KAAK,CAAG,EAAI,KAAK,GAC7B,EAAO,IAAI,CAAC,KAAK,CAAG,EAAI,KAAK,GAG7B,EAAY,EAAK,KAAK,CACtB,EAAY,EAAK,KAAK,CAGjB,EAAI,EAAG,EAAI,EAAiB,IACjC,CAAS,CAAC,EAAE,EAAI,WAChB,CAAS,CAAC,EAAE,EAAI,SAEpB,CAAA,EAAK,QAAQ,CAAG,EAAK,QAAQ,CAAG,EAGhC,IAAI,CAAC,KAAK,EACd,EASA,MAAO,WAEH,IAAI,EAAS,IAAI,CAAC,OAAO,CAGzB,EAAO,KAAK,GACZ,EAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAC5B,EAcA,OAAQ,SAAU,CAAa,EAI3B,OAHA,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAGb,IAAI,AACf,EAgBA,SAAU,SAAU,CAAa,EAE7B,IAAI,EAAS,IAAI,CAAC,OAAO,CAGrB,EAAY,EAAO,QAAQ,CAAC,GAIhC,OAHA,EAAO,KAAK,GACD,EAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,GAGzD,CACJ,EAIL,EA3IE,EAAO,OAAO,CAAa,EAA3B,EAAA,S,G,E,Q,S,C,C,C,MCHgB,EAAA,EAaV,SAAU,CAAQ,MAQjB,EACA,EACA,EACA,EACA,EAEA,EAEA,EAUA,EA+LA,EAKA,EAoDA,EAkGA,EA+IA,EAoDA,EAsEA,EAkHA,EA6CA,CAvxBR,CAAA,EAAS,GAAG,CAAC,MAAM,GAIX,EAAO,CADP,EAAQ,AADJ,EACM,GAAG,EACA,IAAI,CACjB,EAAY,EAAM,SAAS,CAC3B,EAAyB,EAAM,sBAAsB,CAE9C,CADP,EAAQ,AALJ,EAKM,GAAG,EACA,IAAI,CACjB,EAAS,EAAM,MAAM,CAErB,EAAS,AADA,AARL,EAQO,IAAI,CACC,MAAM,CAUtB,EAAS,EAAM,MAAM,CAAG,EAAuB,MAAM,CAAC,CAMtD,IAAK,EAAK,MAAM,GAgBhB,gBAAiB,SAAU,CAAG,CAAE,CAAG,EAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAE,EAAK,EAClD,EAgBA,gBAAiB,SAAU,CAAG,CAAE,CAAG,EAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAE,EAAK,EAClD,EAaA,KAAM,SAAU,CAAS,CAAE,CAAG,CAAE,CAAG,EAE/B,IAAI,CAAC,GAAG,CAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAG3B,IAAI,CAAC,UAAU,CAAG,EAClB,IAAI,CAAC,IAAI,CAAG,EAGZ,IAAI,CAAC,KAAK,EACd,EASA,MAAO,WAEH,EAAuB,KAAK,CAAC,IAAI,CAAC,IAAI,EAGtC,IAAI,CAAC,QAAQ,EACjB,EAcA,QAAS,SAAU,CAAU,EAKzB,OAHA,IAAI,CAAC,OAAO,CAAC,GAGN,IAAI,CAAC,QAAQ,EACxB,EAgBA,SAAU,SAAU,CAAU,EAS1B,OAPI,GACA,IAAI,CAAC,OAAO,CAAC,GAIQ,IAAI,CAAC,WAAW,EAG7C,EAEA,QAAS,EAET,OAAQ,EAER,gBAAiB,EAEjB,gBAAiB,EAejB,cAAgB,WACZ,SAAS,EAAqB,CAAG,QAC7B,AAAI,AAAc,UAAd,OAAO,EACA,EAEA,CAEf,CAEA,OAAO,SAAU,CAAM,EACnB,MAAO,CACH,QAAS,SAAU,CAAO,CAAE,CAAG,CAAE,CAAG,EAChC,OAAO,EAAqB,GAAK,OAAO,CAAC,EAAQ,EAAS,EAAK,EACnE,EAEA,QAAS,SAAU,CAAU,CAAE,CAAG,CAAE,CAAG,EACnC,OAAO,EAAqB,GAAK,OAAO,CAAC,EAAQ,EAAY,EAAK,EACtE,CACJ,CACJ,CACJ,GACJ,GAOmB,EAAM,YAAY,CAAG,EAAO,MAAM,CAAC,CAClD,YAAa,WAIT,OAF2B,IAAI,CAAC,QAAQ,CAAC,CAAA,EAG7C,EAEA,UAAW,CACf,GAKI,EAAS,AAlNL,EAkNO,IAAI,CAAG,CAAC,EAKnB,EAAkB,EAAM,eAAe,CAAG,EAAK,MAAM,CAAC,CAatD,gBAAiB,SAAU,CAAM,CAAE,CAAE,EACjC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAQ,EACzC,EAcA,gBAAiB,SAAU,CAAM,CAAE,CAAE,EACjC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAQ,EACzC,EAYA,KAAM,SAAU,CAAM,CAAE,CAAE,EACtB,IAAI,CAAC,OAAO,CAAG,EACf,IAAI,CAAC,GAAG,CAAG,CACf,CACJ,GAKI,EAAM,EAAO,GAAG,CAAI,WAIpB,IAAI,EAAM,EAAgB,MAAM,GA6DhC,SAAS,EAAS,CAAK,CAAE,CAAM,CAAE,CAAS,EAItC,IAHI,EAGA,EAAK,IAAI,CAAC,GAAG,CAGb,GACA,EAAQ,EAGR,IAAI,CAAC,GAAG,CAzVU,KAAA,GA2VlB,EAAQ,IAAI,CAAC,UAAU,CAI3B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,IAC3B,CAAK,CAAC,EAAS,EAAE,EAAI,CAAK,CAAC,EAAE,AAErC,CAEA,OA9EA,EAAI,SAAS,CAAG,EAAI,MAAM,CAAC,CAWvB,aAAc,SAAU,CAAK,CAAE,CAAM,EAEjC,IAAI,EAAS,IAAI,CAAC,OAAO,CACrB,EAAY,EAAO,SAAS,CAGhC,EAAS,IAAI,CAAC,IAAI,CAAE,EAAO,EAAQ,GACnC,EAAO,YAAY,CAAC,EAAO,GAG3B,IAAI,CAAC,UAAU,CAAG,EAAM,KAAK,CAAC,EAAQ,EAAS,EACnD,CACJ,GAKA,EAAI,SAAS,CAAG,EAAI,MAAM,CAAC,CAWvB,aAAc,SAAU,CAAK,CAAE,CAAM,EAEjC,IAAI,EAAS,IAAI,CAAC,OAAO,CACrB,EAAY,EAAO,SAAS,CAG5B,EAAY,EAAM,KAAK,CAAC,EAAQ,EAAS,GAG7C,EAAO,YAAY,CAAC,EAAO,GAC3B,EAAS,IAAI,CAAC,IAAI,CAAE,EAAO,EAAQ,GAGnC,IAAI,CAAC,UAAU,CAAG,CACtB,CACJ,GAwBO,CACX,IAUI,EAAQ,AALA,CAAA,AAxWJ,EAwWM,GAAG,CAAG,CAAC,CAAA,EAKH,KAAK,CAAG,CAatB,IAAK,SAAU,CAAI,CAAE,CAAS,EAY1B,IAAK,IAVD,EAAiB,AAAY,EAAZ,EAGjB,EAAgB,EAAiB,EAAK,QAAQ,CAAG,EAGjD,EAAc,GAAkB,GAAO,GAAiB,GAAO,GAAiB,EAAK,EAGrF,EAAe,EAAE,CACZ,EAAI,EAAG,EAAI,EAAe,GAAK,EACpC,EAAa,IAAI,CAAC,GAXtB,IAaI,EAAU,EAAU,MAAM,CAAC,EAAc,GAG7C,EAAK,MAAM,CAAC,EAChB,EAaA,MAAO,SAAU,CAAI,EAEjB,IAAI,EAAgB,AAAwC,IAAxC,EAAK,KAAK,CAAE,EAAK,QAAQ,CAAG,IAAO,EAAE,AAGzD,CAAA,EAAK,QAAQ,EAAI,CACrB,CACJ,EAOkB,EAAM,WAAW,CAAG,EAAO,MAAM,CAAC,CAOhD,IAAK,EAAO,GAAG,CAAC,MAAM,CAAC,CACnB,KAAM,EACN,QAAS,CACb,GAEA,MAAO,WAIH,EAAO,KAAK,CAAC,IAAI,CAAC,IAAI,EAGtB,IANI,EAMA,EAAM,IAAI,CAAC,GAAG,CACd,EAAK,EAAI,EAAE,CACX,EAAO,EAAI,IAAI,AAGf,CAAA,IAAI,CAAC,UAAU,EAAI,IAAI,CAAC,eAAe,CACvC,EAAc,EAAK,eAAe,EAElC,EAAc,EAAK,eAAe,CAElC,IAAI,CAAC,cAAc,CAAG,GAGtB,IAAI,CAAC,KAAK,EAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAI,EACtC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAE,GAAM,EAAG,KAAK,GAEpC,IAAI,CAAC,KAAK,CAAG,EAAY,IAAI,CAAC,EAAM,IAAI,CAAE,GAAM,EAAG,KAAK,EACxD,IAAI,CAAC,KAAK,CAAC,SAAS,CAAG,EAE/B,EAEA,gBAAiB,SAAU,CAAK,CAAE,CAAM,EACpC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAO,EACnC,EAEA,YAAa,WAIT,IAHI,EAGA,EAAU,IAAI,CAAC,GAAG,CAAC,OAAO,CAiB9B,OAdI,IAAI,CAAC,UAAU,EAAI,IAAI,CAAC,eAAe,EAEvC,EAAQ,GAAG,CAAC,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,SAAS,EAGtC,EAAuB,IAAI,CAAC,QAAQ,CAAC,CAAA,KAGrC,EAAuB,IAAI,CAAC,QAAQ,CAAC,CAAA,GAGrC,EAAQ,KAAK,CAAC,IAGX,CACX,EAEA,UAAW,CACf,GAeI,EAAe,EAAM,YAAY,CAAG,EAAK,MAAM,CAAC,CAoBhD,KAAM,SAAU,CAAY,EACxB,IAAI,CAAC,KAAK,CAAC,EACf,EAiBA,SAAU,SAAU,CAAS,EACzB,MAAO,AAAC,CAAA,GAAa,IAAI,CAAC,SAAQ,AAAR,EAAW,SAAS,CAAC,IAAI,CACvD,CACJ,GAUI,EAAmB,AALR,CAAA,AA3iBP,EA2iBS,MAAM,CAAG,CAAC,CAAA,EAKK,OAAO,CAAG,CActC,UAAW,SAAU,CAAY,EAI7B,IAAI,EAAa,EAAa,UAAU,CACpC,EAAO,EAAa,IAAI,CAS5B,MAAO,CANH,EACY,EAAU,MAAM,CAAC,CAAC,WAAY,WAAW,EAAE,MAAM,CAAC,GAAM,MAAM,CAAC,GAE/D,GAGC,QAAQ,CAAC,EAC9B,EAeA,MAAO,SAAU,CAAU,EAIvB,IAHI,EAGA,EAAa,EAAO,KAAK,CAAC,GAG1B,EAAkB,EAAW,KAAK,CAYtC,OAT0B,YAAtB,CAAe,CAAC,EAAE,EAAkB,AAAsB,YAAtB,CAAe,CAAC,EAAE,GAEtD,EAAO,EAAU,MAAM,CAAC,EAAgB,KAAK,CAAC,EAAG,IAGjD,EAAgB,MAAM,CAAC,EAAG,GAC1B,EAAW,QAAQ,EAAI,IAGpB,EAAa,MAAM,CAAC,CAAE,WAAY,EAAY,KAAM,CAAK,EACpE,CACJ,EAKI,EAAqB,EAAM,kBAAkB,CAAG,EAAK,MAAM,CAAC,CAM5D,IAAK,EAAK,MAAM,CAAC,CACb,OAAQ,CACZ,GAoBA,QAAS,SAAU,CAAM,CAAE,CAAO,CAAE,CAAG,CAAE,CAAG,EAExC,EAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAGtB,IAAI,EAAY,EAAO,eAAe,CAAC,EAAK,GACxC,EAAa,EAAU,QAAQ,CAAC,GAGhC,EAAY,EAAU,GAAG,CAG7B,OAAO,EAAa,MAAM,CAAC,CACvB,WAAY,EACZ,IAAK,EACL,GAAI,EAAU,EAAE,CAChB,UAAW,EACX,KAAM,EAAU,IAAI,CACpB,QAAS,EAAU,OAAO,CAC1B,UAAW,EAAO,SAAS,CAC3B,UAAW,EAAI,MAAM,AACzB,EACJ,EAmBA,QAAS,SAAU,CAAM,CAAE,CAAU,CAAE,CAAG,CAAE,CAAG,EAU3C,OARA,EAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAGtB,EAAa,IAAI,CAAC,MAAM,CAAC,EAAY,EAAI,MAAM,EAG/B,EAAO,eAAe,CAAC,EAAK,GAAK,QAAQ,CAAC,EAAW,UAAU,CAGnF,EAiBA,OAAQ,SAAU,CAAU,CAAE,CAAM,QAChC,AAAI,AAAqB,UAArB,OAAO,EACA,EAAO,KAAK,CAAC,EAAY,IAAI,EAE7B,CAEf,CACJ,GAUI,EAAa,AALL,CAAA,AAnuBJ,EAmuBM,GAAG,CAAG,CAAC,CAAA,EAKE,OAAO,CAAG,CAkB7B,QAAS,SAAU,CAAQ,CAAE,CAAO,CAAE,CAAM,CAAE,CAAI,CAAE,CAAM,EAOtD,GALK,GACD,CAAA,EAAO,EAAU,MAAM,CAAC,EAD5B,EAKK,EAGD,IAAI,EAAM,EAAO,MAAM,CAAC,CAAE,QAAS,EAAU,EAAQ,OAAQ,CAAO,GAAG,OAAO,CAAC,EAAU,QAFzF,IAAI,EAAM,EAAO,MAAM,CAAC,CAAE,QAAS,EAAU,CAAO,GAAG,OAAO,CAAC,EAAU,GAO7E,IAAI,EAAK,EAAU,MAAM,CAAC,EAAI,KAAK,CAAC,KAAK,CAAC,GAAU,AAAS,EAAT,GAIpD,OAHA,EAAI,QAAQ,CAAG,AAAU,EAAV,EAGR,EAAa,MAAM,CAAC,CAAE,IAAK,EAAK,GAAI,EAAI,KAAM,CAAK,EAC9D,CACJ,EAMI,EAAsB,EAAM,mBAAmB,CAAG,EAAmB,MAAM,CAAC,CAM5E,IAAK,EAAmB,GAAG,CAAC,MAAM,CAAC,CAC/B,IAAK,CACT,GAmBA,QAAS,SAAU,CAAM,CAAE,CAAO,CAAE,CAAQ,CAAE,CAAG,EAK7C,IAAI,EAAgB,AAHpB,CAAA,EAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAtB,EAGwB,GAAG,CAAC,OAAO,CAAC,EAAU,EAAO,OAAO,CAAE,EAAO,MAAM,CAAE,EAAI,IAAI,CAAE,EAAI,MAAM,CAGjG,CAAA,EAAI,EAAE,CAAG,EAAc,EAAE,CAGzB,IAAI,EAAa,EAAmB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAE,EAAQ,EAAS,EAAc,GAAG,CAAE,GAK3F,OAFA,EAAW,KAAK,CAAC,GAEV,CACX,EAmBA,QAAS,SAAU,CAAM,CAAE,CAAU,CAAE,CAAQ,CAAE,CAAG,EAEhD,EAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAGtB,EAAa,IAAI,CAAC,MAAM,CAAC,EAAY,EAAI,MAAM,EAG/C,IAAI,EAAgB,EAAI,GAAG,CAAC,OAAO,CAAC,EAAU,EAAO,OAAO,CAAE,EAAO,MAAM,CAAE,EAAW,IAAI,CAAE,EAAI,MAAM,EAQxG,OALA,EAAI,EAAE,CAAG,EAAc,EAAE,CAGT,EAAmB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAE,EAAQ,EAAY,EAAc,GAAG,CAAE,EAGjG,CACJ,GAIL,EA33BE,EAAO,OAAO,CAAa,EAAQ,EAAA,SAAnC,EAAA,S,GGDF,IAAM,EAAN,cAA0B,MACjB,IADuB,AAG9B,aAAY,CAAA,CAAiB,CAAiB,CAAA,CAC5C,KAAA,CAAM,GACN,IAAA,CAAK,IAAO,CAAA,cACZ,IAAA,CAAK,IAAO,CAAA,CAAA,CAEhB,ECJa,EAAiB,AAAC,GAAmC,CAAA,CAChE,KAAM,EAAM,IAAA,CACZ,QAAS,EAAM,OAAA,CACf,MAAO,EAAM,KAAA,CACb,WAAY,aDEC,ECF8B,EAAM,IAAO,CAAA,KAD3C,CAEf,CAAA,EAKa,EAAmB,CAAC,CAAA,KAC/B,CAAA,CAAA,QACA,CAAA,CAAA,MACA,CAAA,CAAA,WACA,CADA,CAE4B,IACtB,IAAA,EAAoB,EACtB,IDXS,ECWO,EAAY,GAC5B,AAAI,MAAM,GAKP,OAHP,EAAkB,IAAO,CAAA,EACzB,EAAkB,KAAQ,CAAA,EAEnB,CACT,EC9BM,EAAuB,OAAO,SAE9B,EAAN,MACW,KADc,AAEd,CAAA,aADA,AAMT,EAAA,CAAS,CAAA,CALA,AAOT,aACE,CAAA,CACA,CAGA,CAAA,CACA,IAAA,CAAK,KAAQ,CAAA,EACb,IAAA,CAAK,aAAA,CAAgB,GAAS,aAAA,CAElC,ECpBO,EAAQ,SCWF,EAAW,AACtB,GAEO,AAAiB,UAAjB,OAAO,GAAsB,AAAU,OAAV,EAGzB,EAAa,AAAC,GAClB,AAAiB,YAAjB,OAAO,EAGH,EAAY,AAAC,GACjB,EAAS,IAAS,EAAK,SAAc,GAAA,EAGjC,EAAe,AAAC,GACpB,AAAiB,QAAjB,EAAQ,IAAS,CAGb,EAAgB,AAAC,GACrB,AAAiB,SAAjB,EAAQ,IAAS,CAGb,EAAgB,AAAC,GACrB,AAAiB,SAAjB,EAAQ,IAAS,CAGb,EAAgB,AAAC,GACrB,AAAiB,SAAjB,EAAQ,IAAS,CAGb,EAAiB,AAAC,GACtB,AAAiB,UAAjB,EAAQ,IAAS,CAGb,EAAmB,AAC9B,GAEO,AAAiB,YAAjB,EAAQ,IAAS,CC1Bb,EAAgC,CAC3C,EACA,EAA0B,EACvB,IACH,IAAM,EAA4B,EAAC,CAEnC,IAAA,IAAW,KAAO,OAAO,IAAK,CAAA,GAAU,CAChC,IAAA,EAAQ,CAAA,CAAQ,EAAG,CAErB,EAAW,GACb,EAAY,IAAK,CAAA,IAAI,EAAa,EAAI,EAC7B,EAAS,IACN,EAAA,IAAA,IACP,EAA8B,EAAO,IAAI,EAAa,EAAI,EAEjE,CAGK,OAAA,CACT,EAEa,EAAwB,CACnC,EACA,KAEA,IAAM,EAAS,EAAW,MAAA,CACxB,CAAC,EAAK,IACG,EAAS,GAAO,CAAA,CAAI,EAAe,CAAA,KAAA,EAE5C,GAGK,OAAA,EAAW,GAAU,EAAS,KAAA,CACvC,EAEa,EAAmB,AAAC,GACxB,EAAW,IAAA,CAAK,KC9CnB,EAA0B,CAC9B,EACA,EACA,IACkB,CAAA,CAClB,UAAA,EACA,QAAA,EACA,KAAM,QACN,OAAA,EACA,QAAS,CAAA,EACT,GAAI,aAAiB,MACjB,CAAE,MAAO,EAAe,GAAQ,0BAA2B,CAAA,CAAA,EAC3D,CAAE,MAAO,CAHJ,CAAA,AAIX,CAAA,EA6FO,EAvFoB,CACzB,EACA,EACA,EACA,KAEA,IAAI,EAAc,CAAA,EAEZ,EAAgB,MAAO,QAiBvB,EACA,EAjBJ,GAAI,GASA,CAAC,EAAc,GAHjB,OAOF,IAAM,CAAA,SAAA,EAAY,EAAiB,EAAQ,UAAU,EAAC,OAAA,CAAA,CAAW,GAEjE,GAAM,CAAA,WAAE,CAAA,CAAA,KAAY,CAAM,CAAA,GAAI,CAAA,CAAW,CAAA,EAIrC,GAAA,CACI,IAAA,EAAS,EAAsB,EAAY,GAEjD,GAAI,CAAC,EACH,MAAM,INnDC,EMoDL,mBACA,CAAA,SAAA,EAAY,EAAiB,GAAW,gBAAA,CADxC,EAKJ,IAAI,EAAiB,MAAM,KAAU,GAEjC,aJjDK,IIkDP,EAAgB,EAAM,aAAA,CACtB,EAAQ,MAAM,EAAM,KAAA,EAGP,EAAA,CACb,UAAA,EACA,QAAA,EACA,KAAM,QACN,OAAA,EACA,MAAA,CAAA,CACF,CAAA,MACO,EAAO,CACC,EAAA,EAAwB,EAAS,EAAQ,EAAK,CAM/D,IAAI,EAIA,GAAA,CACF,IAAM,CAAW,QAAA,EAAA,EAAiB,GAAW,QAAA,CAAA,CAAY,GAC/C,EAAA,WAAA,CAAY,EAAc,EAAa,CAAA,MAC1C,EAAO,CASR,KALwB,mBAAzB,EAAgB,IAAA,GACJ,EAAA,EAAwB,EAAS,EAAQ,GACxD,IAAM,CAAW,QAAA,EAAA,EAAiB,GAAW,QAAA,CAAA,CAAY,GACzD,EAAU,WAAA,CAAY,IAElB,CAAA,CACR,EAKF,OAFA,EAAU,iBAAA,CAAkB,GAErB,KACS,EAAA,CAAA,EACd,EAAU,oBAAA,CAAqB,EAAa,CAEhD,EChHO,EAAQ,OAAO,UAAY,EAAA,KAAK,SACpC,CAAA,IACC,MAAU,CACP,IAAA,CAAK,GACL,GAAA,CAAI,IACH,KAAK,KAAA,CAAM,KAAK,MAAA,GAAW,OAAO,gBAAgB,EAAE,QAAA,CAAS,KAE9D,IAAA,CAAK,IAAA,ECXN/T,EAAuB,OAAO,eAE9B,EAAN,MACW,aADO,AAEP,CAAA,OADA,AAMT,EAAA,CAASA,CAAAA,CALA,AAOT,aAAY,CAAgE,CAAA,CAC1E,IAAA,CAAK,aAAA,CAAgB,GAAS,cAC9B,IAAA,CAAK,OAAA,CAAU,GAAS,OAAA,CAE5B,ECSM,EAA6B,IAAA,IAAI,CAAC,QAAS,OAAQ,OAAO,EAE1D,EAAoB,CACxB,EACA,EACA,EAAmB,EACP,GACL,IAAI,MACT,EAAK,MAAA,CACD,KAAM,EAGC,OAAA,MAAA,CAAO,MAClB,CACE,IAAI,CAAA,CAAQ,CAAc,EAOxB,GAAI,AAAS,SAAT,SAmBJ,AAAI,EAAK,MAAA,EAAU,EAAuB,GAAA,CAAI,GACrC,QAAQ,GAAI,CAAA,EAAQ,GAGtB,EAAkB,EAAU,EAAK,IAAI,EAAM,EAAK,CAAA,EAEzD,MAAA,CAAM,EAAQ,EAAU,IACf,EAAS,EAAM,EACxB,GAKA,EAAwC,AAAC,GACtC,ITlEM,ESmEX,uBACA,CAAe,YAAA,EAAA,EACb,GACD,qCAAA,CADC,EA0HC,EAhHoB,CACzB,EACA,EACA,KAEA,IAAI,EAAc,CAAA,EACZ,EAAA,IAAoB,IAEpB,EAAgB,AAAC,IACjB,GAAA,CAAC,EAAe,GAClB,OAGF,GAAM,CAAA,OAAE,CAAA,CAAA,MAAQ,CAAO,CAAA,QAAA,CAAA,CAAA,0BAAS,CAAA,CAA8B,CAAA,EACxD,EAAe,EAAc,GAAA,CAAI,GAElC,IAIL,EAAc,MAAA,CAAO,GACrB,IACE,CAAY,SAAA,EAAA,EAAiB,EAAa,UAAU,EAAC,OAAA,CAAA,CACrD,GAGE,EACW,EAAA,MAAA,CACX,EAA4B,EAAiB,GAAS,GAGxD,EAAa,OAAA,CAAQ,GACvB,EA0EK,OAvEP,EAAU,iBAAA,CAAkB,GAuErB,CACL,YAtEkB,EAAkB,CAAC,EAAY,KACjD,GAAI,EACF,MAAM,EAAsC,GAG9C,IAAM,EAAS,IACT,EAAU,CAAA,CAAK,EAAK,MAAA,CAAS,EAAC,CAC9B,EAAmB,aDtHd,ECuHL,CAAA,QAAE,CAAS,CAAA,cAAA,CAAA,CAAkB,CAAA,EAAmB,EAAU,CAAA,EAC1D,EAAqB,EAAmB,EAAK,KAAM,CAAA,EAAG,IAAM,EAElE,OAAO,IAAI,QAAQ,CAAC,EAAS,KAU3B,IAAM,EACJ,AAAY,KAAA,IAAZ,EACI,OAAO,UAAA,CAAW,KAChB,EAAc,MAAA,CAAO,GACrB,EACE,IT9ID,ES+IG,sBACA,CAAe,YAAA,EAAA,EACb,GACD,mBAAA,EAAsB,EAAO,EAAA,CAD5B,EAGN,EACC,GACH,KAAA,EAEN,EAAc,GAAA,CAAI,EAAQ,CAAE,WAAA,EAAY,QAAA,EAAS,OAAA,EAAQ,UAAA,CAAA,GAErD,GAAA,CACF,IAAM,EAA2B,CAC/B,UAAA,EACA,QAAA,EACA,KAAM,OACN,GAAI,EACJ,WAAA,EACA,KAAM,CAAA,EAER,IAAM,CAAW,QAAA,EAAA,EAAiB,GAAW,OAAA,CAAA,CAAW,GAC9C,EAAA,WAAA,CAAY,EAAa,EAAa,CAAA,MACzC,EAAO,CACd,EACE,ITvKK,ESuKW,sBAAwB,EAAgB,OAAO,EACjE,CACF,EACD,EACA,GAgBD,QAdc,KAId,IAAA,GAAW,CAAA,WAAE,CAAY,CAAA,OAAA,CAAA,CAAA,UAAQ,CAAA,CAAe,GAHlC,EAAA,CAAA,EACd,EAAU,oBAAA,CAAqB,GAEiB,EAAc,MAAA,IAC5D,aAAa,GACN,EAAA,EAAsC,IAG/C,EAAc,KAAM,EAAA,CAKpB,CAEJ,ECtLO,EAhByB,KAC1B,IAAA,EACA,EAOG,MAAA,CACL,QANc,IAAI,QAA2B,CAAC,EAAK,KACzC,EAAA,EACD,EAAA,CAAA,GAKT,QAAA,EACA,OAAA,CAAA,CAEJ,ECLO,EARP,cAA6B,MAC3B,YAAY,CAAiB,CAAA,CAC3B,KAAA,CACE,CAAA,iFAAA,EAAoF,EAAO,CAD7F,CAEA,CAEJ,ECAa,EAAmC,oBAwEnC,EAAsB,AACjC,GAEO,EAAS,IAAS,WAAY,EAGjC,EAAoB,AAAC,GACzB,EAAW,KAAA,CAAM,KACb,EAAsB,AAAC,GAA2B,EAAW,IAAA,CAAK,KAElE,EAA4B,AAAC,GAC1B,IAAI,EACT,CAAoC,iCAAA,EAAA,KAAK,SAAU,CAAA,GAAQ,CADlD,EAKA,EAAiB,AAAC,IACzB,GAAA,AAAmB,QAAnB,EAAQ,MAAA,CACH,MAAA,CACL,UAAA,EACA,QAAS,KAAA,EACT,KAAM,MACN,cAAe,CAAA,EAIf,GAAA,AAAmB,QAAnB,EAAQ,MAAA,CACH,MAAA,CACL,UAAA,EACA,QAAS,KAAA,EACT,KAAM,MAAA,EAIN,GAAA,AAAmB,SAAnB,EAAQ,MAAA,CACH,MAAA,CACL,UAAA,EACA,QAAS,KAAA,EACT,KAAM,OAEN,GAAK,EAAQ,EAAA,CACb,WAAY,EAAkB,EAAQ,UAAU,EAChD,KAAM,EAAQ,IADkC,AAClC,EAId,GAAA,AAAmB,UAAnB,EAAQ,MAAA,OACN,AAAuB,cAAvB,EAAQ,UAAA,CACH,CACL,UAAA,EACA,QAAS,KAAA,EACT,KAAM,QAEN,OAAS,EAAQ,EAAA,CACjB,MAAO,EAAQ,WADE,AACF,EAGV,CACL,UAAA,EACA,QAAS,KAAA,EACT,KAAM,QAEN,OAAS,EAAQ,EAAA,CACjB,QAAS,CAAA,EACT,GAAI,EAAQ,kBACR,CAAA,CACE,MAAO,EAAQ,WAAA,CACf,0BAA2B,CAAA,CAAA,EAE7B,CACE,MAAO,EAAQ,WADjB,AACiB,CAAA,AACjB,CAKV,OAAM,EAA0B,EAClC,EAEa,EAAmB,AAAC,IAC3B,GAAA,EAAc,GACT,MAAA,CACL,OAAQ,SACR,YAAa,EAAQ,WAAY,CAAA,GAAA,CAAI,EAAmB,EAIxD,GAAA,EAAc,GACT,MAAA,CACL,OAAQ,OAER,GAAK,EAAQ,EAAA,CACb,WAAY,EAAoB,EAAQ,UAAU,EAClD,KAAM,EAAQ,IADoC,AACpC,EAId,GAAA,EAAe,UACjB,AAAI,EAAQ,OAAS,CACZ,CACL,OAAQ,QAER,GAAK,EAAQ,MAAA,CACb,WAAY,WACZ,GAAI,EAAQ,yBACR,CAAA,CACE,YAAa,EAAQ,KAAA,CACrB,mBAAoB,CAAA,CAAA,EAEtB,CAAE,YAAa,EAAQ,KAAM,AAFP,CAAA,AAEO,EAG5B,CACL,OAAQ,QAER,GAAK,EAAQ,MAAA,CACb,WAAY,YACZ,YAAa,EAAQ,KADT,AACS,CAK3B,OAAM,EAA0B,EAClC,ECsDO,EArKY,CAA2B,CAAA,UAC5C,CAAA,CAAA,QACA,CAAA,CAAA,QACA,CAAA,CAAA,QACA,CAAA,CAAA,IACA,CADA,CAEiD,QAE7C,EADJ,IAAM,EAAgB,IAEhB,EAAkC,EAAC,CACrC,EAAa,CAAA,EAEX,EAAc,EAA8B,GAE5C,CAAA,QAAE,CAAA,CAAA,QAAS,CAAS,CAAA,OAAA,CAAA,CAAA,CAAW,IAK/B,EACJ,AAAY,KAAA,IAAZ,EACI,WAAW,KACT,EACE,IbzGG,Ea0GD,qBACA,CAAA,2BAAA,EAA8B,EAAO,EAAA,CADrC,EAGJ,EACC,GACH,KAAA,EAEA,EAAU,KACd,IAAA,IAAW,KAAkB,EACZ,GACjB,EAGI,EAAqC,KACzC,GAAI,EAGF,OAGF,EAAgB,IAAA,CAAK,EAAmB,EAAW,EAAS,EAAS,IAE/D,GAAA,CAAA,YAAE,CAAA,CAAa,QAAS,CAAA,CAAA,CAAyB,EAErD,EAAW,EAAS,GAEtB,EAAgB,IAAA,CAAK,GAErB,aAAa,GACA,EAAA,CAAA,EAEL,EAAA,CACN,YAAA,EACA,QAAA,CAAA,EACD,EAGG,EAAiB,KACrB,IAAM,EAAyB,CAC7B,UAAA,EACA,KAAM,MACN,QAAA,EACA,cAAA,CAAA,EAEF,IAAM,wBAAyB,GAE3B,GAAA,CACF,EAAU,WAAA,CAAY,EAAU,CAAA,MACzB,EAAO,CACd,EAAO,Ib3JE,Ea2Jc,sBAAwB,EAAgB,OAAO,EAAC,CACzE,EAGI,EAAmB,AAAC,IAGxB,GAFA,IAAM,yBAA0B,GAG9B,EAAQ,aAAkB,GAAA,GAE1B,IAAwB,IAK1B,EAAsB,EAAQ,aAAA,CAIf,IAOX,CAJF,CAAA,EAAgB,GAEhB,IAAwB,CAAxB,GAZA,OAkBF,IAAM,EAA2B,CAC/B,UAAA,EACA,QAAA,EACA,KAAM,OACN,YAAA,CAAA,EAEF,IAAM,yBAA0B,GAE5B,GAAA,CACF,EAAU,WAAA,CAAY,EAAW,CAAA,MAC1B,EAAO,CACd,EAAO,IbpME,EaoMc,sBAAwB,EAAgB,OAAO,GACtE,MAAA,CACF,EAGI,EAAoB,AAAC,IACzB,IAAM,0BAA2B,GACjC,IAAM,EAA2B,CAC/B,UAAA,EACA,QAAA,EACA,KAAM,MAAA,EAER,IAAM,yBAA0B,GAE5B,GAAA,CACF,EAAU,WAAA,CAAY,EAAW,CAAA,MAC1B,EAAO,CACd,EAAO,IbrNE,EaqNc,sBAAwB,EAAgB,OAAO,GACtE,MAAA,CAGiC,GAAA,EAG/B,EAAoB,AAAC,IACzB,IAAM,0BAA2B,GACE,GAAA,EAG/B,EAAgB,AAAC,IACjB,EAAa,IACf,EAAiB,GAGf,EAAc,IAChB,EAAkB,GAGhB,EAAc,IAChB,EAAkB,EACpB,EAQK,OALP,EAAU,iBAAA,CAAkB,GAC5B,EAAgB,IAAK,CAAA,IAAM,EAAU,oBAAA,CAAqB,IAE3C,IAER,CACT,ECjPO,EAfM,AACX,IAEA,IACI,EADA,EAAW,CAAA,EAGf,MAAO,CAAA,GAAI,KACJ,IACQ,EAAA,CAAA,EACF,EAAA,KAAM,IAEV,EAEX,ECqBM,EAAA,IAAqB,QCHrB,EAAN,MACW,CAAA,CAAA,AADgC,AAEhC,EAAA,CAAA,AADA,AAET,EAAA,CAAA,AADS,AAET,EAAA,CAAA,AADA,AAEA,EAAA,CAAA,AADA,AAEA,EAAA,CAAA,CAAA,IAAwB,GADxB,AAEA,EAAA,CAAA,AADwD,AAGxD,EAAA,CAAkC,CAAA,CAAA,CAFlC,AAIA,aAAY,CAAA,aAAE,CAAc,CAAA,eAAA,CAAA,CAA2B,CAAA,CACrD,GAAI,CAAC,EACG,MAAA,IhBjCG,EgBiCa,mBAAoB,+BAG5C,CAAA,IAAA,CAAK,CAAA,CAAgB,CAAA,EACrB,IAAA,CAAK,CAAA,CAAA,CAAkB,GAAgB,OAClC,EACD,CAAC,OAAO,MAAM,CAAA,CAGpB,WAAa,CAAC,CAAA,IACZ,CAAA,CAAA,wBACA,CADA,CAEgC,IAChC,IAAA,CAAK,CAAA,CAAO,CAAA,EACZ,IAAA,CAAK,CAAA,CAA2B,CAAA,EACzB,OAAA,gBAAA,CAAiB,UAAW,IAAA,CAAK,CAAA,CAA8B,CAAA,CAAA,AAGxE,CAAA,YAAc,CAAC,EAAkB,KAC3B,GAAA,EAAa,GAAU,CACnB,IAAA,EAAmB,IAAK,CAAA,CAAA,CAAA,CAA4B,GACrD,IAAA,CAAA,CAAA,CAAA,CAAc,WAAA,CAAY,EAAS,CACtC,aAAc,EACd,SAAU,CAAA,GAEZ,MAAA,CAGF,GACE,EAAc,IAId,IAAA,CAAK,CAAA,CACL,CAAA,CACA,IAAM,EAAU,IAAA,CAAK,CAAA,CACjB,CAAA,EAAiB,GACjB,EACE,EAAmB,IAAK,CAAA,CAAA,CAAA,CAA4B,GACrD,IAAA,CAAA,CAAA,CAAA,CAAc,WAAA,CAAY,EAAS,CACtC,aAAc,EACd,SAAU,CAAA,GAEZ,MAAA,CAGE,GAAA,EAAc,GAAU,CAC1B,GAAM,CAAA,MAAE,CAAA,CAAA,MAAO,CAAM,CAAA,CAAI,IAAI,cAC7B,CAAA,IAAA,CAAK,CAAA,CAAQ,CAAA,EACP,EAAA,gBAAA,CAAiB,UAAW,IAAA,CAAK,CAAA,CAAsB,EAC7D,EAAM,KAAM,GACZ,IAAM,EAAsB,CAAC,KAAW,GAAiB,EAAG,CAAA,CACtD,EAAmB,IAAK,CAAA,CAAA,CAAA,CAA4B,GACrD,IAAA,CAAA,CAAA,CAAA,CAAc,WAAA,CAAY,EAAS,CACtC,aAAc,EACd,SAAU,CAAA,GAEZ,MAAA,CAGF,GAAI,IAAA,CAAK,CAAA,CAAO,CAAA,CACT,IAAA,CAAA,CAAA,CAAA,CAAM,WAAA,CAAY,EAAS,CAC9B,SAAU,CAAA,GAEZ,MAAA,CAGI,MAAA,IAAI,EAAe,oBAAmB,CAAA,AAG9C,CAAA,kBAAoB,AAAC,IACd,IAAA,CAAA,CAAA,CAAA,CAAkB,GAAA,CAAI,EAAQ,CAAA,AAGrC,CAAA,qBAAuB,AAAC,IACjB,IAAA,CAAA,CAAA,CAAA,CAAkB,MAAA,CAAO,EAAQ,CAAA,AAGxC,CAAA,QAAU,KACD,OAAA,mBAAA,CAAoB,UAAW,IAAA,CAAK,CAAA,CAA8B,EACzE,IAAA,CAAK,CAAA,CAAa,GAClB,IAAA,CAAK,CAAA,CAAA,CAAkB,KAAM,EAAA,CAAA,AAG/B,EAAA,CAAA,CAAmB,AAAC,GACX,IAAA,CAAK,CAAA,CAAgB,CAAA,IAAA,CAAK,AAAC,GAChC,aAAyB,OACrB,EAAc,IAAA,CAAK,GACnB,IAAkB,GAAU,AAAkB,MAAlB,EAClC,AAGF,EAAA,CAAA,CAA8B,AAAC,IAOzB,GAAA,EAAa,GACR,MAAA,IAGL,GAAA,CAAC,IAAA,CAAK,CAAA,CAAuB,CACzB,MAAA,IAAI,EAAe,kCAWpB,MAAA,AAA+B,SAA/B,IAAA,CAAK,CAAA,CAAA,EACV,IAAA,CAAK,CAAA,CAAA,CAAgB,QAAS,CAAA,KAC5B,IACA,IAAK,CAAA,CAAA,CAAA,CAAA,AAGX,EAAA,CAAA,CAAe,KACb,IAAA,CAAK,CAAA,CAAO,EAAA,oBAAoB,UAAW,IAAA,CAAK,CAAA,CAAsB,EACtE,IAAA,CAAK,CAAA,CAAA,EAAO,QACZ,IAAA,CAAK,CAAA,CAAQ,CAAA,KAAA,CAAA,CAAA,AAGf,EAAA,CAAA,CAAiC,CAAC,CAAA,OAChC,CAAA,CAAA,OACA,CAAA,CAAA,MACA,CAAA,CAAA,KACA,CADA,CAEwB,IACpB,GAAA,IAAW,IAAA,CAAK,CAAA,CAAe,GAK/B,EAAoB,KACjB,IAAA,CAAA,CAAA,CAAA,GACH,oEAEF,IAAA,CAAK,CAAA,CAAkC,CAAA,CAAA,EACvC,EAAO,EAAe,IAGnB,IAAA,CAAK,CAAA,CAA2B,GAAA,KAIrC,GAAI,CAAC,IAAA,CAAK,CAAA,CAAiB,CAAA,GAAS,CAC7B,IAAA,CAAA,CAAA,CAAA,GACH,CAAA,iCAAA,EAAoC,EAAM,0CAAA,EAClB,IAAA,CAAK,CAAA,CAAgB,CAAA,IAAA,CAAK,MAAK,GAAA,CAFpD,EAIL,MAAA,CAWF,GARI,EAAa,KAIf,IAAA,CAAK,CAAA,CAAa,GAClB,IAAA,CAAK,CAAA,CAAwB,CAAA,GAI7B,EAAc,IAGd,CAAC,IAAA,CAAK,CAAA,CACN,CAAA,CAGI,GAFC,IAAA,CAAA,CAAA,CAAA,CAAQ,CAAA,CAAM,EAAC,CAEhB,CAAC,IAAA,CAAK,CAAA,CAAO,CACT,MAAA,IAAI,EAAe,4BAG3B,IAAA,CAAK,CAAA,CAAM,CAAA,gBAAA,CAAiB,UAAW,IAAA,CAAK,CAAA,CAAsB,EAClE,IAAA,CAAK,CAAA,CAAA,CAAM,KAAM,EAAA,CAGR,IAAA,IAAA,KAAY,IAAA,CAAK,CAAA,CAAmB,CAC7C,EAAS,GACX,CAAA,AAGF,EAAA,CAAyB,CAAA,CAAC,CAAA,KAAE,CAAA,CAA+B,IAIzD,GAAK,IAAA,CAAK,CAAA,CAA2B,GAAA,GAI1B,IAAA,IAAA,KAAY,IAAA,CAAK,CAAA,CAAmB,CAC7C,EAAS,EACX,CAAA,AAEJ,ESpPe,SAAA,EAAwB,CAAC,EACtC,OAAO,AAAK,MAAL,GAAa,AAAa,UAAb,OAAO,GAAkB,AAAkC,CAAA,IAAlC,CAAC,CAAC,2BAA2B,AAC5E,CDQe,SAAA,EAAiB,CAAE,EAChC,OAAO,SAAS,EAAG,CAAC,SAClB,AAAI,AAAqB,GAArB,UAAU,MAAM,EAAU,EAAe,GACpC,EAEA,EAAG,KAAK,CAAC,IAAI,CAAE,UAE1B,CACF,CDPe,SAAA,EAAiB,CAAE,EAChC,OAAO,SAAS,EAAG,CAAC,CAAE,CAAC,EACrB,OAAQ,UAAU,MAAM,EACtB,KAAK,EACH,OAAO,CAET,MAAK,EACH,OAAO,EAAe,GAAK,EAAK,EAAQ,SAAU,CAAE,EAClD,OAAO,EAAG,EAAG,EACf,EAEF,SACE,OAAO,EAAe,IAAM,EAAe,GAAK,EAAK,EAAe,GAAK,EAAQ,SAAU,CAAE,EAC3F,OAAO,EAAG,EAAI,EAChB,GAAK,EAAe,GAAK,EAAQ,SAAU,CAAE,EAC3C,OAAO,EAAG,EAAG,EACf,GAAK,EAAG,EAAG,EACf,CACF,CACF,Ca9Be,SAAA,EAA4B,CAAI,EAI7C,IAHA,IACI,EADA,EAAO,EAAE,CAGN,CAAC,AAAC,CAAA,EAAO,EAAK,IAAI,EAAA,EAAI,IAAI,EAC/B,EAAK,IAAI,CAAC,EAAK,KAAK,EAGtB,OAAO,CACT,CCTe,SAAA,EAAuB,CAAI,CAAE,CAAC,CAAE,CAAI,EAIjD,IAHA,IAAI,EAAM,EACN,EAAM,EAAK,MAAM,CAEd,EAAM,GAAK,CAChB,GAAI,EAAK,EAAG,CAAI,CAAC,EAAI,EACnB,MAAO,CAAA,EAGT,GAAO,CACT,CAEA,MAAO,CAAA,CACT,CEbe,SAAA,GAAc,CAAI,CAAE,CAAG,EACpC,OAAO,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,EAAK,EACnD,CCWA,IAAA,GAAe,AAAqB,YAArB,OAAO,OAAO,EAAE,CAAkB,OAAO,EAAE,CAZ1D,SAAmB,CAAC,CAAE,CAAC,SAErB,AAAI,IAAM,EAGD,AAAM,IAAN,GAAW,EAAI,GAAM,EAAI,EAGzB,GAAM,GAAK,GAAM,CAE5B,EEVI,GAAW,OAAO,SAAS,CAAC,QAAQ,CAEpC,GAEJ,WACE,MAAO,AAA6B,uBAA7B,GAAS,IAAI,CAAC,WAAsC,SAAsB,CAAC,EAChF,MAAO,AAAqB,uBAArB,GAAS,IAAI,CAAC,EACvB,EAAI,SAAsB,CAAC,EACzB,OAAO,GAAK,SAAU,EACxB,CACF,IDPI,GAAa,CAEjB,CAAA,CACE,SAAU,IACZ,CAAA,EAAE,oBAAoB,CAAC,YACnB,GAAqB,CAAC,cAAe,UAAW,gBAAiB,WAAY,uBAAwB,iBAAkB,iBAAiB,CAExI,GAEJ,WAGE,OAAO,UAAU,oBAAoB,CAAC,SACxC,IAEI,GAAW,SAAkB,CAAI,CAAE,CAAI,EAGzC,IAFA,IAAI,EAAM,EAEH,EAAM,EAAK,MAAM,EAAE,CACxB,GAAI,CAAI,CAAC,EAAI,GAAK,EAChB,MAAO,CAAA,EAGT,GAAO,CACT,CAEA,MAAO,CAAA,CACT,EAqBI,GAAO,AAAuB,YAAvB,OAAO,OAAO,IAAI,EAAoB,GAMjD,EAAQ,SAAc,CAAG,EACvB,GAAI,OAAO,KAAS,EAClB,MAAO,EAAE,CAIX,IADI,EAAM,EACN,EAAK,EAAE,CAEP,EAAkB,IAAkB,ACrD3B,GDqDwC,GAErD,IAAK,KAAQ,EACP,GAAK,EAAM,IAAS,CAAA,CAAC,GAAmB,AAAS,WAAT,CAAS,GACnD,CAAA,CAAE,CAAC,EAAG,MAAM,CAAC,CAAG,CAFpB,EAMA,GAAI,GAGF,IAFA,EAAO,GAAmB,MAAM,CAAG,EAE5B,GAAQ,GAGT,GAFJ,EAAO,EAAkB,CAAC,EAAK,CAEhB,IAAQ,CAAC,GAAS,EAAI,IACnC,CAAA,CAAE,CAAC,EAAG,MAAM,CAAC,CAAG,CADlB,EAIA,GAAQ,EAIZ,OAAO,CACT,GAnCA,EAAQ,SAAc,CAAG,EACvB,OAAO,OAAO,KAAS,EAAM,EAAE,CAAG,OAAO,IAAI,CAAC,EAChD,GE5BI,GAEJ,EAAQ,SAAc,CAAG,EACvB,OAAO,AAAQ,OAAR,EAAe,OAAS,AAAQ,KAAA,IAAR,EAAoB,YAAc,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAK,KAAK,CAAC,EAAG,GAChH,GRdA,SAAS,GAAmB,CAAS,CAAE,CAAS,CAAE,CAAM,CAAE,CAAM,EAC9D,IAAI,EAAI,EAAmB,GAI3B,SAAS,EAAG,CAAE,CAAE,CAAE,EAChB,OAAO,GAAQ,EAAI,EAAI,EAAO,KAAK,GAAI,EAAO,KAAK,GACrD,CAGA,MAAO,CAAC,EAAc,SAAU,CAAC,CAAE,CAAK,EACtC,MAAO,CAAC,EAAc,EAAI,EAAO,EACnC,EATQ,EAAmB,GASrB,EACR,CAEe,SAAA,GAAiB,CAAC,CAAE,CAAC,CAAE,CAAM,CAAE,CAAM,EAClD,GAAI,GAAU,EAAG,GACf,MAAO,CAAA,EAGT,IGpCI,EHoCA,EAAQ,AQJC,GRII,GAEjB,GAAI,IAAU,AQND,GRMM,GACjB,MAAO,CAAA,EAGT,GAAI,AAAoC,YAApC,OAAO,CAAC,CAAC,sBAAsB,EAAmB,AAAoC,YAApC,OAAO,CAAC,CAAC,sBAAsB,CACnF,MAAO,AAAoC,YAApC,OAAO,CAAC,CAAC,sBAAsB,EAAmB,CAAC,CAAC,sBAAsB,CAAC,IAAM,AAAoC,YAApC,OAAO,CAAC,CAAC,sBAAsB,EAAmB,CAAC,CAAC,sBAAsB,CAAC,GAGrK,GAAI,AAAoB,YAApB,OAAO,EAAE,MAAM,EAAmB,AAAoB,YAApB,OAAO,EAAE,MAAM,CACnD,MAAO,AAAoB,YAApB,OAAO,EAAE,MAAM,EAAmB,EAAE,MAAM,CAAC,IAAM,AAAoB,YAApB,OAAO,EAAE,MAAM,EAAmB,EAAE,MAAM,CAAC,GAGrG,OAAQ,GACN,IAAK,YACL,IAAK,QACL,IAAK,SACH,GAAI,AAAyB,YAAzB,OAAO,EAAE,WAAW,EAAmB,AAAiC,YGrDzE,CAAA,AAAS,OADZ,EAAQ,OHsDiD,EAAE,WAAW,EGtDpD,KAAK,CAAC,oBACL,GAAK,CAAK,CAAC,EAAE,AAAF,EHsD5B,OAAO,IAAM,EAGf,KAEF,KAAK,UACL,IAAK,SACL,IAAK,SACH,GAAI,CAAE,CAAA,OAAO,GAAM,OAAO,GAAK,GAAU,EAAE,OAAO,GAAI,EAAE,OAAO,GAAA,EAC7D,MAAO,CAAA,EAGT,KAEF,KAAK,OACH,GAAI,CAAC,GAAU,EAAE,OAAO,GAAI,EAAE,OAAO,IACnC,MAAO,CAAA,EAGT,KAEF,KAAK,QACH,OAAO,EAAE,IAAI,GAAK,EAAE,IAAI,EAAI,EAAE,OAAO,GAAK,EAAE,OAAO,AAErD,KAAK,SACH,GAAI,CAAE,CAAA,EAAE,MAAM,GAAK,EAAE,MAAM,EAAI,EAAE,MAAM,GAAK,EAAE,MAAM,EAAI,EAAE,UAAU,GAAK,EAAE,UAAU,EAAI,EAAE,SAAS,GAAK,EAAE,SAAS,EAAI,EAAE,MAAM,GAAK,EAAE,MAAM,EAAI,EAAE,OAAO,GAAK,EAAE,OAAM,AAAN,EAC/J,MAAO,CAAA,CAIb,CAIA,IAFA,IAAI,EAAM,EAAO,MAAM,CAAG,EAEnB,GAAO,GAAG,CACf,GAAI,CAAM,CAAC,EAAI,GAAK,EAClB,OAAO,CAAM,CAAC,EAAI,GAAK,EAGzB,GAAO,CACT,CAEA,OAAQ,GACN,IAAK,MACH,GAAI,EAAE,IAAI,GAAK,EAAE,IAAI,CACnB,MAAO,CAAA,EAGT,OAAO,GAAmB,EAAE,OAAO,GAAI,EAAE,OAAO,GAAI,EAAO,MAAM,CAAC,CAAC,EAAE,EAAG,EAAO,MAAM,CAAC,CAAC,EAAE,EAE3F,KAAK,MACH,GAAI,EAAE,IAAI,GAAK,EAAE,IAAI,CACnB,MAAO,CAAA,EAGT,OAAO,GAAmB,EAAE,MAAM,GAAI,EAAE,MAAM,GAAI,EAAO,MAAM,CAAC,CAAC,EAAE,EAAG,EAAO,MAAM,CAAC,CAAC,EAAE,EAEzF,KAAK,YACL,IAAK,QACL,IAAK,SACL,IAAK,UACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,QACL,IAAK,SACL,IAAK,YACL,IAAK,aACL,IAAK,oBACL,IAAK,aACL,IAAK,cACL,IAAK,aACL,IAAK,cACL,IAAK,eACL,IAAK,eACL,IAAK,cACH,KAEF,SAEE,MAAO,CAAA,CACX,CAEA,IAAI,EAAQ,AMlDC,GNkDI,GAEjB,GAAI,EAAM,MAAM,GAAK,AMpDR,GNoDa,GAAG,MAAM,CACjC,MAAO,CAAA,EAGT,IAAI,EAAiB,EAAO,MAAM,CAAC,CAAC,EAAE,EAClC,EAAiB,EAAO,MAAM,CAAC,CAAC,EAAE,EAGtC,IAFA,EAAM,EAAM,MAAM,CAAG,EAEd,GAAO,GAAG,CACf,IAAI,EAAM,CAAK,CAAC,EAAI,CAEpB,GAAI,CAAE,CAAA,GAAK,EAAK,IAAM,GAAQ,CAAC,CAAC,EAAI,CAAE,CAAC,CAAC,EAAI,CAAE,EAAgB,EAAA,EAC5D,MAAO,CAAA,EAGT,GAAO,CACT,CAEA,MAAO,CAAA,CACT,CDrIA,IAAI,GAEJ,EAAQ,SAAgB,CAAC,CAAE,CAAC,EAC1B,OAAO,GAAQ,EAAG,EAAG,EAAE,CAAE,EAAE,CAC7B,GF/Be,SAAA,GAAmB,CAAC,CAAE,CAAI,EACvC,OAAO,ACDM,SAAkB,CAAI,CAAE,CAAC,CAAE,CAAG,EAC3C,IAAI,EAAK,EAET,GAAI,AAAwB,YAAxB,OAAO,EAAK,OAAO,CACrB,OAAQ,OAAO,GACb,IAAK,SACH,GAAI,AAAM,IAAN,EAAS,CAIX,IAFA,EAAM,EAAI,EAEH,EAAM,EAAK,MAAM,EAAE,CAGxB,GAAI,AAAS,IAFb,CAAA,EAAO,CAAI,CAAC,EAAI,AAAJ,GAEM,EAAI,IAAS,EAC7B,OAAO,EAGT,GAAO,CACT,CAEA,OAAO,EACT,CAAO,GAAI,GAAM,EAAG,CAElB,KAAO,EAAM,EAAK,MAAM,EAAE,CAGxB,GAAI,AAAgB,UAAhB,MAFJ,CAAA,EAAO,CAAI,CAAC,EAAI,AAAJ,GAEoB,GAAS,EACvC,OAAO,EAGT,GAAO,CACT,CAEA,OAAO,EACT,CAGA,OAAO,EAAK,OAAO,CAAC,EAAG,EAGzB,KAAK,SACL,IAAK,UACL,IAAK,WACL,IAAK,YACH,OAAO,EAAK,OAAO,CAAC,EAAG,EAEzB,KAAK,SACH,GAAI,AAAM,OAAN,EAEF,OAAO,EAAK,OAAO,CAAC,EAAG,EAG7B,CAIF,KAAO,EAAM,EAAK,MAAM,EAAE,CACxB,GAAI,ACxBO,GDwBA,CAAI,CAAC,EAAI,CAAE,GACpB,OAAO,EAGT,GAAO,CACT,CAEA,OAAO,EACT,EDhEkB,EAAM,EAAG,IAAM,CACjC,CiBQC,IACD,GAAe,MAAM,OAAO,EAAI,SAAkB,CAAG,EACnD,OAAO,AAAO,MAAP,GAAe,EAAI,MAAM,EAAI,GAAK,AAAwC,mBAAxC,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAC1E,EKdA,GAAe,CACb,KAAM,WACJ,OAAO,IAAI,CAAC,EAAE,CAAC,oBAAoB,EACrC,EACA,OAAQ,SAAU,CAAM,EACtB,OAAO,IAAI,CAAC,EAAE,CAAC,sBAAsB,CAAC,EACxC,CACF,EDLI,GAEJ,WACE,SAAS,EAAQ,CAAC,CAAE,CAAE,EACpB,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,CAAC,CAAG,CACX,CASA,OAPA,EAAQ,SAAS,CAAC,oBAAoB,CAAG,GAAQ,IAAI,CACrD,EAAQ,SAAS,CAAC,sBAAsB,CAAG,GAAQ,MAAM,CAEzD,EAAQ,SAAS,CAAC,oBAAoB,CAAG,SAAU,CAAM,CAAE,CAAK,EAC9D,OAAO,IAAI,CAAC,CAAC,CAAC,GAAS,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAQ,GAAS,CACvE,EAEO,CACT,IhCiLO,SAASmO,KAMd,OALK4F,GACHA,CAAAA,EAAiB7F,OAAOC,OAAO,CAACC,KAAK,AAALA,EAI3B2F,CACT,C2BxLsC,EFsBxB,CAAC,sBAAuB,SAAS,CEtBI,EKEpC,SAAkB,CAAC,EAChC,OAAO,SAAU,CAAE,EACjB,OAAO,IAAI,GAAQ,EAAG,EACxB,CACF,ELNsE,EFsBX,SAAU,CAAI,CAAE,CAAU,EACnF,MAAO,AMxCA,AAAsC,oBAAtC,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CNwCpB,GAAc,ACzClB,SAAsB,CAAO,CAAE,CAAG,CAAE,CAAI,EAIrD,IAHA,IAAI,EAAQ,EACR,EAAS,EAAK,MAAM,CAEjB,EAAQ,GACb,EAAM,EAAQ,EAAK,CAAI,CAAC,EAAM,EAC9B,GAAS,EAGX,OAAO,CACT,ED+B8C,SAAU,CAAG,CAAE,CAAG,EAK5D,OAJI,EAAK,CAAU,CAAC,EAAI,GACtB,CAAA,CAAG,CAAC,EAAI,CAAG,CAAU,CAAC,EAAI,AAAJ,EAGjB,CACT,EAAG,CAAC,EAAG,AL2CM,GK3CD,IACZ,AKhDa,SAAiB,CAAE,CAAE,CAAI,EAKtC,IAJA,IAAI,EAAM,EACN,EAAM,EAAK,MAAM,CACjB,EAAS,EAAE,CAER,EAAM,GACP,EAAG,CAAI,CAAC,EAAI,GACd,CAAA,CAAM,CAAC,EAAO,MAAM,CAAC,CAAG,CAAI,CAAC,EAAI,AAAJ,EAG/B,GAAO,EAGT,OAAO,CACT,ELkCU,EAAM,EAChB,E,I,G,E,SzBmKO,eAAetE,KACpB,IAAIf,EAAS,MAAMP,KAAU1K,GAAG,CAAC,YACjC,GAAIiL,EAAOC,QAAQ,CACjB,OAAOD,EAAOC,QAAQ,CAACC,OAAO,AACzB,EAVP,IAAIC,EAWF,IAAIC,GAXFD,EAAMiF,AAxBZ,WACE,IAAM9E,EAAQ,iEACVC,EAAS,GAGb,IAAK,IAAI7hB,EAAI,EAAGA,EAAI,GAAIA,IACtB6hB,GAAUD,EAAMrY,MAAM,CAACR,KAAKqD,KAAK,CAACrD,KAAKzD,MAAM,GAAKsc,EAAMrd,MAAM,GAGhE,OAAOsd,CACT,IAgBmBjjB,GAAAA,OAAAA,CAAiB6iB,EAAK,mCAAmCrd,QAAQ,IAWhF,OADA,MAAM2c,KAAUrJ,GAAG,CAAC,CAAE6J,SAAU,CAAEC,QAASE,CAAO,CAAE,GAC7CA,CACT,CACF,CvB1MiBa,AiBqBD,CAAA,CAA2B,CAAA,UACzC,CAAA,CAAA,QACA,EAAU,CAAA,CAAA,CAAA,QACV,CAAA,CAAA,QACA,CAAA,CAAA,IACA,CADA,CAEmC,IACnC,GAAI,CAAC,EACG,MAAA,IfpCK,EeoCW,mBAAoB,6BAGxC,GAAA,EAAe,GAAI,CAAA,GACrB,MAAM,IfxCK,EeyCT,mBACA,wDAIJ,EAAe,GAAA,CAAI,GAEb,IAAA,EAA8C,CAAC,EAAU,OAAO,CAAA,CAEhE,EAAoB,EAAK,AAAC,IAC9B,GAAI,EAOE,GAAA,CACF,EAAU,WAAA,CAP2B,CACrC,UAAA,EACA,QAAA,EACA,KAAM,SAAA,EAI8B,CAAA,MAC7B,EAAG,CAAA,CAQd,IAAA,IAAW,KAA8B,EACZ,IAG7B,IAAM,uBAAsB,GAGxB,EAA0B,AAAC,GACxB,EAAU,IAAS,EAAK,OAAY,GAAA,EA2BtC,MAxBD,AAAW,CAAA,UACX,GAAA,CACF,EAAU,UAAW,CAAA,CAAE,IAAA,EAAK,wBAAA,CAAA,GAClB,EAAA,iBAAA,CAAkB,AAAC,IACvB,EAAiB,IACnB,EAAkB,CAAA,EACpB,GAGF,GAAM,CAAA,YAAE,CAAA,CAAA,QAAa,CAAQ,CAAA,CAAI,MAAM,EAAqB,CAC1D,UAAA,EACA,QAAA,EACA,QAAA,EACA,QAAA,EACA,IAAA,CAAA,GAGK,OADP,EAA4B,IAAA,CAAK,GAC1B,CAAA,CAAA,MACA,EAAO,CAER,MADN,EAAkB,CAAA,GACZ,CAAA,CACR,CAAA,IAOS,KACP,EAAkB,CAAA,EAAI,CAG5B,CAAA,EjBxGyB,CACvB3N,UAfgB,IkBiPH,ElBjPuB,CACpC2F,aAAc5X,OAAOwf,MAAM,CAE3B3H,eAAgB,CACd,qCACA,sCAFFA,AAIF,GASE7G,QAAS,CACPyO,QARJ,SAAiBtO,CAAI,EAEnB,OAAOgN,OAAOC,OAAO,CAACC,KAAK,CAAC3K,GAAG,CAACvC,EAClC,EAMIuO,UAAAA,EACF,CACF","debug_id":"b7f428ff-f57b-5e0d-a04c-da5731228230"}